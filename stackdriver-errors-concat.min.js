!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.StackTrace=e()}}(function(){var e;return function t(e,n,r){function o(a,s){if(!n[a]){if(!e[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};e[a][0].call(l.exports,function(t){var n=e[a][1][t];return o(n?n:t)},l,l.exports,t,e,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(t,n,r){!function(o,i){"use strict";"function"==typeof e&&e.amd?e("error-stack-parser",["stackframe"],i):"object"==typeof r?n.exports=i(t("stackframe")):o.ErrorStackParser=i(o.StackFrame)}(this,function(e){"use strict";var t=/(^|@)\S+\:\d+/,n=/^\s*at .*(\S+\:\d+|\(native\))/m,r=/^(eval@)?(\[native code\])?$/;return{parse:function(e){if("undefined"!=typeof e.stacktrace||"undefined"!=typeof e["opera#sourceloc"])return this.parseOpera(e);if(e.stack&&e.stack.match(n))return this.parseV8OrIE(e);if(e.stack)return this.parseFFOrSafari(e);throw new Error("Cannot parse given Error object")},extractLocation:function(e){if(e.indexOf(":")===-1)return[e];var t=/(.+?)(?:\:(\d+))?(?:\:(\d+))?$/,n=t.exec(e.replace(/[\(\)]/g,""));return[n[1],n[2]||void 0,n[3]||void 0]},parseV8OrIE:function(t){var r=t.stack.split("\n").filter(function(e){return!!e.match(n)},this);return r.map(function(t){t.indexOf("(eval ")>-1&&(t=t.replace(/eval code/g,"eval").replace(/(\(eval at [^\()]*)|(\)\,.*$)/g,""));var n=t.replace(/^\s+/,"").replace(/\(eval code/g,"(").split(/\s+/).slice(1),r=this.extractLocation(n.pop()),o=n.join(" ")||void 0,i=["eval","<anonymous>"].indexOf(r[0])>-1?void 0:r[0];return new e({functionName:o,fileName:i,lineNumber:r[1],columnNumber:r[2],source:t})},this)},parseFFOrSafari:function(t){var n=t.stack.split("\n").filter(function(e){return!e.match(r)},this);return n.map(function(t){if(t.indexOf(" > eval")>-1&&(t=t.replace(/ line (\d+)(?: > eval line \d+)* > eval\:\d+\:\d+/g,":$1")),t.indexOf("@")===-1&&t.indexOf(":")===-1)return new e({functionName:t});var n=t.split("@"),r=this.extractLocation(n.pop()),o=n.join("@")||void 0;return new e({functionName:o,fileName:r[0],lineNumber:r[1],columnNumber:r[2],source:t})},this)},parseOpera:function(e){return!e.stacktrace||e.message.indexOf("\n")>-1&&e.message.split("\n").length>e.stacktrace.split("\n").length?this.parseOpera9(e):e.stack?this.parseOpera11(e):this.parseOpera10(e)},parseOpera9:function(t){for(var n=/Line (\d+).*script (?:in )?(\S+)/i,r=t.message.split("\n"),o=[],i=2,a=r.length;i<a;i+=2){var s=n.exec(r[i]);s&&o.push(new e({fileName:s[2],lineNumber:s[1],source:r[i]}))}return o},parseOpera10:function(t){for(var n=/Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i,r=t.stacktrace.split("\n"),o=[],i=0,a=r.length;i<a;i+=2){var s=n.exec(r[i]);s&&o.push(new e({functionName:s[3]||void 0,fileName:s[2],lineNumber:s[1],source:r[i]}))}return o},parseOpera11:function(n){var r=n.stack.split("\n").filter(function(e){return!!e.match(t)&&!e.match(/^Error created at/)},this);return r.map(function(t){var n,r=t.split("@"),o=this.extractLocation(r.pop()),i=r.shift()||"",a=i.replace(/<anonymous function(: (\w+))?>/,"$2").replace(/\([^\)]*\)/g,"")||void 0;i.match(/\(([^\)]*)\)/)&&(n=i.replace(/^[^\(]+\(([^\)]*)\)$/,"$1"));var s=void 0===n||"[arguments not available]"===n?void 0:n.split(",");return new e({functionName:a,args:s,fileName:o[0],lineNumber:o[1],columnNumber:o[2],source:t})},this)}}})},{stackframe:13}],2:[function(t,n,r){(function(o,i){!function(t,o){"object"==typeof r&&"undefined"!=typeof n?n.exports=o():"function"==typeof e&&e.amd?e(o):t.ES6Promise=o()}(this,function(){"use strict";function e(e){return"function"==typeof e||"object"==typeof e&&null!==e}function n(e){return"function"==typeof e}function r(e){W=e}function a(e){K=e}function s(){return function(){return o.nextTick(p)}}function u(){return function(){Y(p)}}function c(){var e=0,t=new Q(p),n=document.createTextNode("");return t.observe(n,{characterData:!0}),function(){n.data=e=++e%2}}function l(){var e=new MessageChannel;return e.port1.onmessage=p,function(){return e.port2.postMessage(0)}}function f(){var e=setTimeout;return function(){return e(p,1)}}function p(){for(var e=0;e<H;e+=2){var t=ne[e],n=ne[e+1];t(n),ne[e]=void 0,ne[e+1]=void 0}H=0}function h(){try{var e=t,n=e("vertx");return Y=n.runOnLoop||n.runOnContext,u()}catch(r){return f()}}function g(e,t){var n=arguments,r=this,o=new this.constructor(m);void 0===o[oe]&&R(o);var i=r._state;return i?!function(){var e=n[i-1];K(function(){return M(i,o,e,r._result)})}():T(r,o,e,t),o}function d(e){var t=this;if(e&&"object"==typeof e&&e.constructor===t)return e;var n=new t(m);return O(n,e),n}function m(){}function v(){return new TypeError("You cannot resolve a promise with itself")}function y(){return new TypeError("A promises callback cannot return that same promise.")}function _(e){try{return e.then}catch(t){return ue.error=t,ue}}function w(e,t,n,r){try{e.call(t,n,r)}catch(o){return o}}function b(e,t,n){K(function(e){var r=!1,o=w(n,t,function(n){r||(r=!0,t!==n?O(e,n):E(e,n))},function(t){r||(r=!0,N(e,t))},"Settle: "+(e._label||" unknown promise"));!r&&o&&(r=!0,N(e,o))},e)}function C(e,t){t._state===ae?E(e,t._result):t._state===se?N(e,t._result):T(t,void 0,function(t){return O(e,t)},function(t){return N(e,t)})}function A(e,t,r){t.constructor===e.constructor&&r===g&&t.constructor.resolve===d?C(e,t):r===ue?N(e,ue.error):void 0===r?E(e,t):n(r)?b(e,t,r):E(e,t)}function O(t,n){t===n?N(t,v()):e(n)?A(t,n,_(n)):E(t,n)}function S(e){e._onerror&&e._onerror(e._result),j(e)}function E(e,t){e._state===ie&&(e._result=t,e._state=ae,0!==e._subscribers.length&&K(j,e))}function N(e,t){e._state===ie&&(e._state=se,e._result=t,K(S,e))}function T(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+ae]=n,o[i+se]=r,0===i&&e._state&&K(j,e)}function j(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,a=0;a<t.length;a+=3)r=t[a],o=t[a+n],r?M(n,r,o,i):o(i);e._subscribers.length=0}}function L(){this.error=null}function k(e,t){try{return e(t)}catch(n){return ce.error=n,ce}}function M(e,t,r,o){var i=n(r),a=void 0,s=void 0,u=void 0,c=void 0;if(i){if(a=k(r,o),a===ce?(c=!0,s=a.error,a=null):u=!0,t===a)return void N(t,y())}else a=o,u=!0;t._state!==ie||(i&&u?O(t,a):c?N(t,s):e===ae?E(t,a):e===se&&N(t,a))}function x(e,t){try{t(function(t){O(e,t)},function(t){N(e,t)})}catch(n){N(e,n)}}function P(){return le++}function R(e){e[oe]=le++,e._state=void 0,e._result=void 0,e._subscribers=[]}function U(e,t){this._instanceConstructor=e,this.promise=new e(m),this.promise[oe]||R(this.promise),Z(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?E(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&E(this.promise,this._result))):N(this.promise,F())}function F(){return new Error("Array Methods must be provided an Array")}function $(e){return new U(this,e).promise}function G(e){var t=this;return new t(Z(e)?function(n,r){for(var o=e.length,i=0;i<o;i++)t.resolve(e[i]).then(n,r)}:function(e,t){return t(new TypeError("You must pass an array to race."))})}function D(e){var t=this,n=new t(m);return N(n,e),n}function B(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function I(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function J(e){this[oe]=P(),this._result=this._state=void 0,this._subscribers=[],m!==e&&("function"!=typeof e&&B(),this instanceof J?x(this,e):I())}function q(){var e=void 0;if("undefined"!=typeof i)e=i;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=e.Promise;if(n){var r=null;try{r=Object.prototype.toString.call(n.resolve())}catch(t){}if("[object Promise]"===r&&!n.cast)return}e.Promise=J}var z=void 0;z=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)};var Z=z,H=0,Y=void 0,W=void 0,K=function(e,t){ne[H]=e,ne[H+1]=t,H+=2,2===H&&(W?W(p):re())},V="undefined"!=typeof window?window:void 0,X=V||{},Q=X.MutationObserver||X.WebKitMutationObserver,ee="undefined"==typeof self&&"undefined"!=typeof o&&"[object process]"==={}.toString.call(o),te="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,ne=new Array(1e3),re=void 0;re=ee?s():Q?c():te?l():void 0===V&&"function"==typeof t?h():f();var oe=Math.random().toString(36).substring(16),ie=void 0,ae=1,se=2,ue=new L,ce=new L,le=0;return U.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===ie&&n<e;n++)this._eachEntry(t[n],n)},U.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===d){var o=_(e);if(o===g&&e._state!==ie)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===J){var i=new n(m);A(i,e,o),this._willSettleAt(i,t)}else this._willSettleAt(new n(function(t){return t(e)}),t)}else this._willSettleAt(r(e),t)},U.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===ie&&(this._remaining--,e===se?N(r,n):this._result[t]=n),0===this._remaining&&E(r,this._result)},U.prototype._willSettleAt=function(e,t){var n=this;T(e,void 0,function(e){return n._settledAt(ae,t,e)},function(e){return n._settledAt(se,t,e)})},J.all=$,J.race=G,J.resolve=d,J.reject=D,J._setScheduler=r,J._setAsap=a,J._asap=K,J.prototype={constructor:J,then:g,"catch":function(e){return this.then(null,e)}},q(),J.polyfill=q,J.Promise=J,J})}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:4}],3:[function(t,n,r){(function(t){(function(){function o(e,t){function n(e){if(n[e]!==m)return n[e];var o;if("bug-string-char-index"==e)o="a"!="a"[0];else if("json"==e)o=n("json-stringify")&&n("json-parse");else{var a,s='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==e){var u=t.stringify,l="function"==typeof u&&_;if(l){(a=function(){return 1}).toJSON=a;try{l="0"===u(0)&&"0"===u(new r)&&'""'==u(new i)&&u(y)===m&&u(m)===m&&u()===m&&"1"===u(a)&&"[1]"==u([a])&&"[null]"==u([m])&&"null"==u(null)&&"[null,null,null]"==u([m,y,null])&&u({a:[a,!0,!1,null,"\0\b\n\f\r\t"]})==s&&"1"===u(null,a)&&"[\n 1,\n 2\n]"==u([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==u(new c((-864e13)))&&'"+275760-09-13T00:00:00.000Z"'==u(new c(864e13))&&'"-000001-01-01T00:00:00.000Z"'==u(new c((-621987552e5)))&&'"1969-12-31T23:59:59.999Z"'==u(new c((-1)))}catch(f){l=!1}}o=l}if("json-parse"==e){var p=t.parse;if("function"==typeof p)try{if(0===p("0")&&!p(!1)){a=p(s);var h=5==a.a.length&&1===a.a[0];if(h){try{h=!p('"\t"')}catch(f){}if(h)try{h=1!==p("01")}catch(f){}if(h)try{h=1!==p("1.")}catch(f){}}}}catch(f){h=!1}o=h}}return n[e]=!!o}e||(e=u.Object()),t||(t=u.Object());var r=e.Number||u.Number,i=e.String||u.String,s=e.Object||u.Object,c=e.Date||u.Date,l=e.SyntaxError||u.SyntaxError,f=e.TypeError||u.TypeError,p=e.Math||u.Math,h=e.JSON||u.JSON;"object"==typeof h&&h&&(t.stringify=h.stringify,t.parse=h.parse);var g,d,m,v=s.prototype,y=v.toString,_=new c((-0xc782b5b800cec));try{_=_.getUTCFullYear()==-109252&&0===_.getUTCMonth()&&1===_.getUTCDate()&&10==_.getUTCHours()&&37==_.getUTCMinutes()&&6==_.getUTCSeconds()&&708==_.getUTCMilliseconds()}catch(w){}if(!n("json")){var b="[object Function]",C="[object Date]",A="[object Number]",O="[object String]",S="[object Array]",E="[object Boolean]",N=n("bug-string-char-index");if(!_)var T=p.floor,j=[0,31,59,90,120,151,181,212,243,273,304,334],L=function(e,t){return j[t]+365*(e-1970)+T((e-1969+(t=+(t>1)))/4)-T((e-1901+t)/100)+T((e-1601+t)/400)};if((g=v.hasOwnProperty)||(g=function(e){var t,n={};return(n.__proto__=null,n.__proto__={toString:1},n).toString!=y?g=function(e){var t=this.__proto__,n=e in(this.__proto__=null,this);return this.__proto__=t,n}:(t=n.constructor,g=function(e){var n=(this.constructor||t).prototype;return e in this&&!(e in n&&this[e]===n[e])}),n=null,g.call(this,e)}),d=function(e,t){var n,r,o,i=0;(n=function(){this.valueOf=0}).prototype.valueOf=0,r=new n;for(o in r)g.call(r,o)&&i++;return n=r=null,i?d=2==i?function(e,t){var n,r={},o=y.call(e)==b;for(n in e)o&&"prototype"==n||g.call(r,n)||!(r[n]=1)||!g.call(e,n)||t(n)}:function(e,t){var n,r,o=y.call(e)==b;for(n in e)o&&"prototype"==n||!g.call(e,n)||(r="constructor"===n)||t(n);(r||g.call(e,n="constructor"))&&t(n)}:(r=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],d=function(e,t){var n,o,i=y.call(e)==b,s=!i&&"function"!=typeof e.constructor&&a[typeof e.hasOwnProperty]&&e.hasOwnProperty||g;for(n in e)i&&"prototype"==n||!s.call(e,n)||t(n);for(o=r.length;n=r[--o];s.call(e,n)&&t(n));}),d(e,t)},!n("json-stringify")){var k={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},M="000000",x=function(e,t){return(M+(t||0)).slice(-e)},P="\\u00",R=function(e){for(var t='"',n=0,r=e.length,o=!N||r>10,i=o&&(N?e.split(""):e);n<r;n++){var a=e.charCodeAt(n);switch(a){case 8:case 9:case 10:case 12:case 13:case 34:case 92:t+=k[a];break;default:if(a<32){t+=P+x(2,a.toString(16));break}t+=o?i[n]:e.charAt(n)}}return t+'"'},U=function(e,t,n,r,o,i,a){var s,u,c,l,p,h,v,_,w,b,N,j,k,M,P,F;try{s=t[e]}catch($){}if("object"==typeof s&&s)if(u=y.call(s),u!=C||g.call(s,"toJSON"))"function"==typeof s.toJSON&&(u!=A&&u!=O&&u!=S||g.call(s,"toJSON"))&&(s=s.toJSON(e));else if(s>-1/0&&s<1/0){if(L){for(p=T(s/864e5),c=T(p/365.2425)+1970-1;L(c+1,0)<=p;c++);for(l=T((p-L(c,0))/30.42);L(c,l+1)<=p;l++);p=1+p-L(c,l),h=(s%864e5+864e5)%864e5,v=T(h/36e5)%24,_=T(h/6e4)%60,w=T(h/1e3)%60,b=h%1e3}else c=s.getUTCFullYear(),l=s.getUTCMonth(),p=s.getUTCDate(),v=s.getUTCHours(),_=s.getUTCMinutes(),w=s.getUTCSeconds(),b=s.getUTCMilliseconds();s=(c<=0||c>=1e4?(c<0?"-":"+")+x(6,c<0?-c:c):x(4,c))+"-"+x(2,l+1)+"-"+x(2,p)+"T"+x(2,v)+":"+x(2,_)+":"+x(2,w)+"."+x(3,b)+"Z"}else s=null;if(n&&(s=n.call(t,e,s)),null===s)return"null";if(u=y.call(s),u==E)return""+s;if(u==A)return s>-1/0&&s<1/0?""+s:"null";if(u==O)return R(""+s);if("object"==typeof s){for(M=a.length;M--;)if(a[M]===s)throw f();if(a.push(s),N=[],P=i,i+=o,u==S){for(k=0,M=s.length;k<M;k++)j=U(k,s,n,r,o,i,a),N.push(j===m?"null":j);F=N.length?o?"[\n"+i+N.join(",\n"+i)+"\n"+P+"]":"["+N.join(",")+"]":"[]"}else d(r||s,function(e){var t=U(e,s,n,r,o,i,a);t!==m&&N.push(R(e)+":"+(o?" ":"")+t)}),F=N.length?o?"{\n"+i+N.join(",\n"+i)+"\n"+P+"}":"{"+N.join(",")+"}":"{}";return a.pop(),F}};t.stringify=function(e,t,n){var r,o,i,s;if(a[typeof t]&&t)if((s=y.call(t))==b)o=t;else if(s==S){i={};for(var u,c=0,l=t.length;c<l;u=t[c++],s=y.call(u),(s==O||s==A)&&(i[u]=1));}if(n)if((s=y.call(n))==A){if((n-=n%1)>0)for(r="",n>10&&(n=10);r.length<n;r+=" ");}else s==O&&(r=n.length<=10?n:n.slice(0,10));return U("",(u={},u[""]=e,u),o,i,r,"",[])}}if(!n("json-parse")){var F,$,G=i.fromCharCode,D={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},B=function(){throw F=$=null,l()},I=function(){for(var e,t,n,r,o,i=$,a=i.length;F<a;)switch(o=i.charCodeAt(F)){case 9:case 10:case 13:case 32:F++;break;case 123:case 125:case 91:case 93:case 58:case 44:return e=N?i.charAt(F):i[F],F++,e;case 34:for(e="@",F++;F<a;)if(o=i.charCodeAt(F),o<32)B();else if(92==o)switch(o=i.charCodeAt(++F)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:e+=D[o],F++;break;case 117:for(t=++F,n=F+4;F<n;F++)o=i.charCodeAt(F),o>=48&&o<=57||o>=97&&o<=102||o>=65&&o<=70||B();e+=G("0x"+i.slice(t,F));break;default:B()}else{if(34==o)break;for(o=i.charCodeAt(F),t=F;o>=32&&92!=o&&34!=o;)o=i.charCodeAt(++F);e+=i.slice(t,F)}if(34==i.charCodeAt(F))return F++,e;B();default:if(t=F,45==o&&(r=!0,o=i.charCodeAt(++F)),o>=48&&o<=57){for(48==o&&(o=i.charCodeAt(F+1),o>=48&&o<=57)&&B(),r=!1;F<a&&(o=i.charCodeAt(F),o>=48&&o<=57);F++);if(46==i.charCodeAt(F)){for(n=++F;n<a&&(o=i.charCodeAt(n),o>=48&&o<=57);n++);n==F&&B(),F=n}if(o=i.charCodeAt(F),101==o||69==o){for(o=i.charCodeAt(++F),43!=o&&45!=o||F++,n=F;n<a&&(o=i.charCodeAt(n),o>=48&&o<=57);n++);n==F&&B(),F=n}return+i.slice(t,F)}if(r&&B(),"true"==i.slice(F,F+4))return F+=4,!0;if("false"==i.slice(F,F+5))return F+=5,!1;if("null"==i.slice(F,F+4))return F+=4,null;B()}return"$"},J=function(e){var t,n;if("$"==e&&B(),"string"==typeof e){if("@"==(N?e.charAt(0):e[0]))return e.slice(1);if("["==e){for(t=[];e=I(),"]"!=e;n||(n=!0))n&&(","==e?(e=I(),"]"==e&&B()):B()),","==e&&B(),t.push(J(e));return t}if("{"==e){for(t={};e=I(),"}"!=e;n||(n=!0))n&&(","==e?(e=I(),"}"==e&&B()):B()),","!=e&&"string"==typeof e&&"@"==(N?e.charAt(0):e[0])&&":"==I()||B(),t[e.slice(1)]=J(I());return t}B()}return e},q=function(e,t,n){var r=z(e,t,n);r===m?delete e[t]:e[t]=r},z=function(e,t,n){var r,o=e[t];if("object"==typeof o&&o)if(y.call(o)==S)for(r=o.length;r--;)q(o,r,n);else d(o,function(e){q(o,e,n)});return n.call(e,t,o)};t.parse=function(e,t){var n,r;return F=0,$=""+e,n=J(I()),"$"!=I()&&B(),F=$=null,t&&y.call(t)==b?z((r={},r[""]=n,r),"",t):n}}}return t.runInContext=o,t}var i="function"==typeof e&&e.amd,a={"function":!0,object:!0},s=a[typeof r]&&r&&!r.nodeType&&r,u=a[typeof window]&&window||this,c=s&&a[typeof n]&&n&&!n.nodeType&&"object"==typeof t&&t;if(!c||c.global!==c&&c.window!==c&&c.self!==c||(u=c),s&&!i)o(u,s);else{var l=u.JSON,f=u.JSON3,p=!1,h=o(u,u.JSON3={noConflict:function(){return p||(p=!0,u.JSON=l,u.JSON3=f,l=f=null),h}});u.JSON={parse:h.parse,stringify:h.stringify}}i&&e(function(){return h})}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],4:[function(e,t,n){function r(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(e){if(f===setTimeout)return setTimeout(e,0);if((f===r||!f)&&setTimeout)return f=setTimeout,setTimeout(e,0);try{return f(e,0)}catch(t){try{return f.call(null,e,0)}catch(t){return f.call(this,e,0)}}}function a(e){if(p===clearTimeout)return clearTimeout(e);if((p===o||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(e);try{return p(e)}catch(t){try{return p.call(null,e)}catch(t){return p.call(this,e)}}}function s(){m&&g&&(m=!1,g.length?d=g.concat(d):v=-1,d.length&&u())}function u(){if(!m){var e=i(s);m=!0;for(var t=d.length;t;){for(g=d,d=[];++v<t;)g&&g[v].run();v=-1,t=d.length}g=null,m=!1,a(e)}}function c(e,t){this.fun=e,this.array=t}function l(){}var f,p,h=t.exports={};!function(){try{f="function"==typeof setTimeout?setTimeout:r}catch(e){f=r}try{p="function"==typeof clearTimeout?clearTimeout:o}catch(e){p=o}}();var g,d=[],m=!1,v=-1;h.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];d.push(new c(e,t)),1!==d.length||m||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=l,h.addListener=l,h.once=l,h.off=l,h.removeListener=l,h.removeAllListeners=l,h.emit=l,h.binding=function(e){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(e){throw new Error("process.chdir is not supported")},h.umask=function(){return 0}},{}],5:[function(e,t,n){function r(){this._array=[],this._set=Object.create(null)}var o=e("./util"),i=Object.prototype.hasOwnProperty;r.fromArray=function(e,t){for(var n=new r,o=0,i=e.length;o<i;o++)n.add(e[o],t);return n},r.prototype.size=function(){return Object.getOwnPropertyNames(this._set).length},r.prototype.add=function(e,t){var n=o.toSetString(e),r=i.call(this._set,n),a=this._array.length;r&&!t||this._array.push(e),r||(this._set[n]=a)},r.prototype.has=function(e){var t=o.toSetString(e);return i.call(this._set,t)},r.prototype.indexOf=function(e){var t=o.toSetString(e);if(i.call(this._set,t))return this._set[t];throw new Error('"'+e+'" is not in the set.')},r.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},r.prototype.toArray=function(){return this._array.slice()},n.ArraySet=r},{"./util":11}],6:[function(e,t,n){function r(e){return e<0?(-e<<1)+1:(e<<1)+0}function o(e){var t=1===(1&e),n=e>>1;return t?-n:n}var i=e("./base64"),a=5,s=1<<a,u=s-1,c=s;n.encode=function(e){var t,n="",o=r(e);do t=o&u,o>>>=a,o>0&&(t|=c),n+=i.encode(t);while(o>0);return n},n.decode=function(e,t,n){var r,s,l=e.length,f=0,p=0;do{if(t>=l)throw new Error("Expected more digits in base 64 VLQ value.");if(s=i.decode(e.charCodeAt(t++)),s===-1)throw new Error("Invalid base64 digit: "+e.charAt(t-1));r=!!(s&c),s&=u,f+=s<<p,p+=a}while(r);n.value=o(f),n.rest=t}},{"./base64":7}],7:[function(e,t,n){var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");n.encode=function(e){if(0<=e&&e<r.length)return r[e];throw new TypeError("Must be between 0 and 63: "+e)},n.decode=function(e){var t=65,n=90,r=97,o=122,i=48,a=57,s=43,u=47,c=26,l=52;return t<=e&&e<=n?e-t:r<=e&&e<=o?e-r+c:i<=e&&e<=a?e-i+l:e==s?62:e==u?63:-1}},{}],8:[function(e,t,n){function r(e,t,o,i,a,s){var u=Math.floor((t-e)/2)+e,c=a(o,i[u],!0);return 0===c?u:c>0?t-u>1?r(u,t,o,i,a,s):s==n.LEAST_UPPER_BOUND?t<i.length?t:-1:u:u-e>1?r(e,u,o,i,a,s):s==n.LEAST_UPPER_BOUND?u:e<0?-1:e}n.GREATEST_LOWER_BOUND=1,n.LEAST_UPPER_BOUND=2,n.search=function(e,t,o,i){if(0===t.length)return-1;var a=r(-1,t.length,e,t,o,i||n.GREATEST_LOWER_BOUND);if(a<0)return-1;for(;a-1>=0&&0===o(t[a],t[a-1],!0);)--a;return a}},{}],9:[function(e,t,n){function r(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function o(e,t){return Math.round(e+Math.random()*(t-e))}function i(e,t,n,a){if(n<a){var s=o(n,a),u=n-1;r(e,s,a);for(var c=e[a],l=n;l<a;l++)t(e[l],c)<=0&&(u+=1,r(e,u,l));r(e,u+1,l);var f=u+1;i(e,t,n,f-1),i(e,t,f+1,a)}}n.quickSort=function(e,t){i(e,t,0,e.length-1)}},{}],10:[function(e,t,n){function r(e){var t=e;return"string"==typeof e&&(t=JSON.parse(e.replace(/^\)\]\}'/,""))),null!=t.sections?new a(t):new o(t)}function o(e){var t=e;"string"==typeof e&&(t=JSON.parse(e.replace(/^\)\]\}'/,"")));var n=s.getArg(t,"version"),r=s.getArg(t,"sources"),o=s.getArg(t,"names",[]),i=s.getArg(t,"sourceRoot",null),a=s.getArg(t,"sourcesContent",null),u=s.getArg(t,"mappings"),l=s.getArg(t,"file",null);if(n!=this._version)throw new Error("Unsupported version: "+n);r=r.map(String).map(s.normalize).map(function(e){return i&&s.isAbsolute(i)&&s.isAbsolute(e)?s.relative(i,e):e}),this._names=c.fromArray(o.map(String),!0),this._sources=c.fromArray(r,!0),this.sourceRoot=i,this.sourcesContent=a,this._mappings=u,this.file=l}function i(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function a(e){var t=e;"string"==typeof e&&(t=JSON.parse(e.replace(/^\)\]\}'/,"")));var n=s.getArg(t,"version"),o=s.getArg(t,"sections");if(n!=this._version)throw new Error("Unsupported version: "+n);this._sources=new c,this._names=new c;var i={line:-1,column:0};this._sections=o.map(function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var t=s.getArg(e,"offset"),n=s.getArg(t,"line"),o=s.getArg(t,"column");if(n<i.line||n===i.line&&o<i.column)throw new Error("Section offsets must be ordered and non-overlapping.");return i=t,{generatedOffset:{generatedLine:n+1,generatedColumn:o+1},consumer:new r(s.getArg(e,"map"))}})}var s=e("./util"),u=e("./binary-search"),c=e("./array-set").ArraySet,l=e("./base64-vlq"),f=e("./quick-sort").quickSort;r.fromSourceMap=function(e){return o.fromSourceMap(e)},r.prototype._version=3,r.prototype.__generatedMappings=null,Object.defineProperty(r.prototype,"_generatedMappings",{get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),r.prototype.__originalMappings=null,Object.defineProperty(r.prototype,"_originalMappings",{get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),r.prototype._charIsMappingSeparator=function(e,t){var n=e.charAt(t);return";"===n||","===n},r.prototype._parseMappings=function(e,t){throw new Error("Subclasses must implement _parseMappings")},r.GENERATED_ORDER=1,r.ORIGINAL_ORDER=2,r.GREATEST_LOWER_BOUND=1,r.LEAST_UPPER_BOUND=2,r.prototype.eachMapping=function(e,t,n){var o,i=t||null,a=n||r.GENERATED_ORDER;switch(a){case r.GENERATED_ORDER:o=this._generatedMappings;break;case r.ORIGINAL_ORDER:o=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var u=this.sourceRoot;o.map(function(e){var t=null===e.source?null:this._sources.at(e.source);return null!=t&&null!=u&&(t=s.join(u,t)),{source:t,generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}},this).forEach(e,i)},r.prototype.allGeneratedPositionsFor=function(e){var t=s.getArg(e,"line"),n={source:s.getArg(e,"source"),originalLine:t,originalColumn:s.getArg(e,"column",0)};if(null!=this.sourceRoot&&(n.source=s.relative(this.sourceRoot,n.source)),!this._sources.has(n.source))return[];n.source=this._sources.indexOf(n.source);var r=[],o=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",s.compareByOriginalPositions,u.LEAST_UPPER_BOUND);if(o>=0){var i=this._originalMappings[o];if(void 0===e.column)for(var a=i.originalLine;i&&i.originalLine===a;)r.push({line:s.getArg(i,"generatedLine",null),column:s.getArg(i,"generatedColumn",null),lastColumn:s.getArg(i,"lastGeneratedColumn",null)}),i=this._originalMappings[++o];else for(var c=i.originalColumn;i&&i.originalLine===t&&i.originalColumn==c;)r.push({line:s.getArg(i,"generatedLine",null),column:s.getArg(i,"generatedColumn",null),lastColumn:s.getArg(i,"lastGeneratedColumn",null)}),i=this._originalMappings[++o]}return r},n.SourceMapConsumer=r,o.prototype=Object.create(r.prototype),o.prototype.consumer=r,o.fromSourceMap=function(e){var t=Object.create(o.prototype),n=t._names=c.fromArray(e._names.toArray(),!0),r=t._sources=c.fromArray(e._sources.toArray(),!0);t.sourceRoot=e._sourceRoot,t.sourcesContent=e._generateSourcesContent(t._sources.toArray(),t.sourceRoot),t.file=e._file;for(var a=e._mappings.toArray().slice(),u=t.__generatedMappings=[],l=t.__originalMappings=[],p=0,h=a.length;p<h;p++){var g=a[p],d=new i;d.generatedLine=g.generatedLine,d.generatedColumn=g.generatedColumn,g.source&&(d.source=r.indexOf(g.source),d.originalLine=g.originalLine,d.originalColumn=g.originalColumn,g.name&&(d.name=n.indexOf(g.name)),l.push(d)),u.push(d)}return f(t.__originalMappings,s.compareByOriginalPositions),t},o.prototype._version=3,Object.defineProperty(o.prototype,"sources",{get:function(){return this._sources.toArray().map(function(e){return null!=this.sourceRoot?s.join(this.sourceRoot,e):e},this)}}),o.prototype._parseMappings=function(e,t){for(var n,r,o,a,u,c=1,p=0,h=0,g=0,d=0,m=0,v=e.length,y=0,_={},w={},b=[],C=[];y<v;)if(";"===e.charAt(y))c++,y++,p=0;else if(","===e.charAt(y))y++;else{for(n=new i,n.generatedLine=c,a=y;a<v&&!this._charIsMappingSeparator(e,a);a++);if(r=e.slice(y,a),o=_[r])y+=r.length;else{for(o=[];y<a;)l.decode(e,y,w),u=w.value,y=w.rest,o.push(u);if(2===o.length)throw new Error("Found a source, but no line and column");if(3===o.length)throw new Error("Found a source and line, but no column");_[r]=o}n.generatedColumn=p+o[0],p=n.generatedColumn,o.length>1&&(n.source=d+o[1],d+=o[1],n.originalLine=h+o[2],h=n.originalLine,n.originalLine+=1,n.originalColumn=g+o[3],g=n.originalColumn,o.length>4&&(n.name=m+o[4],m+=o[4])),C.push(n),"number"==typeof n.originalLine&&b.push(n)}f(C,s.compareByGeneratedPositionsDeflated),this.__generatedMappings=C,f(b,s.compareByOriginalPositions),this.__originalMappings=b},o.prototype._findMapping=function(e,t,n,r,o,i){if(e[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[n]);if(e[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[r]);return u.search(e,t,o,i)},o.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var n=this._generatedMappings[e+1];if(t.generatedLine===n.generatedLine){t.lastGeneratedColumn=n.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},o.prototype.originalPositionFor=function(e){var t={generatedLine:s.getArg(e,"line"),generatedColumn:s.getArg(e,"column")},n=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",s.compareByGeneratedPositionsDeflated,s.getArg(e,"bias",r.GREATEST_LOWER_BOUND));if(n>=0){var o=this._generatedMappings[n];if(o.generatedLine===t.generatedLine){var i=s.getArg(o,"source",null);null!==i&&(i=this._sources.at(i),null!=this.sourceRoot&&(i=s.join(this.sourceRoot,i)));var a=s.getArg(o,"name",null);return null!==a&&(a=this._names.at(a)),{source:i,line:s.getArg(o,"originalLine",null),column:s.getArg(o,"originalColumn",null),name:a}}}return{source:null,line:null,column:null,name:null}},o.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(e){return null==e}))},o.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;if(null!=this.sourceRoot&&(e=s.relative(this.sourceRoot,e)),this._sources.has(e))return this.sourcesContent[this._sources.indexOf(e)];var n;if(null!=this.sourceRoot&&(n=s.urlParse(this.sourceRoot))){var r=e.replace(/^file:\/\//,"");if("file"==n.scheme&&this._sources.has(r))return this.sourcesContent[this._sources.indexOf(r)];if((!n.path||"/"==n.path)&&this._sources.has("/"+e))return this.sourcesContent[this._sources.indexOf("/"+e)]}if(t)return null;throw new Error('"'+e+'" is not in the SourceMap.')},o.prototype.generatedPositionFor=function(e){var t=s.getArg(e,"source");if(null!=this.sourceRoot&&(t=s.relative(this.sourceRoot,t)),!this._sources.has(t))return{line:null,column:null,lastColumn:null};t=this._sources.indexOf(t);var n={source:t,originalLine:s.getArg(e,"line"),originalColumn:s.getArg(e,"column")},o=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",s.compareByOriginalPositions,s.getArg(e,"bias",r.GREATEST_LOWER_BOUND));if(o>=0){var i=this._originalMappings[o];if(i.source===n.source)return{line:s.getArg(i,"generatedLine",null),column:s.getArg(i,"generatedColumn",null),lastColumn:s.getArg(i,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},n.BasicSourceMapConsumer=o,a.prototype=Object.create(r.prototype),a.prototype.constructor=r,a.prototype._version=3,Object.defineProperty(a.prototype,"sources",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var n=0;n<this._sections[t].consumer.sources.length;n++)e.push(this._sections[t].consumer.sources[n]);return e}}),a.prototype.originalPositionFor=function(e){var t={generatedLine:s.getArg(e,"line"),generatedColumn:s.getArg(e,"column")},n=u.search(t,this._sections,function(e,t){var n=e.generatedLine-t.generatedOffset.generatedLine;return n?n:e.generatedColumn-t.generatedOffset.generatedColumn}),r=this._sections[n];return r?r.consumer.originalPositionFor({line:t.generatedLine-(r.generatedOffset.generatedLine-1),column:t.generatedColumn-(r.generatedOffset.generatedLine===t.generatedLine?r.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},a.prototype.hasContentsOfAllSources=function(){return this._sections.every(function(e){return e.consumer.hasContentsOfAllSources()})},a.prototype.sourceContentFor=function(e,t){
for(var n=0;n<this._sections.length;n++){var r=this._sections[n],o=r.consumer.sourceContentFor(e,!0);if(o)return o}if(t)return null;throw new Error('"'+e+'" is not in the SourceMap.')},a.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var n=this._sections[t];if(n.consumer.sources.indexOf(s.getArg(e,"source"))!==-1){var r=n.consumer.generatedPositionFor(e);if(r){var o={line:r.line+(n.generatedOffset.generatedLine-1),column:r.column+(n.generatedOffset.generatedLine===r.line?n.generatedOffset.generatedColumn-1:0)};return o}}}return{line:null,column:null}},a.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var n=0;n<this._sections.length;n++)for(var r=this._sections[n],o=r.consumer._generatedMappings,i=0;i<o.length;i++){var a=o[i],u=r.consumer._sources.at(a.source);null!==r.consumer.sourceRoot&&(u=s.join(r.consumer.sourceRoot,u)),this._sources.add(u),u=this._sources.indexOf(u);var c=r.consumer._names.at(a.name);this._names.add(c),c=this._names.indexOf(c);var l={source:u,generatedLine:a.generatedLine+(r.generatedOffset.generatedLine-1),generatedColumn:a.generatedColumn+(r.generatedOffset.generatedLine===a.generatedLine?r.generatedOffset.generatedColumn-1:0),originalLine:a.originalLine,originalColumn:a.originalColumn,name:c};this.__generatedMappings.push(l),"number"==typeof l.originalLine&&this.__originalMappings.push(l)}f(this.__generatedMappings,s.compareByGeneratedPositionsDeflated),f(this.__originalMappings,s.compareByOriginalPositions)},n.IndexedSourceMapConsumer=a},{"./array-set":5,"./base64-vlq":6,"./binary-search":8,"./quick-sort":9,"./util":11}],11:[function(e,t,n){function r(e,t,n){if(t in e)return e[t];if(3===arguments.length)return n;throw new Error('"'+t+'" is a required argument.')}function o(e){var t=e.match(v);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function i(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function a(e){var t=e,r=o(e);if(r){if(!r.path)return e;t=r.path}for(var a,s=n.isAbsolute(t),u=t.split(/\/+/),c=0,l=u.length-1;l>=0;l--)a=u[l],"."===a?u.splice(l,1):".."===a?c++:c>0&&(""===a?(u.splice(l+1,c),c=0):(u.splice(l,2),c--));return t=u.join("/"),""===t&&(t=s?"/":"."),r?(r.path=t,i(r)):t}function s(e,t){""===e&&(e="."),""===t&&(t=".");var n=o(t),r=o(e);if(r&&(e=r.path||"/"),n&&!n.scheme)return r&&(n.scheme=r.scheme),i(n);if(n||t.match(y))return t;if(r&&!r.host&&!r.path)return r.host=t,i(r);var s="/"===t.charAt(0)?t:a(e.replace(/\/+$/,"")+"/"+t);return r?(r.path=s,i(r)):s}function u(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");for(var n=0;0!==t.indexOf(e+"/");){var r=e.lastIndexOf("/");if(r<0)return t;if(e=e.slice(0,r),e.match(/^([^\/]+:\/)?\/*$/))return t;++n}return Array(n+1).join("../")+t.substr(e.length+1)}function c(e){return e}function l(e){return p(e)?"$"+e:e}function f(e){return p(e)?e.slice(1):e}function p(e){if(!e)return!1;var t=e.length;if(t<9)return!1;if(95!==e.charCodeAt(t-1)||95!==e.charCodeAt(t-2)||111!==e.charCodeAt(t-3)||116!==e.charCodeAt(t-4)||111!==e.charCodeAt(t-5)||114!==e.charCodeAt(t-6)||112!==e.charCodeAt(t-7)||95!==e.charCodeAt(t-8)||95!==e.charCodeAt(t-9))return!1;for(var n=t-10;n>=0;n--)if(36!==e.charCodeAt(n))return!1;return!0}function h(e,t,n){var r=e.source-t.source;return 0!==r?r:(r=e.originalLine-t.originalLine,0!==r?r:(r=e.originalColumn-t.originalColumn,0!==r||n?r:(r=e.generatedColumn-t.generatedColumn,0!==r?r:(r=e.generatedLine-t.generatedLine,0!==r?r:e.name-t.name))))}function g(e,t,n){var r=e.generatedLine-t.generatedLine;return 0!==r?r:(r=e.generatedColumn-t.generatedColumn,0!==r||n?r:(r=e.source-t.source,0!==r?r:(r=e.originalLine-t.originalLine,0!==r?r:(r=e.originalColumn-t.originalColumn,0!==r?r:e.name-t.name))))}function d(e,t){return e===t?0:e>t?1:-1}function m(e,t){var n=e.generatedLine-t.generatedLine;return 0!==n?n:(n=e.generatedColumn-t.generatedColumn,0!==n?n:(n=d(e.source,t.source),0!==n?n:(n=e.originalLine-t.originalLine,0!==n?n:(n=e.originalColumn-t.originalColumn,0!==n?n:d(e.name,t.name)))))}n.getArg=r;var v=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/,y=/^data:.+\,.+$/;n.urlParse=o,n.urlGenerate=i,n.normalize=a,n.join=s,n.isAbsolute=function(e){return"/"===e.charAt(0)||!!e.match(v)},n.relative=u;var _=function(){var e=Object.create(null);return!("__proto__"in e)}();n.toSetString=_?c:l,n.fromSetString=_?c:f,n.compareByOriginalPositions=h,n.compareByGeneratedPositionsDeflated=g,n.compareByGeneratedPositionsInflated=m},{}],12:[function(t,n,r){!function(o,i){"use strict";"function"==typeof e&&e.amd?e("stack-generator",["stackframe"],i):"object"==typeof r?n.exports=i(t("stackframe")):o.StackGenerator=i(o.StackFrame)}(this,function(e){return{backtrace:function(t){var n=[],r=10;"object"==typeof t&&"number"==typeof t.maxStackSize&&(r=t.maxStackSize);for(var o=arguments.callee;o&&n.length<r;){for(var i=new Array(o.arguments.length),a=0;a<i.length;++a)i[a]=o.arguments[a];/function(?:\s+([\w$]+))+\s*\(/.test(o.toString())?n.push(new e({functionName:RegExp.$1||void 0,args:i})):n.push(new e({args:i}));try{o=o.caller}catch(s){break}}return n}}})},{stackframe:13}],13:[function(t,n,r){!function(t,o){"use strict";"function"==typeof e&&e.amd?e("stackframe",[],o):"object"==typeof r?n.exports=o():t.StackFrame=o()}(this,function(){"use strict";function e(e){return!isNaN(parseFloat(e))&&isFinite(e)}function t(e){return e[0].toUpperCase()+e.substring(1)}function n(e){return function(){return this[e]}}function r(e){if(e instanceof Object)for(var n=o.concat(i.concat(a.concat(s))),r=0;r<n.length;r++)e.hasOwnProperty(n[r])&&void 0!==e[n[r]]&&this["set"+t(n[r])](e[n[r]])}var o=["isConstructor","isEval","isNative","isToplevel"],i=["columnNumber","lineNumber"],a=["fileName","functionName","source"],s=["args"];r.prototype={getArgs:function(){return this.args},setArgs:function(e){if("[object Array]"!==Object.prototype.toString.call(e))throw new TypeError("Args must be an Array");this.args=e},getEvalOrigin:function(){return this.evalOrigin},setEvalOrigin:function(e){if(e instanceof r)this.evalOrigin=e;else{if(!(e instanceof Object))throw new TypeError("Eval Origin must be an Object or StackFrame");this.evalOrigin=new r(e)}},toString:function(){var t=this.getFunctionName()||"{anonymous}",n="("+(this.getArgs()||[]).join(",")+")",r=this.getFileName()?"@"+this.getFileName():"",o=e(this.getLineNumber())?":"+this.getLineNumber():"",i=e(this.getColumnNumber())?":"+this.getColumnNumber():"";return t+n+r+o+i}};for(var u=0;u<o.length;u++)r.prototype["get"+t(o[u])]=n(o[u]),r.prototype["set"+t(o[u])]=function(e){return function(t){this[e]=Boolean(t)}}(o[u]);for(var c=0;c<i.length;c++)r.prototype["get"+t(i[c])]=n(i[c]),r.prototype["set"+t(i[c])]=function(t){return function(n){if(!e(n))throw new TypeError(t+" must be a Number");this[t]=Number(n)}}(i[c]);for(var l=0;l<a.length;l++)r.prototype["get"+t(a[l])]=n(a[l]),r.prototype["set"+t(a[l])]=function(e){return function(t){this[e]=String(t)}}(a[l]);return r})},{}],14:[function(t,n,r){!function(o,i){"use strict";"function"==typeof e&&e.amd?e("stacktrace-gps",["source-map","stackframe"],i):"object"==typeof r?n.exports=i(t("source-map/lib/source-map-consumer"),t("stackframe")):o.StackTraceGPS=i(o.SourceMap||o.sourceMap,o.StackFrame)}(this,function(e,t){"use strict";function n(e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("get",e),r.onerror=n,r.onreadystatechange=function(){4===r.readyState&&(r.status>=200&&r.status<300||"file://"===e.substr(0,7)&&r.responseText?t(r.responseText):n(new Error("HTTP status: "+r.status+" retrieving "+e)))},r.send()})}function r(e){if("undefined"!=typeof window&&window.atob)return window.atob(e);throw new Error("You must supply a polyfill for window.atob in this environment")}function o(e){if("undefined"!=typeof JSON&&JSON.parse)return JSON.parse(e);throw new Error("You must supply a polyfill for JSON.parse in this environment")}function i(e,t){for(var n=[/['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*function\b/,/function\s+([^('"`]*?)\s*\(([^)]*)\)/,/['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*(?:eval|new Function)\b/,/\b(?!(?:if|for|switch|while|with|catch)\b)(?:(?:static)\s+)?(\S+)\s*\(.*?\)\s*\{/,/['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*\(.*?\)\s*=>/],r=e.split("\n"),o="",i=Math.min(t,20),a=0;a<i;++a){var s=r[t-a-1],u=s.indexOf("//");if(u>=0&&(s=s.substr(0,u)),s){o=s+o;for(var c=n.length,l=0;l<c;l++){var f=n[l].exec(o);if(f&&f[1])return f[1]}}}}function a(){if("function"!=typeof Object.defineProperty||"function"!=typeof Object.create)throw new Error("Unable to consume source maps in older browsers")}function s(e){if("object"!=typeof e)throw new TypeError("Given StackFrame is not an object");if("string"!=typeof e.fileName)throw new TypeError("Given file name is not a String");if("number"!=typeof e.lineNumber||e.lineNumber%1!==0||e.lineNumber<1)throw new TypeError("Given line number must be a positive integer");if("number"!=typeof e.columnNumber||e.columnNumber%1!==0||e.columnNumber<0)throw new TypeError("Given column number must be a non-negative integer");return!0}function u(e){var t=/\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/m.exec(e);if(t&&t[1])return t[1];throw new Error("sourceMappingURL not found")}function c(e,n,r){return new Promise(function(o,i){var a=n.originalPositionFor({line:e.lineNumber,column:e.columnNumber});if(a.source){var s=n.sourceContentFor(a.source);s&&(r[a.source]=s),o(new t({functionName:a.name||e.functionName,args:e.args,fileName:a.source,lineNumber:a.line,columnNumber:a.column}))}else i(new Error("Could not get original source for given stackframe and source map"))})}return function l(f){return this instanceof l?(f=f||{},this.sourceCache=f.sourceCache||{},this.sourceMapConsumerCache=f.sourceMapConsumerCache||{},this.ajax=f.ajax||n,this._atob=f.atob||r,this._get=function(e){return new Promise(function(t,n){var r="data:"===e.substr(0,5);if(this.sourceCache[e])t(this.sourceCache[e]);else if(f.offline&&!r)n(new Error("Cannot make network requests in offline mode"));else if(r){var o=/^data:application\/json;([\w=:"-]+;)*base64,/,i=e.match(o);if(i){var a=i[0].length,s=e.substr(a),u=this._atob(s);this.sourceCache[e]=u,t(u)}else n(new Error("The encoding of the inline sourcemap is not supported"))}else{var c=this.ajax(e,{method:"get"});this.sourceCache[e]=c,c.then(t,n)}}.bind(this))},this._getSourceMapConsumer=function(t,n){return new Promise(function(r,i){if(this.sourceMapConsumerCache[t])r(this.sourceMapConsumerCache[t]);else{var a=new Promise(function(r,i){return this._get(t).then(function(t){"string"==typeof t&&(t=o(t.replace(/^\)\]\}'/,""))),"undefined"==typeof t.sourceRoot&&(t.sourceRoot=n),r(new e.SourceMapConsumer(t))},i)}.bind(this));this.sourceMapConsumerCache[t]=a,r(a)}}.bind(this))},this.pinpoint=function(e){return new Promise(function(t,n){this.getMappedLocation(e).then(function(e){function n(){t(e)}this.findFunctionName(e).then(t,n)["catch"](n)}.bind(this),n)}.bind(this))},this.findFunctionName=function(e){return new Promise(function(n,r){s(e),this._get(e.fileName).then(function(r){var o=e.lineNumber,a=e.columnNumber,s=i(r,o,a);n(s?new t({functionName:s,args:e.args,fileName:e.fileName,lineNumber:o,columnNumber:a}):e)},r)["catch"](r)}.bind(this))},void(this.getMappedLocation=function(e){return new Promise(function(t,n){a(),s(e);var r=this.sourceCache,o=e.fileName;this._get(o).then(function(n){var i=u(n),a="data:"===i.substr(0,5),s=o.substring(0,o.lastIndexOf("/")+1);return"/"===i[0]||a||/^https?:\/\/|^\/\//i.test(i)||(i=s+i),this._getSourceMapConsumer(i,s).then(function(n){return c(e,n,r).then(t)["catch"](function(){t(e)})})}.bind(this),n)["catch"](n)}.bind(this))})):new l(f)}})},{"source-map/lib/source-map-consumer":10,stackframe:13}],15:[function(e,t,n){Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),"undefined"==typeof Promise&&ES6Promise.polyfill(),Function.prototype.bind||(Function.prototype.bind=function(e){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var t=Array.prototype.slice.call(arguments,1),n=this,r=function(){},o=function(){return n.apply(this instanceof r&&e?this:e,t.concat(Array.prototype.slice.call(arguments)))};return r.prototype=this.prototype,o.prototype=new r,o}),Array.prototype.map||(Array.prototype.map=function(e,t){if(void 0===this||null===this)throw new TypeError("this is null or not defined");var n,r=Object(this),o=r.length>>>0;if("function"!=typeof e)throw new TypeError(e+" is not a function");arguments.length>1&&(n=t);for(var i=new Array(o),a=0;a<o;){var s,u;a in r&&(s=r[a],u=e.call(n,s,a,r),i[a]=u),a++}return i}),Array.prototype.filter||(Array.prototype.filter=function(e){if(void 0===this||null===this)throw new TypeError("this is null or not defined");var t=Object(this),n=t.length>>>0;if("function"!=typeof e)throw new TypeError(e+" is not a function");for(var r=[],o=arguments.length>=2?arguments[1]:void 0,i=0;i<n;i++)if(i in t){var a=t[i];e.call(o,a,i,t)&&r.push(a)}return r}),Array.prototype.forEach||(Array.prototype.forEach=function(e,t){var n,r;if(null===this||void 0===this)throw new TypeError(" this is null or not defined");var o=Object(this),i=o.length>>>0;if("function"!=typeof e)throw new TypeError(e+" is not a function");for(arguments.length>1&&(n=t),r=0;r<i;){var a;r in o&&(a=o[r],e.call(n,a,r,o)),r++}})},{}],16:[function(t,n,r){!function(o,i){"use strict";"function"==typeof e&&e.amd?e("stacktrace",["error-stack-parser","stack-generator","stacktrace-gps"],i):"object"==typeof r?n.exports=i(t("error-stack-parser"),t("stack-generator"),t("stacktrace-gps")):o.StackTrace=i(o.ErrorStackParser,o.StackGenerator,o.StackTraceGPS)}(this,function(e,t,n){function r(e,t){var n={};return[e,t].forEach(function(e){for(var t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n}),n}function o(e){return e.stack||e["opera#sourceloc"]}function i(e,t){return"function"==typeof t?e.filter(t):e}var a={filter:function(e){return(e.functionName||"").indexOf("StackTrace$$")===-1&&(e.functionName||"").indexOf("ErrorStackParser$$")===-1&&(e.functionName||"").indexOf("StackTraceGPS$$")===-1&&(e.functionName||"").indexOf("StackGenerator$$")===-1},sourceCache:{}},s=function(){try{throw new Error}catch(e){return e}};return{get:function(e){var t=s();return o(t)?this.fromError(t,e):this.generateArtificially(e)},getSync:function(n){n=r(a,n);var u=s(),c=o(u)?e.parse(u):t.backtrace(n);return i(c,n.filter)},fromError:function(t,o){o=r(a,o);var s=new n(o);return new Promise(function(n){var r=i(e.parse(t),o.filter);n(Promise.all(r.map(function(e){return new Promise(function(t){function n(){t(e)}s.pinpoint(e).then(t,n)["catch"](n)})})))}.bind(this))},generateArtificially:function(e){e=r(a,e);var n=t.backtrace(e);return"function"==typeof e.filter&&(n=n.filter(e.filter)),Promise.resolve(n)},instrument:function(e,t,n,r){if("function"!=typeof e)throw new Error("Cannot instrument non-function object");if("function"==typeof e.__stacktraceOriginalFn)return e;var i=function(){try{return this.get().then(t,n)["catch"](n),e.apply(r||this,arguments)}catch(i){throw o(i)&&this.fromError(i).then(t,n)["catch"](n),i}}.bind(this);return i.__stacktraceOriginalFn=e,i},deinstrument:function(e){if("function"!=typeof e)throw new Error("Cannot de-instrument non-function object");return"function"==typeof e.__stacktraceOriginalFn?e.__stacktraceOriginalFn:e},report:function(e,t,n,r){return new Promise(function(o,i){var a=new XMLHttpRequest;if(a.onerror=i,a.onreadystatechange=function(){4===a.readyState&&(a.status>=200&&a.status<400?o(a.responseText):i(new Error("POST to "+t+" failed with status: "+a.status)))},a.open("post",t),a.setRequestHeader("Content-Type","application/json"),r&&"object"==typeof r.headers){var s=r.headers;for(var u in s)s.hasOwnProperty(u)&&a.setRequestHeader(u,s[u])}var c={stack:e};void 0!==n&&null!==n&&(c.message=n),a.send(JSON.stringify(c))})}}})},{"error-stack-parser":1,"stack-generator":12,"stacktrace-gps":14}]},{},[2,3,15,16])(16)}),function(e){"use strict";var t="https://clouderrorreporting.googleapis.com/v1beta1/projects/",n=function(){};e.StackdriverErrorReporter=n,n.prototype.start=function(e){if(!e.key&&!e.targetUrl)throw new Error("Cannot initialize: No API key or target url provided.");if(!e.projectId&&!e.targetUrl)throw new Error("Cannot initialize: No project ID or target url provided.");if("undefined"==typeof StackTrace)throw new Error("make sure you loaded “dist/stackdriver-errors-concat.js” or “dist/stackdriver-errors-concat.min.js”, or that you imported the “stacktrace-js” module");this.apiKey=e.key,this.projectId=e.projectId,this.targetUrl=e.targetUrl,this.context=e.context||{},this.serviceContext={service:e.service||"web"},e.version&&(this.serviceContext.version=e.version),this.reportUncaughtExceptions=e.reportUncaughtExceptions!==!1,this.disabled=e.disabled||!1;var t=this;if(this.reportUncaughtExceptions){var n=window.onerror||function(){};window.onerror=function(e,r,o,i,a){return a&&t.report(a),n(e,r,o,i,a),!0}}},n.prototype.report=function(e,t){if(this.disabled)return"function"==typeof t&&t();if(!e)return"function"==typeof t&&t("no error to report");var n={};n.serviceContext=this.serviceContext,n.context=this.context,n.context.httpRequest={userAgent:window.navigator.userAgent,url:window.location.href};var r=0;if("string"==typeof e||e instanceof String){try{throw new Error(e)}catch(o){e=o}r=1}var i=this;StackTrace.fromError(e).then(function(o){n.message=e.toString();for(var a=r;a<o.length;a++)n.message+="\n",n.message+=["    at ",o[a].getFunctionName()||"<anonymous>"," (",o[a].getFileName(),":",o[a].getLineNumber(),":",o[a].getColumnNumber(),")"].join("");i.sendErrorPayload(n,t)},function(r){n.message=["Error extracting stack trace: ",r,"\n",e.toString(),"\n","    (",e.file,":",e.line,":",e.column,")"].join(""),i.sendErrorPayload(n,t)})},n.prototype.sendErrorPayload=function(e,n){var r=t+this.projectId+"/events:report?key="+this.apiKey,o=this.targetUrl||r,i=new XMLHttpRequest;i.open("POST",o,!0),i.setRequestHeader("Content-Type","application/json; charset=UTF-8"),i.onloadend=function(){return"function"==typeof n&&n()},i.onerror=function(e){return"function"==typeof n&&n(e)},i.send(JSON.stringify(e))},n.prototype.setUser=function(e){this.context.user=e}}(this);
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3N0ZGluIiwiY2xhc3NraWNrLnNjc3MiLCJja2ljb24uc2NzcyIsIl92YXJpYWJsZXMuc2NzcyIsIl9taXhpbnMuc2NzcyIsImNvbXBvbmVudHMvYWRkLXByby1zdHVkZW50cy1kaWFsb2cvYWRkLXByby1zdHVkZW50cy1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvYWRkLWFub24tc3R1ZGVudC1kaWFsb2cvYWRkLWFub24tc3R1ZGVudC1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvYXNzaWdubWVudC1leHBvcnQtZGlhbG9nL2Fzc2lnbm1lbnQtZXhwb3J0LWRpYWxvZy5zY3NzIiwiY29tcG9uZW50cy9hc3NpZ25tZW50LXF1ZXN0aW9uL2Fzc2lnbm1lbnQtcXVlc3Rpb24uc2NzcyIsImNvbXBvbmVudHMvYXNzaWdubWVudC1zZWxlY3Rpb24tZGlhbG9nL2Fzc2lnbm1lbnQtc2VsZWN0aW9uLWRpYWxvZy5zY3NzIiwiY29tcG9uZW50cy9hc3NpZ25tZW50LXNoZWV0L2Fzc2lnbm1lbnQtc2hlZXQuc2NzcyIsImNvbXBvbmVudHMvYXNzaWdubWVudC10b29sYmFyL2Fzc2lnbm1lbnQtdG9vbGJhci5zY3NzIiwiY29tcG9uZW50cy9hc3NpZ25tZW50LXRvb2xiYXIvdG9vbGJhci1jb2xvci1tZW51LmNvbXBvbmVudC5zY3NzIiwiY29tcG9uZW50cy9hdWRpby1jYXB0dXJlLWRpcmVjdGl2ZS9hdWRpby1jYXB0dXJlLnNjc3MiLCJjb21wb25lbnRzL2NoYXQtbWVzc2FnZS9jaGF0LW1lc3NhZ2UuY29tcG9uZW50LnNjc3MiLCJjb21wb25lbnRzL2NrLWRpYWxvZy9jay1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvY29sb3ItbWVudS9jb2xvci1tZW51LnNjc3MiLCJjb21wb25lbnRzL2NvbmZpcm0tZGlhbG9nL2NvbmZpcm0tZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL2NvbnRyYWN0LXVzZXItcmVzZXQtcGFzc3dvcmQtZGlhbG9nL2NvbnRyYWN0LXVzZXItcmVzZXQtcGFzc3dvcmQtZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL2Vycm9yLWRpYWxvZy9lcnJvci1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvY3JlYXRlLWNvbnRyYWN0LXN0dWRlbnRzLWRpYWxvZy9jcmVhdGUtY29udHJhY3Qtc3R1ZGVudHMtZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL2ZlZWRiYWNrLWluYm94L2ZlZWRiYWNrLWluYm94LmNvbXBvbmVudC5zY3NzIiwiY29tcG9uZW50cy9mZWVkYmFjay1kaWFsb2cvZmVlZGJhY2stZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL2ZvbGRlci1uYW1lLWRpYWxvZy9mb2xkZXItbmFtZS1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvZ3JhZGUtaW5wdXQvZ3JhZGUtaW5wdXQuc2NzcyIsImNvbXBvbmVudHMvaGVscC1hc3NpZ25tZW50cy1saXN0LWRpYWxvZy9oZWxwLWFzc2lnbm1lbnRzLWxpc3QtZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL2hlbHAtY2VudGVyL2hlbHAtY2VudGVyLmNvbXBvbmVudC5zY3NzIiwiY29tcG9uZW50cy9oZWxwLXJlc291cmNlcy1kaWFsb2cvaGVscC1yZXNvdXJjZXMtZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL2hlbHAtaW5ib3gvaGVscC1pbmJveC5zY3NzIiwiY29tcG9uZW50cy9oZWxwLXJlcXVlc3QtaW5kaWNhdG9yL2hlbHAtcmVxdWVzdC1pbmRpY2F0b3Iuc2NzcyIsImNvbXBvbmVudHMvaGVscC1yb3N0ZXJzLWxpc3QtZGlhbG9nL2hlbHAtcm9zdGVycy1saXN0LWRpYWxvZy5zY3NzIiwiY29tcG9uZW50cy9oZWxwLXNlc3Npb24td2F0Y2gtZGlhbG9nL2hlbHAtc2Vzc2lvbi13YXRjaC1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvaW1hZ2UtY3JvcHBlci9pbWFnZS1jcm9wcGVyLnNjc3MiLCJjb21wb25lbnRzL2ltYWdlLXBpY2tlci1kaWFsb2cvaW1hZ2UtcGlja2VyLWRpYWxvZy5zY3NzIiwiY29tcG9uZW50cy9pbXBvcnQtaW1hZ2UtZGlhbG9nL2ltcG9ydC1pbWFnZS1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvaW1wb3J0LWdvb2dsZS1yb3N0ZXJzLWRpYWxvZy9pbXBvcnQtZ29vZ2xlLXJvc3RlcnMtZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL2ludml0ZS10ZWFjaGVyLWRpYWxvZy9pbnZpdGUtdGVhY2hlci1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvbGluay1kaWFsb2cvbGluay1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvbG9hZGluZy1kaWFsb2cvbG9hZGluZy1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvbW92ZS1hc3NpZ25tZW50LWRpYWxvZy9tb3ZlLWFzc2lnbm1lbnQtZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL25ldy1zZXNzaW9uLWRpYWxvZy9uZXctc2Vzc2lvbi1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvcHJvLWluZm8tZGlhbG9nL3Byby1pbmZvLWRpYWxvZy5zY3NzIiwiY29tcG9uZW50cy9wcm8td2VsY29tZS1kaWFsb2cvcHJvLXdlbGNvbWUtZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL3Jvc3Rlci1sb2NrLWRpYWxvZy9yb3N0ZXItbG9jay1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvcmVmcmVzaC1hdXRoLWRpYWxvZy9yZWZyZXNoLWF1dGgtZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL3NhdmluZy1pbmRpY2F0b3Ivc2F2aW5nLWluZGljYXRvci5zY3NzIiwiY29tcG9uZW50cy9zaGFyZS1kaWFsb2cvc2hhcmUtZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL3NoYXJlLXdpdGgtc3R1ZGVudC1kaWFsb2cvc2hhcmUtd2l0aC1zdHVkZW50LWRpYWxvZy5zY3NzIiwiY29tcG9uZW50cy9zbmFja2Jhci9zbmFja2Jhci5zY3NzIiwiY29tcG9uZW50cy9zaWdudXAtZGlhbG9nL3NpZ251cC1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvc3Bpbm5lci1kaWFsb2cvc3Bpbm5lci1kaWFsb2cuc2NzcyIsImNvbXBvbmVudHMvc3R1ZGVudC1jb2RlLWRpYWxvZy9zdHVkZW50LWNvZGUtZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL3RlYWNoZXItZmVlZGJhY2stZGlhbG9nL3RlYWNoZXItZmVlZGJhY2stZGlhbG9nLnNjc3MiLCJjb21wb25lbnRzL3Rvb2xiYXItbWVudS90b29sYmFyLW1lbnUuc2NzcyIsImNvbXBvbmVudHMvdXNlci1ub3RpZmljYXRpb24tZGlhbG9nL3VzZXItbm90aWZpY2F0aW9uLWRpYWxvZy5zY3NzIiwiY29udHJvbGxlcnMvYWNjb3VudC9hY2NvdW50LnNjc3MiLCJjb250cm9sbGVycy9hY2NvdW50LWxvZ2luL2FjY291bnQtbG9naW4uc2NzcyIsImNvbnRyb2xsZXJzL2Fub24tc3R1ZGVudC1hc3NpZ25tZW50LW92ZXJ2aWV3L2Fub24tc3R1ZGVudC1hc3NpZ25tZW50LW92ZXJ2aWV3LnNjc3MiLCJjb250cm9sbGVycy9hZG1pbi9hZG1pbi5zY3NzIiwiY29udHJvbGxlcnMvYW5vbi1zdHVkZW50LWFzc2lnbm1lbnQtd29yay9hbm9uLXN0dWRlbnQtYXNzaWdubWVudC13b3JrLnNjc3MiLCJjb250cm9sbGVycy9hc3NpZ25tZW50LWVkaXQtcXVlc3Rpb24vYXNzaWdubWVudC1lZGl0LXF1ZXN0aW9uLnNjc3MiLCJjb250cm9sbGVycy9hc3NpZ25tZW50LWVkaXQvYXNzaWdubWVudC1lZGl0LnNjc3MiLCJjb250cm9sbGVycy9hc3NpZ25tZW50LXRlYWNoZXItZmVlZGJhY2svYXNzaWdubWVudC10ZWFjaGVyLWZlZWRiYWNrLnNjc3MiLCJjb250cm9sbGVycy9jb250cmFjdC11c2VyLWVkaXQvY29udHJhY3QtdXNlci1lZGl0LnNjc3MiLCJjb250cm9sbGVycy9hc3NpZ25tZW50cy1saXN0L2Fzc2lnbm1lbnRzLWxpc3Quc2NzcyIsImNvbnRyb2xsZXJzL2NvbnRyYWN0LXVzZXJzLWxpc3QvY29udHJhY3QtdXNlcnMtbGlzdC5zY3NzIiwiY29udHJvbGxlcnMvZm9yZ290LXBhc3N3b3JkL2ZvcmdvdC1wYXNzd29yZC5zY3NzIiwiY29udHJvbGxlcnMvZXJyb3IvZXJyb3Iuc2NzcyIsImNvbnRyb2xsZXJzL2xvZ2luL2xvZ2luLnNjc3MiLCJjb250cm9sbGVycy9wYXNzd29yZC1yZXNldC9wYXNzd29yZC1yZXNldC5zY3NzIiwiY29udHJvbGxlcnMvbmF2L25hdi5zY3NzIiwiY29udHJvbGxlcnMvcGF5bWVudC9wYXltZW50LnNjc3MiLCJjb250cm9sbGVycy9wYXltZW50LXN1Y2Nlc3MvcGF5bWVudC1zdWNjZXNzLnNjc3MiLCJjb250cm9sbGVycy9wdWJsaWMtYXNzaWdubWVudC1xdWVzdGlvbi9wdWJsaWMtYXNzaWdubWVudC1xdWVzdGlvbi5zY3NzIiwiY29udHJvbGxlcnMvcHVibGljLWFzc2lnbm1lbnQvcHVibGljLWFzc2lnbm1lbnQuc2NzcyIsImNvbnRyb2xsZXJzL3B1YmxpYy1hc3NpZ25tZW50cy1saXN0L3B1YmxpYy1hc3NpZ25tZW50cy1saXN0LnNjc3MiLCJjb250cm9sbGVycy9yb290L3Jvb3Quc2NzcyIsImNvbnRyb2xsZXJzL3Jvc3Rlci1lZGl0L3Jvc3Rlci1lZGl0LnNjc3MiLCJjb250cm9sbGVycy9yb3N0ZXJzLWxpc3Qvcm9zdGVycy1saXN0LnNjc3MiLCJjb250cm9sbGVycy9zZXNzaW9uLXdhdGNoL3Nlc3Npb24td2F0Y2guc2NzcyIsImNvbnRyb2xsZXJzL3Nlc3Npb24td29yay9zZXNzaW9uLXdvcmsuc2NzcyIsImNvbnRyb2xsZXJzL3NpZ251cC1jaG9pY2Uvc2lnbnVwLWNob2ljZS5zY3NzIiwiY29udHJvbGxlcnMvc2lnbnVwL3NpZ251cC5zY3NzIiwiY29udHJvbGxlcnMvc2lnbnVwLW5hbWUvc2lnbnVwLW5hbWUuc2NzcyIsImNvbnRyb2xsZXJzL3NpZ251cC1wcm8taW52aXRlL3NpZ251cC1wcm8taW52aXRlLnNjc3MiLCJjb250cm9sbGVycy9zaWdudXAtc2Nob29sL3NpZ251cC1zY2hvb2wuc2NzcyIsImNvbnRyb2xsZXJzL3N0dWRlbnQtYWNjb3VudC1hc3NpZ25tZW50LW92ZXJ2aWV3L3N0dWRlbnQtYWNjb3VudC1hc3NpZ25tZW50LW92ZXJ2aWV3LnNjc3MiLCJjb250cm9sbGVycy9zdHVkZW50LWFjY291bnQtYXNzaWdubWVudC1mZWVkYmFjay9zdHVkZW50LWFjY291bnQtYXNzaWdubWVudC1mZWVkYmFjay5zY3NzIiwiY29udHJvbGxlcnMvdXNlci1ub3RpZmljYXRpb25zLWxpc3QvdXNlci1ub3RpZmljYXRpb25zLWxpc3Quc2NzcyIsImNvbnRyb2xsZXJzL3N0dWRlbnQtYWNjb3VudC1hc3NpZ25tZW50LXdvcmsvc3R1ZGVudC1hY2NvdW50LWFzc2lnbm1lbnQtd29yay5zY3NzIiwiY29udHJvbGxlcnMvc3R1ZGVudC1hc3NpZ25tZW50cy1saXN0L3N0dWRlbnQtYXNzaWdubWVudHMtbGlzdC5zY3NzIiwiY29udHJvbGxlcnMvdXNlci1wcm9maWxlL3VzZXItcHJvZmlsZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUtIOzs7R0FHRztBQ1hILGtFQUFZO0FBQ1osaUVBQVk7QUNEWjtFQUNFLHNCQUFzQjtFQUN0Qiw4Q0FBVztFQUNYLHNRQUc4RDtFQUM5RCxvQkFBb0I7RUFDcEIsbUJBQW1CLEVBQUE7O0FBR3BCO0VBQ0csZ0ZBQWdGO0VBQ2hGLGlDQUFpQztFQUNqQyxZQUFZO0VBQ1osbUJBQW1CO0VBQ25CLG9CQUFvQjtFQUNwQixxQkFBcUI7RUFDckIscUJBQXFCO0VBQ3JCLGVBQWU7RUFFZix1Q0FBdUM7RUFDdkMsb0NBQW9DO0VBQ3BDLG1DQUFtQyxFQUN0Qzs7QUFFRDs7Ozs7SUFLSTtBQUVLO0VBQ1AsaUJBQWlCLEVBQ2xCOztBQUNEO0VBQ0UsaUJBQWlCLEVBQ2xCOztBQUNhO0VBQ1osaUJBQWlCLEVBQ2xCOztBQUN3QjtFQUN2QixpQkFBaUIsRUFDbEI7O0FBQ0Q7RUFDRSxpQkFBaUIsRUFDbEI7O0FBQ0Q7RUFDRSxpQkFBaUIsRUFDbEI7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Q25CLGFBQWEsRUFLZDtJQUhDO01BQ0UsYUFBYSxFQUNkO0VBR0g7SUFDRSw4QnhGWGtCO0l3RllsQix3QkFBd0IsRUFDekI7RUFFRDtJQUNFLGlCQUFpQixFQUNsQjtFQUVEO0lBQ0UsYUFBYSxFQStDZDtJQTFFSDtNQWlDTSx1QkFBdUI7TUFRdkIsZUFBZTtNQUNmLGdCQUFnQjtNQUNoQixZQUFZO01BQ1osZ0JBQWdCLEVBTWpCO01BbERMO1FBc0NRLHVCQUF1QixFQUN4QjtNQXZDUDtRQStDVSxrQkFBa0IsRUFDbkI7SUFoRFQ7TUFxRE0sZUFBZTtNQUNmLGNBQWMsRUFDZjtJQXZETDtNQTBETSxlQUFlO01BQ2YsY0FBYztNQUNkLGdCQUFnQixFQUNqQjtJQTdETDtNQWlFTSxpQkFBaUIsRUFRbEI7TUF6RUw7UUFvRVEsVUFBVSxFQUNYO01BckVQO1FBdUVRLGdCQUFnQixFQUNqQiIsImZpbGUiOiJpbmRleC5jc3MiLCJzb3VyY2VzQ29udGVudCI6W251bGwsIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1WYXJlbGErUm91bmQpO1xuQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJhbGV3YXk6MTAwKTtcblxuQGltcG9ydCBcInZhcmlhYmxlc1wiO1xuQGltcG9ydCBcIm1peGluc1wiO1xuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IEdvdGhhbVJvdW5kZWRNZWRpdW07XG4gIHNyYzogdXJsKCcuLi9hc3NldHMvZm9udHMvR290aGFtUm5kLU1lZGl1bS5vdGYnKTtcbn1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBHb3RoYW1Sb3VuZGVkQm9vaztcbiAgc3JjOiB1cmwoJy4uL2Fzc2V0cy9mb250cy9Hb3RoYW1SbmQtQm9vay5vdGYnKTtcbn1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBHb3RoYW1Sb3VuZGVkTGlnaHRJdGFsaWM7XG4gIHNyYzogdXJsKCcuLi9hc3NldHMvZm9udHMvR290aGFtUm5kLUxpZ2h0SXRhbC5vdGYnKTtcbn1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBHb3RoYW1Sb3VuZGVkQm9sZDtcbiAgc3JjOiB1cmwoJy4uL2Fzc2V0cy9mb250cy9Hb3RoYW1SbmQtQm9sZC5vdGYnKTtcbn1cblxuYm9keSB7XG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuYm9keSwgLm5vcm1hbC10ZXh0IHtcbiAgY29sb3I6ICRjbGFzc2tpY2tXZWJCbGFjaztcbiAgZm9udC1mYW1pbHk6ICRmb250Um91bmRlZEJvb2s7XG4gIGZvbnQtc2l6ZTogMTFwdDtcbiAgbGluZS1oZWlnaHQ6IDE4cHQ7XG59XG5cbi53aGl0ZSB7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxuLmNrLWdyZWVuLCAuY2stcHJpbWFyeSB7XG4gIGNvbG9yOiAkY2xhc3NraWNrV2ViR3JlZW47XG59XG5cbi5jay15ZWxsb3cge1xuICBjb2xvcjogJGNrWWVsbG93O1xufVxuXG4uY2staWNvbi1ncmV5IHtcbiAgY29sb3I6ICRja0hlYWRlckdyZXk7XG59XG5cbi5jay1kaXNhYmxlZC1ncmV5IHtcbiAgY29sb3I6ICRkaXNhYmxlZEdyZXk7XG59XG5cbi5jay13YXJuIHtcbiAgY29sb3I6ICRjbGFzc2tpY2tXZWJXYXJuO1xufVxuXG4uZ3JlZW4tYmFja2dyb3VuZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICRjbGFzc2tpY2tXZWJHcmVlbjtcbn1cblxuLmRpYWxvZy1jbG9zZSB7XG4gIG1hcmdpbi10b3A6IDZweCAhaW1wb3J0YW50O1xufVxuXG4uaGlkZGVuIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmZ1bGwtd2lkdGgge1xuICBtaW4td2lkdGg6IDEwMCU7XG4gIG1hcmdpbi1sZWZ0OiAwO1xuICBtYXJnaW4tcmlnaHQ6IDA7XG59XG5cbi5mdWxsLWhlaWdodCB7XG4gIGhlaWdodDogMTAwJTtcbiAgbWFyZ2luLXRvcDogMDtcbiAgbWFyZ2luLXJpZ2h0OiAwO1xufVxuXG4uZnVsbC1zY3JlZW4ge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW46IDA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4udXBwZXJjYXNlIHtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cblxuLmhvcml6b250YWwtY2VudGVyIHtcbiAgbWFyZ2luOiBhdXRvIDA7XG59XG5cbi52ZXJ0aWNhbC1jZW50ZXIge1xuICBAaW5jbHVkZSB2ZXJ0aWNhbC1hbGlnbigpO1xufVxuXG4udmVydGljYWwtYWxpZ24tcGFyZW50IHtcbiAgQGluY2x1ZGUgdmVydGljYWwtYWxpZ24tcGFyZW50KCk7XG59XG5cbi52ZXJ0aWNhbC1zY3JvbGwtY29udGFpbmVyIHtcbiAgaGVpZ2h0OiAxMDB2aDtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qIEJyYW5kIEd1aWRlbGluZXMgKi9cblxuLnByaW1hcnktbmF2IHtcbiAgY29sb3I6ICRjbGFzc2tpY2tXZWJCbGFjaztcbiAgZm9udC1zaXplOiAxMHB0O1xuICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkTWVkaXVtO1xuICBsZXR0ZXItc3BhY2luZzogJGxldHRlclNwYWNpbmdMaWdodDtcbn1cblxuLnNlY29uZGFyeS1uYXYge1xuICBjb2xvcjogJGxpbmtHcmV5O1xuICBmb250LXNpemU6IDEzcHQ7XG4gIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRNZWRpdW07XG4gIGxldHRlci1zcGFjaW5nOiAkbGV0dGVyU3BhY2luZ0xpZ2h0O1xufVxuXG5oMSwgLm1ham9yLWhlYWRlciB7XG4gIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICBmb250LXNpemU6IDI3cHQ7XG4gIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRNZWRpdW07XG4gIGxpbmUtaGVpZ2h0OiAxLjI2ZW07XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG59XG5cbmgyLCAubWlub3ItaGVhZGVyIHtcbiAgY29sb3I6ICRjbGFzc2tpY2tXZWJCbGFjaztcbiAgZm9udC1zaXplOiAyMHB0O1xuICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkQm9vaztcbiAgbGluZS1oZWlnaHQ6IDEuMjZlbTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cblxuaDMsIC5jbGFzc2tpY2staGVhZGVyIHtcbiAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gIGZvbnQtc2l6ZTogMTRwdDtcbiAgZm9udC1mYW1pbHk6ICRmb250Um91bmRlZE1lZGl1bTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cblxuaDQsIC5zZWN0aW9uLWhlYWRlciB7XG4gIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICBmb250LXNpemU6IDEycHQ7XG4gIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRNZWRpdW07XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG59XG5cbi5jYWxsLW91dCB7XG4gIGNvbG9yOiAkY2xhc3NraWNrV2ViQmxhY2s7XG4gIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICBmb250LXNpemU6IDE1cHQ7XG4gIGxldHRlci1zcGFjaW5nOiAkbGV0dGVyU3BhY2luZ0xpZ2h0O1xuICBsaW5lLWhlaWdodDogMzBwdDtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5cbmEge1xuICBjb2xvcjogJGNrR3JlZW47XG4gIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRNZWRpdW07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuXG4gICY6aG92ZXIge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG59XG5cbi5jbGFzc2tpY2stbGluayB7XG4gIGNvbG9yOiAkbGlua0dyZXk7XG4gIGZvbnQtc2l6ZTogMTFwdDtcbiAgZm9udC1mYW1pbHk6ICRmb250Um91bmRlZE1lZGl1bTtcbiAgbGV0dGVyLXNwYWNpbmc6ICRsZXR0ZXJTcGFjaW5nTGlnaHQ7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblxuICAmOmhvdmVyIHtcbiAgICBvcGFjaXR5OiAwLjU7XG4gIH1cbn1cblxuLmNhbGwtdG8tYWN0aW9uLWxpbmsge1xuICBjb2xvcjogJGNsYXNza2lja1dlYkdyZWVuO1xuICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkTWVkaXVtO1xuICBmb250LXNpemU6IDEwcHQ7XG4gIGxldHRlci1zcGFjaW5nOiAkbGV0dGVyU3BhY2luZ0xpZ2h0O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuXG4ubGlua2VkLWJvZHktdGl0bGUge1xuICBjb2xvcjogJGxpbmtHcmV5O1xuICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkTWVkaXVtO1xuICBmb250LXNpemU6IDExcHQ7XG4gIGxldHRlci1zcGFjaW5nOiAkbGV0dGVyU3BhY2luZ0xpZ2h0O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuXG4uYm9keS1zdWJ0ZXh0IHtcbiAgY29sb3I6ICRjbGFzc2tpY2tXZWJCbGFjaztcbiAgZm9udC1mYW1pbHk6ICRmb250Um91bmRlZEJvb2s7XG4gIGZvbnQtc2l6ZTogMTBwdDtcbiAgbGV0dGVyLXNwYWNpbmc6ICRsZXR0ZXJTcGFjaW5nTGlnaHQ7XG4gIGxpbmUtaGVpZ2h0OiAxLjVlbTtcbn1cblxuLmNoYXQtbWVzc2FnZS10ZXh0IHtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkQm9vaztcbiAgbGluZS1oZWlnaHQ6IDEzcHg7XG59XG5cbi50cnVuY2F0ZSB7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xufVxuXG4ucHJvLWluZGljYXRvci10ZXh0IHtcbiAgY29sb3I6ICRja1Bybztcbn1cblxuLypcbiAqIE1hdGVyaWFsIERlc2lnbiBza2luc1xuICovXG5cbi5tZC1idXR0b24ge1xuICBib3JkZXItcmFkaXVzOiAyZW07XG4gIHBhZGRpbmc6IC4yZW0gMWVtO1xuICBmb250LWZhbWlseTogR290aGFtUm91bmRlZE1lZGl1bTtcbiAgY29sb3I6ICRja0dyZWVuO1xuXG4gIC5tZC1yaXBwbGUtY29udGFpbmVyIHtcbiAgICBib3JkZXItcmFkaXVzOiAyZW07XG4gIH1cbn1cblxuLm1kLWJ1dHRvbi53aGl0ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xufVxuXG4ubWQtYnV0dG9uLndoaXRlOm5vdChbZGlzYWJsZWRdKTpob3ZlciwgLm1kLWJ1dHRvbi53aGl0ZTphY3RpdmUsIC5tZC1idXR0b24ud2hpdGU6bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkYWN0aXZlV2hpdGU7XG59XG5cbi5tZC1idXR0b24ud2hpdGU6ZGlzYWJsZWQge1xuICBjb2xvcjogJGRpc2FibGVkR3JleTtcbn1cblxuLyoqIFN0eWxlcyBmb3IgcHJpbWFyeSBhbmQgc2Vjb25kYXJ5IGJ1dHRvbnMgKiovXG4ubWQtYnV0dG9uLmNrLXByaW1hcnkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2xhc3NraWNrV2ViR3JlZW47XG4gIGNvbG9yOiB3aGl0ZTtcbiAgcGFkZGluZzogLjJlbSAyZW07XG59XG5cbi5tZC1idXR0b24uY2stcHJpbWFyeTpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24uY2stcHJpbWFyeTphY3RpdmUsIC5tZC1idXR0b24uY2stcHJpbWFyeTpub3QoW2Rpc2FibGVkXSkubWQtZm9jdXNlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICRja0dyZWVuSG92ZXI7XG59XG5cbi5tZC1idXR0b24uY2stcHJpbWFyeTpkaXNhYmxlZCB7XG4gIGNvbG9yOiAkbGlnaHRUZXh0O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGlzYWJsZWRHcmV5O1xufVxuXG4ubWQtYnV0dG9uLmNrLXNlY29uZGFyeSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICRja0hlYWRlckdyZXk7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgcGFkZGluZzogLjJlbSAyZW07XG59XG5cbi5tZC1idXR0b24uY2stc2Vjb25kYXJ5Om5vdChbZGlzYWJsZWRdKTpob3ZlciwgLm1kLWJ1dHRvbi5jay1zZWNvbmRhcnk6YWN0aXZlLCAubWQtYnV0dG9uLmNrLXNlY29uZGFyeTpub3QoW2Rpc2FibGVkXSkubWQtZm9jdXNlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICRhY3RpdmVXaGl0ZTtcbn1cblxuLm1kLWJ1dHRvbi5jay1zZWNvbmRhcnk6ZGlzYWJsZWQge1xuICBib3JkZXI6IDFweCBzb2xpZCAkZGlzYWJsZWRHcmV5O1xuICBjb2xvcjogJGRpc2FibGVkR3JleTtcbn1cblxuLm1kLWJ1dHRvbi5zcXVhcmUge1xuICBib3JkZXItcmFkaXVzOiAwO1xuXG4gIC5tZC1yaXBwbGUtY29udGFpbmVyIHtcbiAgICBib3JkZXItcmFkaXVzOiAwO1xuICB9XG59XG5cbi5jay1yb3VuZC1idXR0b24uY2stc2Vjb25kYXJ5IHtcbiAgaGVpZ2h0OiAyLjVlbTtcbiAgd2lkdGg6IDIuNWVtO1xuICBtaW4td2lkdGg6IDIuNWVtO1xuICBtaW4taGVpZ2h0OiAyLjVlbTtcbiAgbGluZS1oZWlnaHQ6IDIuNWVtO1xuICBtYXJnaW46IC4zZW07XG4gIHBhZGRpbmc6IDA7XG4gIGZvbnQtc2l6ZTogMS4yZW07XG59XG5cbi8qXG4gKiBBbmNob3JzXG4gKi9cbmEge1xuICBmb250LXN0eWxlOiBpbmhlcml0O1xuICBsZXR0ZXItc3BhY2luZzogMC4wMTBlbTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cblxuLndoaXRlLWFuY2hvciB7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxuLmFuY2hvci1idXR0b24ge1xuICBsaW5lLWhlaWdodDogMzZweDtcbiAgcGFkZGluZzogMCAxNHB4O1xuICBtYXJnaW46IDZweCA4cHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbn1cblxubWQtY29udGVudCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG5tZC10YWJzIG1kLWluay1iYXIge1xuICBjb2xvcjogJGNrR3JlZW47XG4gIGJhY2tncm91bmQtY29sb3I6ICRja0dyZWVuO1xufVxuXG5tZC1saXN0IHtcbiAgbWQtbGlzdC1pdGVtIC5tZC1idXR0b24ge1xuICAgIGZvbnQtZmFtaWx5OiBHb3RoYW1Sb3VuZGVkQm9vaztcbiAgfVxufVxuXG5tZC1pbnB1dC1jb250YWluZXIge1xuICBtYXJnaW46IDEuNWVtIDAgMCAwO1xuXG4gIC5tZC1pbnB1dCxcbiAgLm1kLWlucHV0Lm5nLWludmFsaWQubmctZGlydHksXG4gIG1kLXNlbGVjdCAubWQtc2VsZWN0LXZhbHVlLFxuICBtZC1zZWxlY3QgLm1kLXNlbGVjdC12YWx1ZS5tZC1zZWxlY3QtcGxhY2Vob2xkZXIsXG4gIG1kLXNlbGVjdDpub3QoW2Rpc2FibGVkXSk6Zm9jdXMgLm1kLXNlbGVjdC12YWx1ZSB7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIGJvcmRlci13aWR0aDogMXB4O1xuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIH1cblxuICBtZC1zZWxlY3Q6bm90KFtkaXNhYmxlZF0pOmZvY3VzIC5tZC1zZWxlY3QtdmFsdWUge1xuICAgIGJvcmRlci1jb2xvcjogJGNrR3JlZW47XG4gIH1cblxuICAubWQtaW5wdXQsXG4gIG1kLXNlbGVjdCAubWQtc2VsZWN0LXZhbHVlLFxuICBtZC1zZWxlY3QgLm1kLXNlbGVjdC12YWx1ZS5tZC1zZWxlY3QtcGxhY2Vob2xkZXJ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyLWNvbG9yOiAkZGlzYWJsZWRHcmV5O1xuICAgIGhlaWdodDogMi43NWVtO1xuICAgIGZvbnQtZmFtaWx5OiBHb3RoYW1Sb3VuZGVkQm9vaztcbiAgICBwYWRkaW5nOiAwIDEwcHg7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgfVxuXG4gIG1kLXNlbGVjdCAubWQtc2VsZWN0LXZhbHVlLm1kLXNlbGVjdC1wbGFjZWhvbGRlciB7XG4gICAgZm9udC1mYW1pbHk6IEdvdGhhbVJvdW5kZWRNZWRpdW07XG4gIH1cblxuICB0ZXh0YXJlYS5tZC1pbnB1dCB7XG4gICAgcGFkZGluZzogLjQzNzVlbSAxMHB4ICFpbXBvcnRhbnQ7XG4gICAgbWluLWhlaWdodDogMi43NWVtO1xuICB9XG5cbiAgbWQtc2VsZWN0IC5tZC1zZWxlY3QtdmFsdWUsXG4gIG1kLXNlbGVjdCAubWQtc2VsZWN0LXZhbHVlLm1kLXNlbGVjdC1wbGFjZWhvbGRlcntcbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG5cbiAgLm1kLWlucHV0OmRpc2FibGVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGlzYWJsZWRHcmV5O1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkZGlzYWJsZWRHcmV5O1xuICB9XG5cbiAgbGFiZWw6bm90KC5tZC1uby1mbG9hdCk6bm90KC5fbWQtY29udGFpbmVyLWlnbm9yZSksIC5fbWQtcGxhY2Vob2xkZXIge1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICB9XG5cbiAgbGFiZWwge1xuICAgIG1hcmdpbjogMCAxMHB4O1xuICAgIGhlaWdodDogMi43NWVtO1xuICAgIGxpbmUtaGVpZ2h0OiA0Ljc1ZW07XG4gICAgZm9udC1mYW1pbHk6IEdvdGhhbVJvdW5kZWRNZWRpdW07XG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG4gIH1cblxuICBkaXYubWQtaW5wdXQtbWVzc2FnZS1hbmltYXRpb24ge1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIH1cblxuICAubWQtZXJyb3JzLXNwYWNlciB7XG4gICAgbWluLWhlaWdodDogMDtcbiAgfVxufVxuXG5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtcmVzaXplZCAubWQtaW5wdXQsIG1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIC5tZC1pbnB1dCB7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XG59XG5cbmEubWQtYnV0dG9uLm1kLWRlZmF1bHQtdGhlbWUubWQtcmFpc2VkW2Rpc2FibGVkXSwgYS5tZC1idXR0b24ubWQtcmFpc2VkW2Rpc2FibGVkXSwgYS5tZC1idXR0b24ubWQtZGVmYXVsdC10aGVtZS5tZC1mYWJbZGlzYWJsZWRdLCBhLm1kLWJ1dHRvbi5tZC1mYWJbZGlzYWJsZWRdLCAubWQtYnV0dG9uLm1kLWRlZmF1bHQtdGhlbWUubWQtcmFpc2VkW2Rpc2FibGVkXSwgLm1kLWJ1dHRvbi5tZC1yYWlzZWRbZGlzYWJsZWRdLCAubWQtYnV0dG9uLm1kLWRlZmF1bHQtdGhlbWUubWQtZmFiW2Rpc2FibGVkXSwgLm1kLWJ1dHRvbi5tZC1mYWJbZGlzYWJsZWRdIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGRpc2FibGVkR3JleTtcbn1cblxubWQtbWVudS1pdGVtIC5tZC1idXR0b24ge1xuICBjb2xvcjogJGNrSGVhZGVyR3JleTtcblxuICAubWVudS1pdGVtLWNvbnRlbnQge1xuICAgIGhlaWdodDogMTAwJTtcblxuICAgIGkge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgd2lkdGg6IDI0cHg7XG4gICAgfVxuXG4gICAgaS5jay1mb2xkZXIge1xuICAgICAgaGVpZ2h0OiAxNS40M3B4O1xuICAgIH1cblxuICAgIHNwYW4ge1xuICAgICAgbGluZS1oZWlnaHQ6IDEwMCU7XG4gICAgfVxuICB9XG59XG5cbm1kLW1lbnUtY29udGVudCB7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cblxuLm1kLW1lbnUtY29udGVudCAuY29udGFpbmVyIG1kLW1lbnUtaXRlbS5oYWxmIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogNTAlO1xufVxuXG4ubWQtZGlhbG9nLWNvbnRlbnQgLmVycm9yLWRpYWxvZy1tZXNzYWdlLCAuc3Bpbm5lci1kaWFsb2ctbWVzc2FnZSB7XG4gIHdoaXRlLXNwYWNlOiBwcmU7XG59XG5cbi8qXG4gKiBBZGRpdGlvbmFsIHN0eWxlcyBmb3IgTWF0ZXJpYWwgZGVzaWduIGJ1dHRvbnMgYW5kIG5hdi90b29sYmFyIGl0ZW1zXG4gKi9cbi5iYXItaXRlbSB7XG4gIHdpZHRoOiA2MHB4O1xufVxuXG4uYmFyLWl0ZW0sIC5tZC1idXR0b24uYmFyLWl0ZW0ge1xuICAuY29udGVudHMge1xuICAgIEBpbmNsdWRlIGZsZXgtcm93KGNlbnRlciwgY2VudGVyKTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cblxuICBoZWlnaHQ6IDEwMCU7XG59XG5cbmRpdi5iYXItaXRlbSB7XG4gIEBpbmNsdWRlIGZsZXgtcm93KGNlbnRlciwgY2VudGVyKTtcbn1cblxuLm1kLWJ1dHRvbi5iYXItaXRlbSB7XG4gIEBleHRlbmQgLm1kLWJ1dHRvbi5zcXVhcmU7XG5cbiAgbWluLXdpZHRoOiAzZW07XG4gIG1hcmdpbjogMDtcbiAgY29sb3I6ICRja0hlYWRlckdyZXk7XG59XG5cbi5tZC1idXR0b24uYmFyLWl0ZW0uY2stZ3JlZW4ge1xuICBjb2xvcjogJGNrR3JlZW47XG59XG5cbi5tZC1idXR0b24uYmFyLWl0ZW06ZGlzYWJsZWQge1xuICBjb2xvcjogJGRpc2FibGVkR3JleTtcbn1cblxuYS5iYXItaXRlbSB7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi5tZC1idXR0b24udGV4dCB7XG4gIHBhZGRpbmc6IC41ZW0gMWVtO1xuICB3aWR0aDogYXV0bztcbn1cblxuLm1kLWJ1dHRvbi5oZWxwIHtcbiAgbWluLXdpZHRoOiAzNnB4O1xuICBwYWRkaW5nOiAuMmVtIC4yZW07XG59XG5cbi5uby1tYXJnaW4ge1xuICBtYXJnaW46IDA7XG59XG5cbnNwYW4ucm9zdGVyLWNpcmNsZSB7XG4gIG1pbi13aWR0aDogMWVtO1xuICBtaW4taGVpZ2h0OiAxZW07XG4gIGJvcmRlci1yYWRpdXM6IC41ZW07XG4gIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIGJvcmRlci13aWR0aDogMXB4O1xuICBib3JkZXItY29sb3I6ICRja0xpc3RIZWFkZXJCb3JkZXI7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG5cbm1kLXZpcnR1YWwtcmVwZWF0LWNvbnRhaW5lci5tZC1hdXRvY29tcGxldGUtc3VnZ2VzdGlvbnMtY29udGFpbmVyIHtcbiAgbWFyZ2luLXRvcDogMS41ZW07XG59XG5cbm1kLWF1dG9jb21wbGV0ZVttZC1mbG9hdGluZy1sYWJlbF0gbWQtaW5wdXQtY29udGFpbmVyIHtcbiAgcGFkZGluZy1ib3R0b206IDJweDtcbn1cblxubWQtdG9vbHRpcC5jay1hdXRvY29tcGxldGUtdG9vbHRpcCB7XG4gIG1hcmdpbi10b3A6IDFlbVxufVxuXG4ubWQtdG9vbHRpcCB7XG4gIGZvbnQtc2l6ZTogODAlO1xufVxuXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uLFxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgbWFyZ2luOiAwO1xufVxuaW5wdXRbdHlwZT1cIm51bWJlclwiXSB7XG4gIC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xufVxuXG4vKlxuICogQW5pbWF0aW9uc1xuICovXG4ubmctaGlkZS1hZGQge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLm5vc2VsZWN0IHtcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lOyAvKiBpT1MgU2FmYXJpICovXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7ICAgLyogQ2hyb21lL1NhZmFyaS9PcGVyYSAqL1xuICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7ICAgIC8qIEtvbnF1ZXJvciAqL1xuICAtbW96LXVzZXItc2VsZWN0OiBub25lOyAgICAgIC8qIEZpcmVmb3ggKi9cbiAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAgICAgICAvKiBJRS9FZGdlICovXG4gIHVzZXItc2VsZWN0OiBub25lOyAgICAgICAgICAgLyogbm9uLXByZWZpeGVkIHZlcnNpb24sIGN1cnJlbnRseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBzdXBwb3J0ZWQgYnkgYW55IGJyb3dzZXIgKi9cbn1cblxuLmVudGVyLXJpZ2h0Lm5nLWhpZGUtcmVtb3ZlIHtcbiAgYW5pbWF0aW9uOiBmYWRlSW5SaWdodCAuM3M7XG59XG4uZW50ZXItcmlnaHQubmctaGlkZS1hZGQge1xuICBhbmltYXRpb246IGZhZGVPdXRSaWdodCAuM3M7XG59XG4uZW50ZXItcmlnaHQubmctZW50ZXIge1xuICBhbmltYXRpb246IGZhZGVJblJpZ2h0IC4zcztcbn1cbi5lbnRlci1yaWdodC5uZy1sZWF2ZSB7XG4gIGFuaW1hdGlvbjogZmFkZU91dFJpZ2h0IC4zcztcbn1cblxuLmVudGVyLXVwLm5nLWhpZGUtcmVtb3ZlIHtcbiAgYW5pbWF0aW9uOiBmYWRlSW5VcCAuM3M7XG59XG4uZW50ZXItdXAubmctaGlkZS1hZGQge1xuICBhbmltYXRpb246IGZhZGVPdXREb3duIC45cztcbn1cbi5lbnRlci11cC5uZy1lbnRlciB7XG4gIGFuaW1hdGlvbjogZmFkZUluVXAgLjNzO1xufVxuLmVudGVyLXVwLm5nLWxlYXZlIHtcbiAgYW5pbWF0aW9uOiBmYWRlT3V0RG93biAuOXM7XG59XG5cbi5lbnRlci1mYWRlLm5nLWhpZGUtcmVtb3ZlIHtcbiAgYW5pbWF0aW9uOiBmYWRlSW4gLjVzO1xufVxuLmVudGVyLWZhZGUubmctaGlkZS1hZGQge1xuICBhbmltYXRpb246IGZhZGVPdXQgLjVzO1xufVxuLmVudGVyLWZhZGUubmctZW50ZXIge1xuICBhbmltYXRpb246IGZhZGVJbiAuNXM7XG59XG4uZW50ZXItZmFkZS5uZy1sZWF2ZSB7XG4gIGFuaW1hdGlvbjogZmFkZU91dCAuNXM7XG59XG4iLCJAZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdja2ljb24nO1xuICBzcmM6ICAgIHVybCgnLi4vYXNzZXRzL2ZvbnRzL2NraWNvbi5lb3Q/c2dmbHlsJyk7XG4gIHNyYzogICAgdXJsKCcuLi9hc3NldHMvZm9udHMvY2tpY29uLmVvdD9zZ2ZseWwjaWVmaXgnKSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksXG4gICAgICAgICAgdXJsKCcuLi9hc3NldHMvZm9udHMvY2tpY29uLnR0Zj9zZ2ZseWwnKSBmb3JtYXQoJ3RydWV0eXBlJyksXG4gICAgICAgICAgdXJsKCcuLi9hc3NldHMvZm9udHMvY2tpY29uLndvZmY/c2dmbHlsJykgZm9ybWF0KCd3b2ZmJyksXG4gICAgICAgICAgdXJsKCcuLi9hc3NldHMvZm9udHMvY2tpY29uLnN2Zz9zZ2ZseWwjY2tpY29uJykgZm9ybWF0KCdzdmcnKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xufVxuXG5pLmNrIHtcbiAgICAvKiB1c2UgIWltcG9ydGFudCB0byBwcmV2ZW50IGlzc3VlcyB3aXRoIGJyb3dzZXIgZXh0ZW5zaW9ucyB0aGF0IGNoYW5nZSBmb250cyAqL1xuICAgIGZvbnQtZmFtaWx5OiAnY2tpY29uJyAhaW1wb3J0YW50O1xuICAgIHNwZWFrOiBub25lO1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIGZvbnQtdmFyaWFudDogbm9ybWFsO1xuICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xuXG4gICAgLyogQmV0dGVyIEZvbnQgUmVuZGVyaW5nID09PT09PT09PT09ICovXG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbn1cblxuLyoqXG4gKiBPTkxZIFJFUExBQ0UgRlJPTSBIRVJFIERPV05XQVJELlxuICpcbiAqIElmIG5ldyBmb250IGZpbGVzIGFyZSB1cGxvYWRlZCwgbW9kaWZ5IHRoZSBjYWNoaW5nIHN0cmluZyA/eHh4eHgjIGFib3ZlXG4gKiBpbiB0aGUgZm9udCB1cmxzLiBUaGF0IHdpbGwgY2F1c2UgdGhlIGZvbnRzIHRvIGJlIHJlLWRvd25sb2FkZWRcbiAqKi9cblxuLmNrLWFkbWluOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTAwXCI7XG59XG4uY2stYWxlcnQ6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MDFcIjtcbn1cbi5jay1hc3NpZ25tZW50OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTAyXCI7XG59XG4uY2stYXNzaWdubWVudG1hcmtldHBsYWNlOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTAzXCI7XG59XG4uY2stYXVkaW86YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MDRcIjtcbn1cbi5jay1iYWNrOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTA1XCI7XG59XG4uY2stYmFja2dyb3VuZGNvbG9yOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTA2XCI7XG59XG4uY2stYm9yZGVyY29sb3I6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MDdcIjtcbn1cbi5jay1jOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTA4XCI7XG59XG4uY2stY2FtZXJhOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTA5XCI7XG59XG4uY2stY2Fycm90OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTBhXCI7XG59XG4uY2stY2hhdDpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkwYlwiO1xufVxuLmNrLWNoZWNrOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTBjXCI7XG59XG4uY2stY2xvc2U6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MGRcIjtcbn1cbi5jay1jb2xsYXBzZTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkwZVwiO1xufVxuLmNrLWNvbnRleHR1YWxoZWxwOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTBmXCI7XG59XG4uY2stY3JlYXRlZnJvbWZpbGU6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MTBcIjtcbn1cbi5jay1kcmFnZ2FibGU6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MTFcIjtcbn1cbi5jay1kcm9wZG93bjpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkxMlwiO1xufVxuLmNrLWR1cGxpY2F0ZTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkxM1wiO1xufVxuLmNrLWVkaXQ6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MTRcIjtcbn1cbi5jay1lbWFpbDpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkxNVwiO1xufVxuLmNrLWVyYXNlcjpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkxNlwiO1xufVxuLmNrLWV4cGFuZDpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkxN1wiO1xufVxuLmNrLWV4cG9ydHBkZjpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkxOFwiO1xufVxuLmNrLWZlZWRiYWNrOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTE5XCI7XG59XG4uY2stZmlsbGludGhlYmxhbms6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MWFcIjtcbn1cbi5jay1maWx0ZXJzOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTFiXCI7XG59XG4uY2stZm9sZGVyOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTFjXCI7XG59XG4uY2stZ3JhZGVtaW51czpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkxZFwiO1xufVxuLmNrLWdyYWRlcGx1czpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkxZVwiO1xufVxuLmNrLWdyaWQ6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MWZcIjtcbn1cbi5jay1oYW5kOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTIwXCI7XG59XG4uY2staGFuZGNoZWNrOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTIxXCI7XG59XG4uY2staGVscDpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkyMlwiO1xufVxuLmNrLWhpZ2hsaWdodGVyOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTIzXCI7XG59XG4uY2staG9tZTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkyNFwiO1xufVxuLmNrLWxpbmVicmVhazpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkyNVwiO1xufVxuLmNrLWxpbmVkYXNoOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTI2XCI7XG59XG4uY2stbGluZWVuZGxlZnQ6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MjdcIjtcbn1cbi5jay1saW5lZW5kcmlnaHQ6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MjhcIjtcbn1cbi5jay1saW5ldG9vbDpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkyOVwiO1xufVxuLmNrLWxpbmV3aWR0aDpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkyYVwiO1xufVxuLmNrLWxpbms6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MmJcIjtcbn1cbi5jay1sb2FkaW5nOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTJjXCI7XG59XG4uY2stbG9ja2VkOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTJkXCI7XG59XG4uY2stbWFuaXB1bGF0aXZlOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTJlXCI7XG59XG4uY2stbWVudTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkyZlwiO1xufVxuLmNrLW1vcmVvcHRpb25zOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTMwXCI7XG59XG4uY2stbXVsdGlwbGVjaG9pY2U6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MzFcIjtcbn1cbi5jay1uZXh0OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTMyXCI7XG59XG4uY2stbm90aWZpY2F0aW9uczpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkzM1wiO1xufVxuLmNrLW9wdGlvbnMtYXNzaWduOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTM0XCI7XG59XG4uY2stb3B0aW9ucy1kdXBsaWNhdGU6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MzVcIjtcbn1cbi5jay1vcHRpb25zLW1vdmU6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MzZcIjtcbn1cbi5jay1vcHRpb25zLXJlbmFtZTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkzN1wiO1xufVxuLmNrLW9wdGlvbnMtcmVvcmRlcjpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkzOFwiO1xufVxuLmNrLW9wdGlvbnMtc2hhcmU6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MzlcIjtcbn1cbi5jay1vcHRpb25zLXRyYXNoOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTNhXCI7XG59XG4uY2stb3B0aW9ucy12aWV3OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTNiXCI7XG59XG4uY2stcGFnZWJhY2s6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5M2NcIjtcbn1cbi5jay1wYWdlbmV4dDpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkzZFwiO1xufVxuLmNrLXBhbjpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkzZVwiO1xufVxuLmNrLXBhdXNlOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTNmXCI7XG59XG4uY2stcGVuOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTQwXCI7XG59XG4uY2stcGxheTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk0MVwiO1xufVxuLmNrLXBsZWFzZWNoZWNrOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTQyXCI7XG59XG4uY2stcGx1czpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk0M1wiO1xufVxuLmNrLXBybzpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk0NFwiO1xufVxuLmNrLXByb2ZpbGU6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5NDVcIjtcbn1cbi5jay1xdWlja2ZlZWRiYWNrOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTQ2XCI7XG59XG4uY2stcmVkbzpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk0N1wiO1xufVxuLmNrLXJlbmFtZTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk0OFwiO1xufVxuLmNrLXJvc3RlcjpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk0OVwiO1xufVxuLmNrLXNlYXJjaDpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk0YVwiO1xufVxuLmNrLXNlbGVjdDpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk0YlwiO1xufVxuLmNrLXNldHRpbmdzOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTRjXCI7XG59XG4uY2stc2hhcmU6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5NGRcIjtcbn1cbi5jay1zaWdub3V0OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTRlXCI7XG59XG4uY2stc21hbGxwbHVzOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTRmXCI7XG59XG4uY2stc3R1ZGVudGhlbHBlcnM6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5NTBcIjtcbn1cbi5jay1zeW5jOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTUxXCI7XG59XG4uY2stdGV4dDpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk1MlwiO1xufVxuLmNrLXRleHRkZWNyZWFzZTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk1M1wiO1xufVxuLmNrLXRleHRpbmNyZWFzZTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk1NFwiO1xufVxuLmNrLXRyYXNoOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTU1XCI7XG59XG4uY2stdW5kbzpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk1NlwiO1xufVxuLmNrLXVubG9ja2VkOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwiXFxlOTU3XCI7XG59XG4uY2steW91dHViZTpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk1OFwiO1xufVxuLmNrLXpvb21pbjpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTk1OVwiO1xufVxuLmNrLXpvb21vdXQ6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5NWFcIjtcbn1cbiIsIi8vIENvbG9yc1xuJGNrR3JlZW46ICM5OEQ2NEE7XG4kY2tHcmVlbkhvdmVyOiAjODFDMjQxO1xuJGJhY2tncm91bmRHcmVlbjogI2YyZjVkNTtcbiRja0NvcHlCbGFjazogIzZENkU3MDtcbiRja0hlYWRlckdyZXk6ICM2RDZFNzA7XG4kbGlnaHRUZXh0OiAjYjhiYWJjO1xuJGRpc2FibGVkR3JleTogI2U1ZTVlNTtcbiRiYWNrZ3JvdW5kR3JleTogI2VlZWVlZjtcbiRja0xpc3RIZWFkZXI6ICNmMWYxZjI7XG4kY2tXYXJuOiAjZmY2YzZjO1xuJGNrWWVsbG93OiAjRkZERjc4O1xuJGNrTGlzdEhlYWRlckJvcmRlcjogJGRpc2FibGVkR3JleTtcbiRja0xpc3RCYWNrZ3JvdW5kOiAkYmFja2dyb3VuZEdyZXk7XG4kY2tGYWRlZFRleHRHcmV5OiAjQjhCQUJDO1xuJGNrTGlnaHRCbHVlOiAjZTRmNGYzO1xuJGNrVGVhY2hlckhlbHBlcjogJGNrSGVhZGVyR3JleTtcbiRja1N0dWRlbnRIZWxwZXI6ICNmZmRlNzg7XG4kY2tHcmFkaW5nQmVsb3c6ICNGNDhBOEM7XG4kY2tHcmFkaW5nQXBwcm9hY2hlczogI0ZGQkQ3QjtcbiRja0dyYWRpbmdNZWV0czogI0NBRTA5NztcbiRja1BsdXM6ICM1N0JBQjc7XG4kY2tQcm86ICNCNTY4QTk7XG4kY2tQbHVzRGFyazogZGFya2VuKCRja1BsdXMsIDEwJSk7XG4kY2tQcm9EYXJrOiBkYXJrZW4oJGNrUHJvLCAxMCUpO1xuXG4kY2tQZW5CbHVlOiAjMkRDREY4O1xuXG4kY2xhc3NraWNrV2ViR3JleTogJGNrQ29weUJsYWNrO1xuJGNsYXNza2lja1dlYkdyZWVuOiAkY2tHcmVlbjtcbiRjbGFzc2tpY2tXZWJCbGFjazogJGNrQ29weUJsYWNrO1xuJGNsYXNza2lja1dlYldhcm46ICRja1dhcm47XG5cbiRoaWdobGlnaHRQcmltYXJ5OiBsaWdodGVuKCRja0dyZWVuLCAzNyUpO1xuJGFjdGl2ZVdoaXRlOiAjZWFlYWVhO1xuXG4kbGlua0dyZXk6ICRja0hlYWRlckdyZXk7XG4kc3VibWl0QnV0dG9uQ29sb3I6ICRjbGFzc2tpY2tXZWJHcmV5O1xuJHdoaXRlTWFzazogcmdiYSgyNTUsIDI1NSwgMjU1LCAuOTUpO1xuXG4vLyBGb250c1xuJGZvbnRSb3VuZGVkQm9vazogR290aGFtUm91bmRlZEJvb2ssICdWYXJlbGEgUm91bmQnLCBzYW5zLXNlcmlmO1xuJGZvbnRSb3VuZGVkQm9sZDogR290aGFtUm91bmRlZEJvbGQsICdWYXJlbGEgUm91bmQnLCBzYW5zLXNlcmlmO1xuJGZvbnRSb3VuZGVkTWVkaXVtOiBHb3RoYW1Sb3VuZGVkTWVkaXVtLCAnVmFyZWxhIFJvdW5kJywgc2Fucy1zZXJpZjtcbiRmb250Um91bmRlZExpZ2h0SXRhbGljOiBHb3RoYW1Sb3VuZGVkTGlnaHRJdGFsaWMsICdWYXJlbGEgUm91bmQnLCBzYW5zLXNlcmlmO1xuJGZvbnRUaGluOiAnUmFsZXdheScsIHNhbnMtc2VyaWY7XG4vLyBMZXR0ZXIgc3BhY2luZ1xuLy8gMC4wNjI1ZW0gKiAxNnB4ID0gMXB4XG4kbGV0dGVyU3BhY2luZ05vcm1hbDogMC4xMjVlbTtcbiRsZXR0ZXJTcGFjaW5nTGlnaHQ6IDAuMDYyNWVtO1xuJGxldHRlclNwYWNpbmdIZWF2eTogMC4yNWVtO1xuXG4vLyBTdHVkZW50IHdvcmsgaGVpZ2h0c1xuJHN0dWRlbnRIZWFkZXJIZWlnaHQ6IDYwcHg7XG4kYXNzaWdubWVudFRvb2xiYXJIZWlnaHQ6IDQ1cHg7XG4kYXNzaWdubWVudFNoZWV0TWF4OiBjYWxjKDEwMHZoIC0gI3skYXNzaWdubWVudFRvb2xiYXJIZWlnaHR9IC0gI3skc3R1ZGVudEhlYWRlckhlaWdodH0pO1xuJGFzc2lnbm1lbnRTaGVldE1pbjogY2FsYygxMDB2aCAtICN7JHN0dWRlbnRIZWFkZXJIZWlnaHR9KTtcbiRhc3NpZ25tZW50TmF2U2VwYXJhdG9yOiBjYWxjKCN7JGFzc2lnbm1lbnRUb29sYmFySGVpZ2h0fSAtIDEwcHgpO1xuXG4vLyBUZWFjaGVyIHByZXBcbiR0ZWFjaGVyU2lkZW5hdldpZHRoOiAzMjBweDtcbiR0ZWFjaGVyU2lkZW5hdlRhYkhlaWdodDogNTBweDtcbiR0ZWFjaGVySGVhZGVySGVpZ2h0OiA2MHB4O1xuJHRlYWNoZXJMaXN0SXRlbUhlaWdodDogNjBweDtcbiR0ZWFjaGVyTGlzdEhlYWRlckhlaWdodDogNjBweDtcbiR0ZWFjaGVyQnJlYWRjcnVtYjogNTRweDtcbiR0ZWFjaGVyTGlzdEhlaWdodDogY2FsYygxMDB2aCAtICN7JHRlYWNoZXJMaXN0SGVhZGVySGVpZ2h0fSAtICN7JHRlYWNoZXJIZWFkZXJIZWlnaHR9KTtcbiR0ZWFjaGVyTGlzdEhlaWdodFdpdGhCcmVhZGNydW1iOiBjYWxjKDEwMHZoIC0gI3skdGVhY2hlckxpc3RIZWFkZXJIZWlnaHR9IC0gI3skdGVhY2hlckhlYWRlckhlaWdodH0gLSAjeyR0ZWFjaGVyQnJlYWRjcnVtYn0pO1xuJHRlYWNoZXJBc3NpZ25tZW50RWRpdFNoZWV0SGVpZ2h0OiAxMmVtO1xuJHRlYWNoZXJBc3NpZ25tZW50RWRpdFNoZWV0V2lkdGg6IDE2ZW07XG5cbiRwdWJsaWNBc3NpZ25tZW50U2hlZXRIZWlnaHQ6IDE1ZW07XG4kcHVibGljQXNzaWdubWVudFNoZWV0V2lkdGg6IDIwZW07XG5cbiRyb3N0ZXJNZXRhZGF0YUhlaWdodDogMTJlbTtcbiIsIlxuQG1peGluIHZlcnRpY2FsLWFsaWduLXBhcmVudCgpIHtcbiAgLXdlYmtpdC10cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkO1xuICAtbW96LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XG4gIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XG59XG5cbkBtaXhpbiB2ZXJ0aWNhbC1hbGlnbigkcG9zaXRpb246IHJlbGF0aXZlKSB7XG4gIHBvc2l0aW9uOiAkcG9zaXRpb247XG4gIHRvcDogNTAlO1xuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xufVxuXG5AbWl4aW4gZGlzcGxheS1mbGV4KCkge1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDsgIC8qIE9MRCAtIGlPUyA2LSwgU2FmYXJpIDMuMS02LCBCQjcgKi9cbiAgZGlzcGxheTogLW1zLWZsZXhib3g7ICAvKiBUV0VFTkVSIC0gSUUgMTAgKi9cbiAgZGlzcGxheTogLXdlYmtpdC1mbGV4OyAvKiBORVcgLSBTYWZhcmkgNi4xKy4gaU9TIDcuMSssIEJCMTAgKi9cbiAgZGlzcGxheTogZmxleDtcbn1cblxuQG1peGluIGRpc3BsYXktaW5saW5lLWZsZXgoKSB7XG4gIGRpc3BsYXk6IC13ZWJraXQtaW5saW5lLWZsZXg7IC8qIE5FVyAtIFNhZmFyaSA2LjErLiBpT1MgNy4xKywgQkIxMCAqL1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbn1cblxuQG1peGluIGZsZXgtZmxvdygkZGlyZWN0aW9uOiByb3csICR3cmFwOiB3cmFwKXtcbiAgLXdlYmtpdC1ib3gtZmxleC1mbG93OiAkZGlyZWN0aW9uICR3cmFwO1xuICAtd2Via2l0LWZsZXgtZmxvdzogJGRpcmVjdGlvbiAkd3JhcDtcbiAgZmxleC1mbG93OiAkZGlyZWN0aW9uICR3cmFwO1xufVxuXG5AbWl4aW4ganVzdGlmeS1jb250ZW50KCRwb3NpdGlvbjogZmxleC1zdGFydCkge1xuICAtd2Via2l0LWJveC1qdXN0aWZ5LWNvbnRlbnQ6ICRwb3NpdGlvbjtcbiAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6ICRwb3NpdGlvbjtcbiAganVzdGlmeS1jb250ZW50OiAkcG9zaXRpb247XG59XG5cbkBtaXhpbiBhbGlnbi1jb250ZW50KCRwb3NpdGlvbjogZmxleC1zdGFydCkge1xuICAtd2Via2l0LWFsaWduLWNvbnRlbnQ6ICRwb3NpdGlvbjtcbiAgYWxpZ24tY29udGVudDogJHBvc2l0aW9uO1xufVxuXG5AbWl4aW4gYWxpZ24taXRlbXMoJHBvc2l0aW9uOiBjZW50ZXIpIHtcbiAgLXdlYmtpdC1hbGlnbi1pdGVtczogJHBvc2l0aW9uO1xuICBhbGlnbi1pdGVtczogJHBvc2l0aW9uO1xufVxuXG5AbWl4aW4gZmxleCgkdmFsMTogMCwgJHZhbDI6IDAsICR2YWwzOiBhdXRvKSB7XG4gIC13ZWJraXQtYm94LWZsZXg6ICR2YWwxICR2YWwyICR2YWwzOyAgIC8qIE9MRCAtIGlPUyA2LSwgU2FmYXJpIDMuMS02ICovXG4gIC13ZWJraXQtZmxleDogJHZhbDEgJHZhbDIgJHZhbDM7ICAgICAgIC8qIFNhZmFyaSA2LjErLiBpT1MgNy4xKywgQkIxMCAqL1xuICAtbXMtZmxleDogJHZhbDEgJHZhbDIgJHZhbDM7ICAgICAgICAgICAvKiBJRSAxMCAqL1xuICBmbGV4OiAkdmFsMSAkdmFsMiAkdmFsMztcbn1cblxuQG1peGluIGZsZXgtcm93KCR2ZXJ0aWNhbEFsaWduOiBmbGV4LXN0YXJ0LCAkanVzdGlmeTogZmxleC1zdGFydCwgJHdyYXA6IHdyYXApIHtcbiAgQGluY2x1ZGUgZGlzcGxheS1mbGV4KCk7XG4gIEBpbmNsdWRlIGZsZXgtZmxvdyhyb3csICR3cmFwKTtcbiAgQGluY2x1ZGUganVzdGlmeS1jb250ZW50KCRqdXN0aWZ5KTtcbiAgQGluY2x1ZGUgYWxpZ24taXRlbXMoJHZlcnRpY2FsQWxpZ24pO1xufVxuXG5AbWl4aW4gZmxleC1jb2x1bW4oJGhvcml6b250YWxBbGlnbjogZmxleC1zdGFydCwgJGp1c3RpZnk6IGZsZXgtc3RhcnQsICR3cmFwOiB3cmFwKSB7XG4gIEBpbmNsdWRlIGRpc3BsYXktZmxleCgpO1xuICBAaW5jbHVkZSBmbGV4LWZsb3coY29sdW1uLCAkd3JhcCk7XG4gIEBpbmNsdWRlIGp1c3RpZnktY29udGVudCgkanVzdGlmeSk7XG4gIEBpbmNsdWRlIGFsaWduLWl0ZW1zKCRob3Jpem9udGFsQWxpZ24pO1xufVxuXG5AbWl4aW4gY29udGVudC13aWR0aCgpIHtcbiAgd2lkdGg6IC1tb3otbWF4LWNvbnRlbnQ7XG4gIHdpZHRoOiAtd2Via2l0LW1heC1jb250ZW50O1xuICB3aWR0aDogbWF4LWNvbnRlbnQ7XG59XG5cbkBtaXhpbiBjb250ZW50LWhlaWdodCgpIHtcbiAgaGVpZ2h0OiAtbW96LW1heC1jb250ZW50O1xuICBoZWlnaHQ6IC13ZWJraXQtbWF4LWNvbnRlbnQ7XG4gIGhlaWdodDogbWF4LWNvbnRlbnQ7XG59XG5cbkBtaXhpbiBjb250ZW50LXNpemUoKSB7XG4gIEBpbmNsdWRlIGNvbnRlbnQtd2lkdGgoKTtcbiAgQGluY2x1ZGUgY29udGVudC1oZWlnaHQoKTtcbn1cblxuQG1peGluIGhpZGUtZm9jdXNlZC1wbGFjZWhvbGRlcigpIHtcbiAgaW5wdXQ6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIgeyBjb2xvcjp0cmFuc3BhcmVudDsgfVxuICBpbnB1dDpmb2N1czotbW96LXBsYWNlaG9sZGVyIHsgY29sb3I6dHJhbnNwYXJlbnQ7IH1cbiAgaW5wdXQ6Zm9jdXM6Oi1tb3otcGxhY2Vob2xkZXIgeyBjb2xvcjp0cmFuc3BhcmVudDsgfVxuICBpbnB1dDpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXIgeyBjb2xvcjp0cmFuc3BhcmVudDsgfVxufVxuXG5AbWl4aW4gY29sb3ItcGxhY2Vob2xkZXIoJGNvbG9yOiB3aGl0ZSkge1xuICBpbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7IGNvbG9yOiRjb2xvcjsgfVxuICBpbnB1dDotbW96LXBsYWNlaG9sZGVyIHsgY29sb3I6JGNvbG9yOyB9XG4gIGlucHV0OjotbW96LXBsYWNlaG9sZGVyIHsgY29sb3I6JGNvbG9yOyB9XG4gIGlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7IGNvbG9yOiRjb2xvcjsgfVxufVxuXG5AbWl4aW4gdHJhbnNpdGlvbigkcHJvcGVydHk6IHdpZHRoLCAkZHVyYXRpb246IDFzLCAkdGltaW5nRnVuY3Rpb246IGVhc2UtaW4tb3V0KSB7XG4gIC13ZWJraXQtdHJhbnNpdGlvbjokcHJvcGVydHkgJGR1cmF0aW9uICR0aW1pbmdGdW5jdGlvbjtcbiAgLW1vei10cmFuc2l0aW9uOiRwcm9wZXJ0eSAkZHVyYXRpb24gJHRpbWluZ0Z1bmN0aW9uO1xuICAtby10cmFuc2l0aW9uOiRwcm9wZXJ0eSAkZHVyYXRpb24gJHRpbWluZ0Z1bmN0aW9uO1xuICB0cmFuc2l0aW9uOiRwcm9wZXJ0eSAkZHVyYXRpb24gJHRpbWluZ0Z1bmN0aW9uO1xufVxuXG5AbWl4aW4gdHJhbnNmb3JtKCR0cmFuc2Zvcm0pIHtcbiAgLXdlYmtpdC10cmFuc2Zvcm06ICR0cmFuc2Zvcm07XG4gIC1tb3otdHJhbnNmb3JtOiAkdHJhbnNmb3JtO1xuICAtbXMtdHJhbnNmb3JtOiAkdHJhbnNmb3JtO1xuICAtby10cmFuc2Zvcm06ICR0cmFuc2Zvcm07XG4gIHRyYW5zZm9ybTogJHRyYW5zZm9ybTtcbn1cblxuQG1peGluIGVsbGlwc2lzKCkge1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbn1cblxuQG1peGluIGNvbG9yLXB1bHNlKCRjb2xvcjE6IGdyZWVuLCAkY29sb3IyOiB3aGl0ZSkge1xuICBjb2xvcjogJGNvbG9yMTtcblxuICBhbmltYXRpb24tbmFtZTogY29sb3ItcHVsc2U7XG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogMnM7XG4gIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IDI7XG5cbiAgQGtleWZyYW1lcyBjb2xvci1wdWxzZSB7XG4gICAgMCUge1xuICAgICAgY29sb3I6ICRjb2xvcjE7XG4gICAgfVxuICAgIDUwJSB7XG4gICAgICBjb2xvcjogJGNvbG9yMjtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICBjb2xvcjogJGNvbG9yMTtcbiAgICB9XG4gIH1cbn1cbiIsIi5hZGQtcHJvLXN0dWRlbnQtZGlhbG9nIHtcblxuICBtYXgtaGVpZ2h0OiA5MCU7XG5cbiAgLmxvYWRpbmcge1xuICAgIGhlaWdodDogMDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgfVxuXG4gIC5saXN0LWhlYWRlciB7XG4gICAgLnNlYXJjaCB7XG4gICAgICBpIHtcbiAgICAgICAgd2lkdGg6IDA7XG4gICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHJpZ2h0OiAtLjc1ZW07XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICBjb2xvcjogJGxpZ2h0VGV4dFxuICAgICAgfVxuICAgICAgbWQtaW5wdXQtY29udGFpbmVyIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgaW5wdXQge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMmVtO1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbWQtdmlydHVhbC1yZXBlYXQtY29udGFpbmVyIHtcbiAgICBoZWlnaHQ6IGNhbGMoMTAwdmggLSAyMWVtKTtcbiAgICB3aWR0aDogNTBlbTtcblxuICAgIG1kLWxpc3Qge1xuICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcblxuICAgICAgbWQtbGlzdC1pdGVtIHtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRja0xpc3RIZWFkZXJCb3JkZXI7XG4gICAgICB9XG4gICAgfVxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY2tMaXN0SGVhZGVyQm9yZGVyO1xuICB9XG5cbiAgbWQtbGlzdC1pdGVtIG1kLWNoZWNrYm94IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDFlbTtcbiAgfVxuXG4gIC5uYW1lLWNvbCB7XG4gICAgcGFkZGluZy1yaWdodDogMWVtO1xuICAgIG1pbi13aWR0aDogMDtcblxuICAgIC8vIEhBQ0s6IG1heC13aWR0aCBpcyBzZXQgYi9jIEkgY291bGRuJ3QgZmlndXJlIG91dCBob3cgdG8gZ2V0XG4gICAgLy8gdGhlIGZsZXggdG8gd29yayB3aXRoIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgLnRydW5jYXRlIHtcbiAgICAgIG1pbi13aWR0aDogMDtcbiAgICAgIG1heC13aWR0aDogMjhlbTtcbiAgICB9XG4gIH1cblxuICAubG9naW4tY29sIHtcbiAgICB3aWR0aDogMTVlbTtcbiAgfVxuXG4gIC5idXR0b25zIHtcbiAgICBwYWRkaW5nOiAxZW07XG4gIH1cblxuICAuZW1wdHktbWVzc2FnZSB7XG4gICAgcGFkZGluZzogMWVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxufVxuIiwiLmFkZC1hbm9uLXN0dWRlbnQtZGlhbG9nIHtcblxuICAuYWRkLXN0dWRlbnQtY29udGVudCB7XG4gICAgaGVpZ2h0OiAxNWVtO1xuICAgIHdpZHRoOiAzMGVtO1xuXG4gICAgPiBkaXYge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuICB9XG59XG4iLCIuYXNzaWdubWVudC1leHBvcnQtZGlhbG9nIHtcbiAgbWluLXdpZHRoOiBpbmhlcml0O1xuICBjb2xvcjogJGNrQ29weUJsYWNrO1xuXG4gIC5sb2FkaW5nLW1lc3NhZ2Uge1xuICAgIHBhZGRpbmc6IDAuNWVtIDFlbSAwIDFlbTtcbiAgfVxuXG4gIC5ib2R5IHtcbiAgICBib3JkZXItdG9wLXdpZHRoOiAwICFpbXBvcnRhbnQ7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aWR0aDogMjhlbTtcbiAgICBwYWRkaW5nOiAwO1xuXG4gICAgLm1kLWJ1dHRvbi5jay1wcmltYXJ5IHtcbiAgICAgIG1pbi1oZWlnaHQ6IDIuOGVtO1xuICAgICAgbWFyZ2luLWJvdHRvbTogMS41ZW07XG4gICAgfVxuXG4gICAgLmluZGl2aWR1YWwtdGl0bGUge1xuICAgICAgbWFyZ2luOiAwIDRlbSAuN2VtIDRlbTtcbiAgICB9XG5cbiAgICAuYWxsLXRpdGxlIHtcbiAgICAgIG1hcmdpbjogMWVtIDRlbSAuM2VtIDRlbTtcbiAgICB9XG5cbiAgICBtZC1saXN0IHtcbiAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAkYmFja2dyb3VuZEdyZXk7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuXG4gICAgICBtaW4taGVpZ2h0OiAxMmVtO1xuICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcblxuICAgICAgbWQtbGlzdC1pdGVtIHtcblxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuXG4gICAgICAgIC5pdGVtLWNvbnRlbnQge1xuICAgICAgICAgIHBhZGRpbmc6IDAgNSU7XG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmb250Um91bmRlZEJvb2s7XG4gICAgICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4uYXNzaWdubWVudC1leHBvcnQtaGlkZGVuIGFzc2lnbm1lbnQtc2hlZXQgc3ZnIHtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4iLCIuYXNzaWdubWVudC1xdWVzdGlvbi1oZWFkZXIge1xuICBoZWlnaHQ6ICR0ZWFjaGVySGVhZGVySGVpZ2h0O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgcGFkZGluZzogMCAxZW07XG5cbiAgLmFzc2lnbm1lbnQtcXVlc3Rpb24taGVhZGVyLWxlZnQge1xuICAgIGhlaWdodDogJHRlYWNoZXJIZWFkZXJIZWlnaHQ7XG4gIH1cbn1cblxuYXNzaWdubWVudC1xdWVzdGlvbiB7XG4gIEBpbmNsdWRlIGZsZXgtY29sdW1uKHN0cmV0Y2gsIHN0cmV0Y2gpO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLmFzc2lnbm1lbnQtcXVlc3Rpb24ge1xuXG4gIG1pbi1oZWlnaHQ6IDEwMCU7XG5cbiAgLmxvYWRpbmcge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMHZoO1xuXG4gICAgLmxvYWRpbmctdGV4dCB7XG4gICAgICBwYWRkaW5nOiAyZW07XG4gICAgfVxuICB9XG5cblxuICAuZmxvYXRpbmctdG9vbGJhci1jb250YWluZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBoZWlnaHQ6IDBweDtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIHotaW5kZXg6IDc4O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG4gICAgJi5ib3R0b20ge1xuICAgICAgYm90dG9tOiA3M3B4O1xuICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgIH1cblxuICAgIC5mbG9hdGluZy10b29sYmFyIHtcbiAgICAgIHBhZGRpbmc6IC43NWVtIDFlbSAxLjVlbSAxZW07XG5cbiAgICAgID4gKiB7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICAgICAgfVxuXG4gICAgICAuc3R1ZGVudC1wYWdlciwgLnBhZ2VyIHtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMmVtO1xuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcblxuICAgICAgICAucGFnZS1udW0ge1xuICAgICAgICAgIG1hcmdpbjogMCAuNWVtO1xuICAgICAgICB9XG4gICAgICAgIC5jaGFuZ2UtcXVlc3Rpb24tYnRuIHtcbiAgICAgICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgICAgICBtaW4td2lkdGg6IDQwcHg7XG4gICAgICAgICAgbWluLWhlaWdodDogNDBweDtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgICAgLmNoYW5nZS1xdWVzdGlvbi1idG46ZGlzYWJsZWQge1xuICAgICAgICAgIGNvbG9yOiAkZGlzYWJsZWRHcmV5O1xuICAgICAgICB9XG5cbiAgICAgICAgLm9wdGlvbiB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICAgICAgLm1kLXNlbGVjdC12YWx1ZSB7XG4gICAgICAgICAgICBib3JkZXI6IG5vbmU7XG5cbiAgICAgICAgICAgIC5tZC1zZWxlY3QtaWNvbiB7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMnB4O1xuICAgICAgICAgICAgICBtYXJnaW46IDJweCAwIDAgNHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAubWQtc2VsZWN0LWljb24ge1xuICAgICAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWQtc2VsZWN0LXZhbHVlLm1kLXNlbGVjdC12YWx1ZSB7XG4gICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNXB4ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICBoZWlnaHQ6IDIuNGVtO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuc3R1ZGVudC1wYWdlciB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxZW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmhlbHBlci1iYW5uZXIge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwLjJlbTtcbiAgICAgIGxlZnQ6IDAuNWVtO1xuXG4gICAgICAudGVhY2hlcixcbiAgICAgIC5zdHVkZW50IHtcbiAgICAgICAgd2lkdGg6IDMwdnc7XG4gICAgICAgIG1heC13aWR0aDogMzIwcHg7XG4gICAgICAgIHBhZGRpbmc6IDAuMWVtIDAuNWVtIDAuMWVtIDAuNWVtO1xuICAgICAgICBtYXJnaW46IDAuMWVtIDA7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDAuMTVlbTtcbiAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkTWVkaXVtO1xuXG4gICAgICAgIHNwYW4ge1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMC4yZW07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLnRlYWNoZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tUZWFjaGVySGVscGVyO1xuICAgICAgfVxuXG4gICAgICAuc3R1ZGVudCB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRja1N0dWRlbnRIZWxwZXI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmNvbnRlbnQge1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcbiAgICBtaW4taGVpZ2h0OiAxMDAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kR3JleTtcblxuICAgIC5zcGFjZXItdG9wIHtcbiAgICAgIHBhZGRpbmctdG9wOiAyLjVlbTtcbiAgICB9XG5cbiAgICAuYXNzaWdubWVudC1zaGVldC1jdG4ge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgICAuYmFja2dyb3VuZC1mb290ZXIge1xuICAgICAgICBoZWlnaHQ6IDNlbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuc3BhY2VyLWJvdHRvbSB7XG4gICAgICBwYWRkaW5nLWJvdHRvbTogMy41ZW07XG4gICAgfVxuICB9XG59XG5cblxuQG1lZGlhIChtYXgtd2lkdGg6IDk1OXB4KSB7XG4gIC5sYXJnZS1jYW52YXMge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBoZWlnaHQ6IDIwMHZ3O1xuICAgIG1hcmdpbjogMWVtIDA7XG4gICAgd2lkdGg6IDEwMHZ3O1xuICB9XG5cbiAgLmFzc2lnbm1lbnQtcXVlc3Rpb24tbmF2LWN0biB7XG5cbiAgICAuYXNzaWdubWVudC1xdWVzdGlvbi1uYXYge1xuICAgICAgd2lkdGg6IDllbTtcbiAgICAgIGhlaWdodDogMS45ZW07XG4gICAgICBwYWRkaW5nOiAwLjVlbSAwLjVlbTtcbiAgICAgIG1hcmdpbjogMmVtIDJlbSAzLjVlbSAyZW07XG4gICAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmRHcmV5O1xuXG4gICAgICBkaXYuYXNzaWdubWVudC1xdWVzdGlvbi1uYXYtcXVlc3Rpb25zLFxuICAgICAgZGl2LmFzc2lnbm1lbnQtcXVlc3Rpb24tbmF2LWJ0biB7XG4gICAgICAgIGhlaWdodDogNGVtO1xuICAgICAgICBmb250LXNpemU6IDEuMGVtO1xuICAgICAgfVxuXG4gICAgICBkaXYuYXNzaWdubWVudC1xdWVzdGlvbi1uYXYtYnRuIHtcbiAgICAgICAgd2lkdGg6IDMzJTtcbiAgICAgICAgQGluY2x1ZGUgZmxleCgxLCAxLCBhdXRvKTtcbiAgICAgIH1cblxuICAgICAgZGl2LmFzc2lnbm1lbnQtcXVlc3Rpb24tbmF2LXF1ZXN0aW9ucyB7XG4gICAgICAgIHdpZHRoOiAzMyU7XG4gICAgICAgIEBpbmNsdWRlIGZsZXgoMSwgMSwgYXV0byk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi5jb250ZW50cyA+IC5pbmRpY2F0b3ItY2lyY2xlIHtcbiAgdG9wOiAtMTBweDtcbiAgbGVmdDogMTBweDtcbn1cblxuLmluZGljYXRvci1jaXJjbGUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogLTVweDtcbiAgbGVmdDogMHB4O1xuICB3aWR0aDogMC41ZW07XG4gIGhlaWdodDogMC41ZW07XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNrR3JlZW47XG59XG5cbi8vIEFuZ3VsYXIgTWF0ZXJpYWwgcGxhY2VzIHRoZSBtZC1zZWxlY3QgbWVudSBpbiB0aGUgZ2xvYmFsIHNjb3BlLCBidXQgbGV0cyB5b3UgZGVmaW5lIGEgY29udGFpbmVyIGNsYXNzXG4vLyBBbGwgbWQtc2VsZWN0IHN0eWxpbmcgZm9yIHRoZSBvcHRpb25zIHNob3VsZCBiZSBuZXN0ZWQgd2l0aGluIFwiLnNsaWRlLXBhZ2VyLXNlbGVjdC1tZW51XCJcbi5zbGlkZS1wYWdlci1zZWxlY3QtbWVudSBtZC1zZWxlY3QtbWVudSxcbi5zdHVkZW50LXBhZ2VyLXNlbGVjdC1tZW51IG1kLXNlbGVjdC1tZW51IHtcbiAgbWF4LWhlaWdodDogbm9uZTtcbiAgbWQtY29udGVudCB7XG4gICAgbWF4LWhlaWdodDogOTV2aDtcbiAgICBtaW4td2lkdGg6IDEwMHB4O1xuICB9XG59XG4iLCIuYXNzaWdubWVudC1zZWxlY3Rpb24tZGlhbG9nIHtcblxuICBtYXgtaGVpZ2h0OiA5MCU7XG5cbiAgLmxvYWRpbmcge1xuICAgIGhlaWdodDogMDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgfVxuXG4gIC5saXN0LWhlYWRlciB7XG4gICAgLnNlYXJjaCB7XG4gICAgICBpIHtcbiAgICAgICAgd2lkdGg6IDA7XG4gICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHJpZ2h0OiAtLjc1ZW07XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICBjb2xvcjogJGxpZ2h0VGV4dFxuICAgICAgfVxuICAgICAgbWQtaW5wdXQtY29udGFpbmVyIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgaW5wdXQge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMmVtO1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbWQtdmlydHVhbC1yZXBlYXQtY29udGFpbmVyIHtcbiAgICBoZWlnaHQ6IGNhbGMoMTAwdmggLSAyMWVtKTtcbiAgICB3aWR0aDogNTBlbTtcblxuICAgIG1kLWxpc3Qge1xuICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcblxuICAgICAgbWQtbGlzdC1pdGVtIHtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRja0xpc3RIZWFkZXJCb3JkZXI7XG4gICAgICB9XG4gICAgfVxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY2tMaXN0SGVhZGVyQm9yZGVyO1xuICB9XG5cbiAgbWQtbGlzdC1pdGVtIG1kLWNoZWNrYm94IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDFlbTtcbiAgfVxuXG4gIC5uYW1lLWNvbCB7XG4gICAgcGFkZGluZy1yaWdodDogMWVtO1xuICAgIG1pbi13aWR0aDogMDtcblxuICAgIC8vIEhBQ0s6IG1heC13aWR0aCBpcyBzZXQgYi9jIEkgY291bGRuJ3QgZmlndXJlIG91dCBob3cgdG8gZ2V0XG4gICAgLy8gdGhlIGZsZXggdG8gd29yayB3aXRoIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgLnRydW5jYXRlIHtcbiAgICAgIG1pbi13aWR0aDogMDtcbiAgICAgIG1heC13aWR0aDogMjhlbTtcbiAgICB9XG4gIH1cblxuICAubG9naW4tY29sIHtcbiAgICB3aWR0aDogNmVtO1xuICB9XG5cbiAgLmJ1dHRvbnMge1xuICAgIHBhZGRpbmc6IDFlbTtcbiAgfVxuXG4gIC5lbXB0eS1tZXNzYWdlIHtcbiAgICBwYWRkaW5nOiAxZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG59XG4iLCIkbGFyZ2VDYW52YXNXaWR0aDogOTZ2dztcbiRsYXJnZUNhbnZhc0hlaWdodDogJGxhcmdlQ2FudmFzV2lkdGggKiAyO1xuXG5hc3NpZ25tZW50LXNoZWV0IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgaGVpZ2h0OiAyMDA4cHg7XG4gIHdpZHRoOiAxMDA0cHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbjogMCBhdXRvO1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG5cbiAgc3ZnIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIH1cblxuICAuaGlkZGVuLXRleHQtaW5wdXQge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIHJlc2l6ZTogbm9uZTtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuXG4gIC5oaWRkZW4tdGV4dC1pbnB1dDo6c2VsZWN0aW9uIHtcbiAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIH1cblxuICAmLmxhcmdlLWNhbnZhcyB7XG4gICAgYm94LXNoYWRvdzogM3B4IDVweCA1cHggI2NjYztcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgbWFyZ2luOiAyZW0gMDtcbiAgfVxufVxuXG5cbiIsIiRjaXJjbGVEaWFtZXRlcjogMS40ZW07XG4kYnV0dG9uV2lkdGg6IDQ0cHg7XG4kdG9vbGJhckhlaWdodDogNDRweDtcblxuYXNzaWdubWVudC10b29sYmFyIHtcblxuICAuYXNzaWdubWVudC10b29sYmFyIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgIGhlaWdodDogaW5oZXJpdDtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIC5idXR0b24tYmFyIHtcbiAgICAgIHdpZHRoOiAxMDB2dztcbiAgICAgIHBhZGRpbmc6IDAgMWVtO1xuICAgICAgaGVpZ2h0OiAkdG9vbGJhckhlaWdodDtcbiAgICB9XG5cbiAgICAuaGlkZSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxuXG4gIC5hc3NpZ25tZW50LXRvb2xiYXItc2VwYXJhdG9yIHtcbiAgICB3aWR0aDogMXB4O1xuICAgIGhlaWdodDogJGFzc2lnbm1lbnROYXZTZXBhcmF0b3I7XG4gICAgbWFyZ2luOiBhdXRvIDJweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZEdyZXk7XG4gIH1cblxuICAuYm9keSB7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBuZy10cmFuc2NsdWRlIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIG1kLXNpZGVuYXYge1xuXG4gICAgICAuY2FwdHVyZS1hdWRpbyB7XG4gICAgICAgIGF1ZGlvLWNhcHR1cmUge1xuICAgICAgICAgIG1hcmdpbjogMWVtO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5zaWRlbmF2LWhlYWRlciB7XG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkYmFja2dyb3VuZEdyZXk7XG4gICAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgICAgICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkTWVkaXVtO1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgIGhlaWdodDogNjBweDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIHBhZGRpbmc6IDBweCAwcHggMHB4IDE2cHg7XG4gICAgICB9XG5cbiAgICAgIC5wbGFjZS1zdGlja2VycywgLmVkaXQtc3RpY2tlciB7XG5cbiAgICAgICAgbWQtY29udGVudCB7XG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1kLWxpc3Qge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgbWQtbGlzdC1pdGVtLnN0aWNrZXIge1xuICAgICAgICAgIGhlaWdodDogNDhweDtcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuXG4gICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIGhlaWdodDogMzBweDtcbiAgICAgICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwLjZlbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAudGV4dCwgLnNjb3JlIHtcbiAgICAgICAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgICAgICAgICAgZm9udC1zaXplOiAxMXB0O1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5zY29yZSB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDE5cHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLnNjb3JlLnplcm8ge1xuICAgICAgICAgICAgY29sb3I6ICRja0ZhZGVkVGV4dEdyZXk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLmVkaXQge1xuICAgICAgICAgICAgaGVpZ2h0OiBpbmhlcml0O1xuXG4gICAgICAgICAgICAubWQtYnV0dG9uLmJhci1pdGVtIHtcbiAgICAgICAgICAgICAgaGVpZ2h0OiA0OHB4O1xuICAgICAgICAgICAgICB3aWR0aDogNDhweDtcbiAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0cHg7XG4gICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDRweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICAuZWRpdC1zdGlja2VyIHtcblxuICAgICAgICBtZC1jb250ZW50IHtcbiAgICAgICAgICBwYWRkaW5nOiAwIDEuNWVtO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNoYW5nZS1pbWFnZSB7XG4gICAgICAgICAgcGFkZGluZy10b3A6IDFlbTtcblxuICAgICAgICAgIC5tZC1idXR0b24ge1xuICAgICAgICAgICAgd2lkdGg6IDExZW07XG4gICAgICAgICAgICBoZWlnaHQ6IDllbTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAuNWVtO1xuICAgICAgICAgICAgbWF4LWhlaWdodDogNWVtO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA1ZW07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLmNoYW5nZS1wb2ludHMge1xuXG4gICAgICAgICAgbWFyZ2luLXRvcDogMS41ZW07XG5cbiAgICAgICAgICAubWQtYnV0dG9uIHtcbiAgICAgICAgICAgIG1pbi13aWR0aDogNDBweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgICAgIHdpZHRoOiAzMCU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLmFjdGlvbnMgLm1kLWJ1dHRvbi5zYXZlIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxZW07XG4gICAgICAgICAgd2lkdGg6IDU1JTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hY3Rpb25zIC5tZC1idXR0b24uZGVsZXRlIHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLmVkaXQtZmlsbC1pbi10aGUtYmxhbmsge1xuXG4gICAgICAgIC5vbmJvYXJkaW5nIHtcblxuICAgICAgICAgIHAsIC5zZWN0aW9uLWhlYWRlciB7XG4gICAgICAgICAgICBwYWRkaW5nOiAwIDE2cHg7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcDpmaXJzdC1vZi10eXBlLCAuc2VjdGlvbi1oZWFkZXIge1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogMTZweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGltZyB7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDYwJTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIG1kLWNvbnRlbnQge1xuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cblxuICAgICAgICBtZC1saXN0IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1kLWxpc3QtaXRlbS5hbnN3ZXIge1xuICAgICAgICAgIGhlaWdodDogNDhweDtcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuXG4gICAgICAgICAgaW5wdXQge1xuICAgICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgICAgICAgICBmb250LXNpemU6IDExcHQ7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6ICRmb250Um91bmRlZEJvb2s7XG4gICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC50cmFzaCB7XG4gICAgICAgICAgICBoZWlnaHQ6IGluaGVyaXQ7XG5cbiAgICAgICAgICAgIC5tZC1idXR0b24uYmFyLWl0ZW0ge1xuICAgICAgICAgICAgICBoZWlnaHQ6IDQ4cHg7XG4gICAgICAgICAgICAgIHdpZHRoOiA0OHB4O1xuICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDRweDtcbiAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogNHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC5jaGFuZ2UtcG9pbnRzIHtcbiAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuICAgICAgICAgIG1hcmdpbi10b3A6IDEuNWVtO1xuICAgICAgICAgIGhlaWdodDogMTAwcHg7XG5cbiAgICAgICAgICAubWQtYnV0dG9uIHtcbiAgICAgICAgICAgIG1pbi13aWR0aDogNDBweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgICAgIHdpZHRoOiAzMCU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgLmVkaXQtbXVsdGlwbGUtY2hvaWNlIHtcbiAgICAgICAgbWQtY29udGVudCB7XG4gICAgICAgICAgcGFkZGluZzogMWVtIDEuNWVtO1xuXG4gICAgICAgICAgaDQge1xuICAgICAgICAgICAgbWFyZ2luOiAuNzVlbSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5jay1yb3VuZC1idXR0b24ge1xuICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAycHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLmNvcnJlY3QtYW5zd2VyLCAuY29ycmVjdC1hbnN3ZXI6aG92ZXIge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuY2hhbmdlLXBvaW50cyB7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAxLjVlbTtcblxuICAgICAgICAgICAgLm1kLWJ1dHRvbiB7XG4gICAgICAgICAgICAgIG1pbi13aWR0aDogNDBweDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWQtaW5wdXQtY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgICAgICAgd2lkdGg6IDMwJTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZC1pbnB1dC1jb250YWluZXIgaW5wdXQge1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5hY3Rpb25zIHtcbiAgICAgICAgICAgIG1hcmdpbjogMWVtO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG5cbi5hc3NpZ25tZW50LXRvb2xiYXIge1xuXG4gIGZvbnQtZmFtaWx5OiBHb3RoYW1Sb3VuZGVkQm9vaztcbiAgZm9udC1zaXplOiAxMXB0O1xuICBsaW5lLWhlaWdodDogMThwdDtcblxuICAmLnRvb2wtcGFuZWwge1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgfVxuXG4gIC5jb2xsYXBzZWQtYnV0dG9uLWJhciB7XG4gICAgaGVpZ2h0OiAkdG9vbGJhckhlaWdodDtcbiAgfVxuXG4gIC50b29sLWJ1dHRvbiB7XG4gICAgQGV4dGVuZCAubWQtYnV0dG9uLnNxdWFyZTtcbiAgICBAaW5jbHVkZSB0cmFuc2l0aW9uKGJhY2tncm91bmQtY29sb3IsIDMwMG1zKTtcblxuICAgIHdpZHRoOiAkYnV0dG9uV2lkdGg7XG4gICAgbWluLXdpZHRoOiAkYnV0dG9uV2lkdGg7XG4gICAgaGVpZ2h0OiAkdG9vbGJhckhlaWdodDtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcblxuICAgIGkge1xuICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgfVxuXG4gICAgLmFuY2hvciB7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMDtcblxuICAgICAgLmNvbG9yLWJhciB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDNweDtcbiAgICAgICAgdG9wOiAycHg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuc3ViLWljb24ge1xuICAgICAgd2lkdGg6IDA7XG4gICAgICBoZWlnaHQ6ICR0b29sYmFySGVpZ2h0O1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuXG4gICAgICBpIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB0b3A6IDE1cHg7XG4gICAgICAgIGxlZnQ6IDEwcHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMC42ZW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLnRleHQtc3ViLWljb24ge1xuICAgICAgd2lkdGg6IDA7XG4gICAgICBoZWlnaHQ6ICR0b29sYmFySGVpZ2h0O1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICAgICBpIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB0b3A6IDE1cHg7XG4gICAgICAgIGxlZnQ6IDBweDtcbiAgICAgICAgZm9udC1zaXplOiAwLjZlbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLnRvZ2dsZWQge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgIGkge1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICB9XG4gICAgICAubGluZS1jaG9pY2Uge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmOmRpc2FibGVkIHtcbiAgICAgIGNvbG9yOiAkZGlzYWJsZWRHcmV5O1xuICAgICAgaSB7XG4gICAgICAgIGNvbG9yOiAkZGlzYWJsZWRHcmV5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC50b29sLXNlbGVjdCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG5cbiAgICBtZC1zZWxlY3QgLm1kLXNlbGVjdC12YWx1ZSwgbWQtc2VsZWN0Om5vdChbZGlzYWJsZWRdKTpmb2N1cyAubWQtc2VsZWN0LXZhbHVlIHtcbiAgICAgIGJvcmRlci13aWR0aDogMDtcbiAgICAgIGhlaWdodDogJHRvb2xiYXJIZWlnaHQ7XG4gICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICB9XG4gIH1cblxuICAuY2lyY2xlIHtcbiAgICB3aWR0aDogJGNpcmNsZURpYW1ldGVyO1xuICAgIGhlaWdodDogJGNpcmNsZURpYW1ldGVyO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkYmFja2dyb3VuZEdyZXk7XG4gIH1cblxuICAubGluZS1jaG9pY2Uge1xuICAgIHdpZHRoOiAkYnV0dG9uV2lkdGg7XG4gICAgaGVpZ2h0OiAycHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICBib3JkZXItcmFkaXVzOiAxMDAwcHg7XG4gIH1cblxuICAuZmVlZGJhY2stbm90aWZpY2F0aW9uIHtcbiAgICBpIHtcbiAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICB9XG5cbiAgICAubm90aWZpY2F0aW9uLWNpcmNsZSB7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB0b3A6IC05cHg7XG4gICAgICBsZWZ0OiAxcHg7XG4gICAgICB3aWR0aDogMC41ZW07XG4gICAgICBoZWlnaHQ6IDAuNWVtO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrR3JlZW47XG4gICAgfVxuICB9XG5cbiAgZ3JhZGUtaW5wdXQge1xuICAgIGhlaWdodDogMmVtO1xuICB9XG5cbiAgZ3JhZGUtaW5wdXQudmFsdWUge1xuICAgIG1hcmdpbjogYXV0bztcbiAgICB3aWR0aDogODVweDtcbiAgfVxuXG4gIGdyYWRlLWlucHV0LnNjb3JlIHtcbiAgICBtYXJnaW46IGF1dG87XG4gICAgd2lkdGg6IDEzMHB4O1xuICAgIG1hcmdpbi1yaWdodDogMC41ZW07XG4gICAgbWFyZ2luLWxlZnQ6IDAuNWVtO1xuICB9XG5cbiAgJi5wZW4tY29sb3IsICYudGV4dC1jb2xvciwgJi5oaWdobGlnaHRlci1jb2xvciwgJi5zdHJhaWdodC1saW5lLWNvbG9yIHtcbiAgICB3aWR0aDogY2FsYyg0ICogI3skYnV0dG9uV2lkdGh9KTtcbiAgfVxuXG4gICYucGVuLXdpZHRoLCAmLmhpZ2hsaWdodGVyLXdpZHRoLCAmLnN0cmFpZ2h0LWxpbmUtd2lkdGgge1xuICAgIHdpZHRoOiBjYWxjKDIgKiAjeyRidXR0b25XaWR0aH0pO1xuXG4gICAgLnRvb2wtYnV0dG9uIHtcbiAgICAgIHdpZHRoOiBjYWxjKDIgKiAjeyRidXR0b25XaWR0aH0pO1xuICAgIH1cbiAgfVxuXG4gIC5yZXF1ZXN0LWhlbHAge1xuXG4gICAgQGluY2x1ZGUgdHJhbnNpdGlvbihiYWNrZ3JvdW5kLWNvbG9yLCAzMDBtcyk7XG5cbiAgICAmLmhlbHAge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrWWVsbG93O1xuICAgICAgaSB7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLmNoZWNrIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRja0dyZWVuO1xuICAgICAgaSB7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLnVucmVhZC1tZXNzYWdlcyB7XG4gICAgICBpIHtcbiAgICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgfVxuICAgICAgLm5vdGlmaWNhdGlvbi1jaXJjbGUge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMTFweDtcbiAgICAgICAgbGVmdDogMjlweDtcbiAgICAgICAgd2lkdGg6IDAuNWVtO1xuICAgICAgICBoZWlnaHQ6IDAuNWVtO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRja0dyZWVuO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4ubW9kZS1zZWxlY3QtY29udGFpbmVyIHtcbiAgd2lkdGg6IDYwcHg7XG5cbiAgbWQtY29udGVudCB7XG4gICAgbWluLXdpZHRoOiA2MHB4O1xuICB9XG59XG4iLCJ0b29sYmFyLWNvbG9yLW1lbnUge1xuXG4gIC5jb2xvcnMtcGF5d2FsbCB7XG4gICAgJi5pbmFjdGl2ZSB7XG4gICAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgfVxuXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGFsaWduOiBjZW50ZXI7XG4gICAgY29sb3I6ICRja1BybztcbiAgICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkTWVkaXVtO1xuICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICBtYXJnaW4tdG9wOiAxMnB4O1xuICAgIG1hcmdpbi1ib3R0b206IDhweDtcblxuICAgIC5jay1jYXJyb3Qge1xuICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICB9XG4gIH1cbn1cbiIsImF1ZGlvLWNhcHR1cmUge1xuXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWluLWhlaWdodDogMzkwcHg7XG4gIG1pbi13aWR0aDogMjAwcHg7XG5cbiAgLnJlY29yZGluZy1pY29uIHtcbiAgICBmb250LXNpemU6IDVlbTtcbiAgfVxuXG4gIC5yZWNvcmRpbmcsIC5zdGFydCwgLmF1ZGlvLWxvYWRpbmcsIC5hdWRpby1tZXNzYWdlIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgLm1lc3NhZ2Uge1xuICAgICAgaGVpZ2h0OiAzZW07XG4gICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgIGZvbnQtc2l6ZTogMTVwdDtcbiAgICB9XG4gIH1cblxuICAuYXVkaW8tbG9hZGluZyB7XG4gIH1cblxuICAuYXVkaW8tbWVzc2FnZSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHAge1xuICAgICAgcGFkZGluZy10b3A6IDA7XG4gICAgfVxuICB9XG59XG4iLCIuY2hhdC1tZXNzYWdlIHtcblxuICAudXNlci1pbmZvIHtcbiAgICBtYXJnaW46IDE0cHggMTZweCAzcHggMTZweDtcbiAgICBAZXh0ZW5kIC5jaGF0LW1lc3NhZ2UtdGV4dDtcblxuICAgIC5uYW1lIHtcbiAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICAgIH1cbiAgICAudGltZSB7XG4gICAgICBjb2xvcjogJGxpZ2h0VGV4dDtcbiAgICB9XG4gIH1cblxuICAuY2hhdC10ZXh0IHtcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgbWFyZ2luOiA0cHggMTJweDtcbiAgICBwYWRkaW5nOiA2cHggNnB4O1xuXG4gICAgaSB7XG4gICAgICBtYXJnaW46IDAgOHB4IDAgMnB4O1xuICAgIH1cblxuICAgIC50ZXh0LCBpLCBhIHtcbiAgICAgIEBleHRlbmQgLmNoYXQtbWVzc2FnZS10ZXh0O1xuICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgICBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1xuICAgIH1cbiAgfVxuICAuY2hhdC10ZXh0LmhlbHAge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRja1llbGxvdztcbiAgICBjb2xvcjogd2hpdGU7XG4gIH1cbiAgLmNoYXQtdGV4dC5jaGVjayB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNrR3JlZW47XG4gICAgY29sb3I6IHdoaXRlO1xuICB9XG4gIC5jaGF0LXRleHQuaGFuZF9kb3duIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZEdyZXk7XG5cbiAgICAudGV4dCwgaSB7XG4gICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgIG9wYWNpdHk6IDAuNDtcbiAgICB9XG4gIH1cbiAgLmNoYXQtdGV4dC5tZXNzYWdlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZEdyZXk7XG4gICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gIH1cbiAgLmNoYXQtdGV4dC5ibGVuZC10b3Age1xuICAgIGJvcmRlci1yYWRpdXM6IDAgMCAycHggMnB4O1xuICAgIG1hcmdpbjogMCAxMnB4IDRweCAxMnB4O1xuICB9XG4gIC5jaGF0LXRleHQuYmxlbmQtYm90dG9tIHtcbiAgICBib3JkZXItcmFkaXVzOiAycHggMnB4IDAgMDtcbiAgICBtYXJnaW46IDRweCAxMnB4IDAgMTJweDtcbiAgfVxuICAuY2hhdC10ZXh0LmJsZW5kLWJvdGgge1xuICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgbWFyZ2luOiAwIDEycHg7XG4gIH1cbn1cblxuLmNoYXQtbWVzc2FnZS5wcmV2aW91cy1mcm9tLW90aGVyIHtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICRiYWNrZ3JvdW5kR3JleTtcbiAgbWFyZ2luLXRvcDogOHB4O1xufVxuIiwiLmNrLWRpYWxvZyB7XG4gIGhlaWdodDogaW5oZXJpdDtcbiAgd2lkdGg6IGluaGVyaXQ7XG4gIG1pbi1oZWlnaHQ6IGluaGVyaXQ7XG4gIG1pbi13aWR0aDogaW5oZXJpdDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAuY2stZGlhbG9nLWhlYWRlciB7XG4gICAgcGFkZGluZzogMDtcbiAgICBtaW4taGVpZ2h0OiAkdGVhY2hlckhlYWRlckhlaWdodDtcblxuICAgIC5jay1kaWFsb2ctaGVhZGVyLWNvbnRlbnQge1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIG1heC13aWR0aDogY2FsYygxMDAlIC0gMTIwcHgpO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgfVxuXG4gIC5jay1kaWFsb2ctY29udGVudCB7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG5cbiAgICA+ICoge1xuICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlZWVlZWY7XG4gICAgfVxuICB9XG5cbiAgLmJhci1pdGVtIHtcbiAgICBjb2xvcjogJGNrR3JlZW47XG4gICAgbWluLXdpZHRoOiA2MHB4O1xuICAgIGhlaWdodDogYXV0bztcblxuICAgIC5iYXItaXRlbSB7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICB9XG5cbiAgLmNrLWRpYWxvZy1sb2FkaW5nIHtcbiAgICBwYWRkaW5nOiAuNWVtO1xuXG4gICAgLmxvYWRpbmctcGFkZGluZyB7XG4gICAgICBwYWRkaW5nOiAuNWVtO1xuICAgIH1cbiAgfVxufVxuIiwiXG4kY29sb3JNZW51Q2lyY2xlRGlhbWV0ZXI6IDE4cHg7XG4kY29sb3JNZW51SXRlbVdpZHRoOiBjYWxjKCN7JGNvbG9yTWVudUNpcmNsZURpYW1ldGVyfSAqIDIpO1xuXG4uY2stY29sb3ItbWVudSxcbi5jay1jb2xvci1tZW51LXdpZGUge1xuICB3aWR0aDogY2FsYygjeyRjb2xvck1lbnVJdGVtV2lkdGh9ICogMik7XG4gIEBpbmNsdWRlIGZsZXgtcm93KGZsZXgtc3RhcnQsIGZsZXgtc3RhcnQsIHdyYXApO1xuICBib3gtc2hhZG93OiAwcHggN3B4IDhweCAtNHB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDEzcHggMTlweCAycHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDVweCAyNHB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuXG4gIC5tZC1idXR0b24uY29sb3ItaXRlbSB7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBtaW4td2lkdGg6ICRjb2xvck1lbnVJdGVtV2lkdGg7XG4gICAgbWF4LXdpZHRoOiAkY29sb3JNZW51SXRlbVdpZHRoO1xuICAgIG1pbi1oZWlnaHQ6ICRjb2xvck1lbnVJdGVtV2lkdGg7XG4gICAgbWF4LWhlaWdodDogJGNvbG9yTWVudUl0ZW1XaWR0aDtcblxuICAgIC5jb250ZW50cyB7XG4gICAgICBAaW5jbHVkZSBmbGV4LXJvdyhjZW50ZXIsIGNlbnRlciwgd3JhcCk7XG4gICAgfVxuXG4gICAgLmNpcmNsZSB7XG4gICAgICBtaW4td2lkdGg6ICRjb2xvck1lbnVDaXJjbGVEaWFtZXRlcjtcbiAgICAgIG1heC13aWR0aDogJGNvbG9yTWVudUNpcmNsZURpYW1ldGVyO1xuICAgICAgbWluLWhlaWdodDogJGNvbG9yTWVudUNpcmNsZURpYW1ldGVyO1xuICAgICAgbWF4LWhlaWdodDogJGNvbG9yTWVudUNpcmNsZURpYW1ldGVyO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIH1cbiAgfVxufVxuXG4uY2stY29sb3ItbWVudS13aWRlIHtcbiAgd2lkdGg6IGNhbGMoI3skY29sb3JNZW51SXRlbVdpZHRofSAqIDQpO1xufVxuXG5cbiIsIi5jb25maXJtLWRpYWxvZyB7XG4gIC5tZC1kaWFsb2ctY29udGVudCB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG59XG4iLCIuY29udHJhY3QtdXNlci1yZXNldC1wYXNzd29yZC1kaWFsb2cge1xuICB3aWR0aDogNDBlbTtcblxuICAudGl0bGUge1xuICAgIGgzIHtcbiAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgbWF4LXdpZHRoOiAzMGVtO1xuICAgIH1cbiAgfVxuXG4gIC5ib2R5IHtcbiAgICBoZWlnaHQ6IDIwZW07XG5cbiAgICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgICAgbWF4LWhlaWdodDogM2VtO1xuICAgICAgd2lkdGg6IDI3ZW07XG4gICAgfVxuXG4gICAgLmNoZWNrYm94LWNvbnRhaW5lciB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIHBhZGRpbmc6IDFlbTtcblxuICAgIH1cblxuICAgIC5yZXNldC1wYXNzd29yZC1idXR0b25zIHtcbiAgICAgIHBhZGRpbmc6IDFlbTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbiAgfVxufVxuIiwiLmVycm9yLWRpYWxvZyB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbiIsIm1kLWRpYWxvZy5jcmVhdGUtY29udHJhY3Qtc3R1ZGVudHMtZGlhbG9nIHtcblxuICBtYXgtaGVpZ2h0OiA5MCU7XG4gIG1heC13aWR0aDogOTUlO1xuXG4gIGZvcm0ge1xuICAgIHBhZGRpbmc6IDI2cHggMi41ZW0gMjZweCAyLjVlbTtcblxuICAgIGlucHV0IHtcbiAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgIHRleHQtc2hhZG93OiAwcHggMHB4IDBweCAkY2tIZWFkZXJHcmV5O1xuICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIC5lcnJvci1tZXNzYWdlcyB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDQycHg7XG4gICAgICBsZWZ0OiAxMnB4O1xuXG4gICAgICBkaXYge1xuICAgICAgICBmb250LXNpemU6IDdwdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgICAgd2lkdGg6IDM2MHB4O1xuICAgICAgbWFyZ2luOiAxNnB4IDAgMjBweCAwO1xuICAgIH1cblxuICAgIC5tZC1idXR0b24uY2stcHJpbWFyeSB7XG4gICAgICBtYXJnaW46IDAgNXB4O1xuICAgIH1cbiAgfVxuXG4gIC5yZW1vdmUtY29sIHtcbiAgICB3aWR0aDogNjBweDtcbiAgICBoZWlnaHQ6IDYwcHg7XG5cbiAgICAubWQtYnV0dG9uIHtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG4gIH1cblxuICBtZC12aXJ0dWFsLXJlcGVhdC1jb250YWluZXIge1xuICAgIGhlaWdodDogY2FsYygxMDB2aCAtIDI1ZW0pO1xuICAgIHdpZHRoOiA0OGVtO1xuXG4gICAgbWQtbGlzdCB7XG4gICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuXG4gICAgICBtZC1saXN0LWl0ZW0ubGlzdC1pdGVtIHtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRja0xpc3RIZWFkZXJCb3JkZXI7XG4gICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG5cbiAgICAgICAgLm1kLWJ1dHRvbiB7XG4gICAgICAgICAgY29sb3I6ICRjbGFzc2tpY2tXZWJHcmV5O1xuICAgICAgICB9XG5cbiAgICAgICAgJi5lcnJvciB7XG4gICAgICAgICAgaGVpZ2h0OiA3MHB4O1xuICAgICAgICAgIGJvcmRlci1jb2xvcjogJGNrV2FybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuZXJyb3ItbWVzc2FnZSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAzOHB4O1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgY29sb3I6ICRja1dhcm47XG4gICAgICAgIGZvbnQtc2l6ZTogN3B0O1xuICAgICAgfVxuXG4gICAgICAuZW1wdHktbWVzc2FnZSB7XG4gICAgICAgIHBhZGRpbmc6IDE2cHg7XG4gICAgICAgIGxldHRlci1zcGFjaW5nOiAwLjA2MjVlbTtcbiAgICAgICAgY29sb3I6ICRjbGFzc2tpY2tXZWJHcmV5O1xuICAgICAgfVxuICAgIH1cbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGNrTGlzdEhlYWRlckJvcmRlcjtcbiAgfVxuXG4gIC5jcmVhdGVkIG1kLXZpcnR1YWwtcmVwZWF0LWNvbnRhaW5lciB7XG4gICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMjQuNWVtKTtcbiAgfVxuXG4gIC5maXJzdC1uYW1lLWNvbCxcbiAgLmxhc3QtbmFtZS1jb2wsXG4gIC5pZC1jb2wsXG4gIC5wYXNzd29yZC1jb2wge1xuICAgIHBhZGRpbmctcmlnaHQ6IDFlbTtcbiAgICBtaW4td2lkdGg6IDA7XG5cbiAgICAvLyBIQUNLOiBtYXgtd2lkdGggaXMgc2V0IGIvYyBJIGNvdWxkbid0IGZpZ3VyZSBvdXQgaG93IHRvIGdldFxuICAgIC8vIHRoZSBmbGV4IHRvIHdvcmsgd2l0aCB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIC50cnVuY2F0ZSB7XG4gICAgICBtaW4td2lkdGg6IDA7XG4gICAgICBtYXgtd2lkdGg6IDI4ZW07XG4gICAgfVxuICB9XG5cbiAgLmJ1dHRvbnMge1xuICAgIHBhZGRpbmc6IDFlbTtcbiAgICBtYXgtd2lkdGg6IDUwZW07XG5cbiAgICAubWVzc2FnZSB7XG4gICAgICBwYWRkaW5nOiAwZW07XG4gICAgICBtYXJnaW46IDBlbTtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIGZvbnQtc2l6ZTogMTJwdDtcbiAgICAgIGNvbG9yOiAkY2xhc3NraWNrV2ViR3JleTtcbiAgICB9XG4gIH1cblxuICAudGV4dC1lbXBoYXNpcyB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICB9XG5cbiAgLmltcG9ydC1jc3Yge1xuICAgIHdpZHRoOiA3MDBweDtcbiAgICBwYWRkaW5nOiAxLjVlbTtcblxuICAgIHAge1xuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgIGNvbG9yOiAkY2xhc3NraWNrV2ViR3JleTtcbiAgICB9XG4gIH1cblxuICAuc2VsZWN0IHtcbiAgICBtYXgtd2lkdGg6IDkwMHB4O1xuICAgIGhlaWdodDogNTAwcHg7XG4gICAgcGFkZGluZzogMWVtO1xuXG4gICAgcCB7XG4gICAgICBtYXJnaW46IDAgMTBlbTtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBjb2xvcjogJGNsYXNza2lja1dlYkdyZXk7XG4gICAgfVxuXG4gICAgLmNyZWF0ZS1vcHRpb25zIHtcbiAgICAgIHdpZHRoOiAyMGVtO1xuICAgICAgbWFyZ2luOiAwZW0gMi41ZW07XG4gICAgICBwYWRkaW5nOiAxLjVlbTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDI1cHg7XG4gICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMHB4IDEwcHggMXB4IHJnYmEoMCwwLDAsMC4yNSk7XG4gICAgICAtbW96LWJveC1zaGFkb3c6IDBweCAwcHggMTBweCAxcHggcmdiYSgwLDAsMCwwLjI1KTtcbiAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTBweCAxcHggcmdiYSgwLDAsMCwwLjI1KTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgICAgLmltYWdlLWNvbnRhaW5lciB7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDhlbTtcblxuICAgICAgICBpbWcge1xuICAgICAgICAgIG1pbi13aWR0aDogNWVtO1xuICAgICAgICAgIG1pbi1oZWlnaHQ6IDVlbTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAubWVzc2FnZSB7XG4gICAgICAgIG1hcmdpbjogMWVtIDAuMjVlbTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBjb2xvcjogJGNrR3JlZW47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm9wdGlvbiB7XG4gICAgICBtYXJnaW46IDAgMCAwIDAuNWVtO1xuICAgICAgcGFkZGluZzogMDtcblxuICAgICAgLmVycm9yLW1lc3NhZ2VzIHtcbiAgICAgICAgdG9wOiAzNXB4O1xuICAgICAgfVxuXG4gICAgICBtZC1zZWxlY3QtdmFsdWUubWQtc2VsZWN0LXZhbHVlIHtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDVweCAhaW1wb3J0YW50O1xuICAgICAgICBoZWlnaHQ6IDIuM2VtO1xuICAgICAgfVxuXG4gICAgICBtZC1zZWxlY3QubmctaW52YWxpZC5uZy1kaXJ0eSAubWQtc2VsZWN0LXZhbHVlIHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGNrV2FybjtcbiAgICAgIH1cbiAgICB9XG5cblxuICB9XG5cbiAgLmludml0ZSB7XG4gICAgYm9yZGVyLXRvcDogbm9uZTtcbiAgICBwYWRkaW5nOiAwIDFlbSAxZW0gMWVtO1xuICAgIHdpZHRoOiA3MDBweDtcblxuICAgIC5pbnZpdGUtY29kZSB7XG4gICAgICBtYXJnaW4tdG9wOiAwLjI1ZW07XG4gICAgICBjb2xvcjogJGNrUGVuQmx1ZTtcbiAgICAgIGZvbnQtc2l6ZTogMzVwdDtcbiAgICAgIGhlaWdodDogNTBweDtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRNZWRpdW07XG4gICAgfVxuXG4gICAgYSB7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICB9XG5cbiAgICAuaGludCB7XG4gICAgICBjb2xvcjogJGxpZ2h0VGV4dDtcbiAgICB9XG5cbiAgICBsaSB7XG4gICAgICBtYXJnaW46IDAgMTVweCAwcHggMTVweDtcblxuICAgICAgc3BhbiB7XG4gICAgICAgIGNvbG9yOiAkY2tQZW5CbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5tZC1idXR0b24ge1xuICAgICAgbWFyZ2luOiAwIDNweCAzcHggMDtcbiAgICB9XG4gIH1cblxuICAuZXJyb3ItY29udGFpbmVyIHtcbiAgICB3aWR0aDogNjAwcHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5cbiAgLnJlbW92ZS1kdXBsaWNhdGVzIHtcbiAgICBwIHtcbiAgICAgIG1hcmdpbjogMWVtIDJlbSAwIDJlbTtcbiAgICB9XG4gIH1cbn1cbiIsIi5mZWVkYmFjay1pbmJveCB7XG4gIC5mZWVkYmFjay1pbmJveC1idXR0b24ge1xuICAgIHBhZGRpbmc6IC41ZW07XG4gIH1cbiAgLmZlZWRiYWNrLWluYm94LWJ1dHRvbi5hY3RpdmUge1xuICAgIEBpbmNsdWRlIGNvbG9yLXB1bHNlKCRja0dyZWVuLCBsaWdodGVuKCRja0dyZWVuLCAzNyUpKTtcbiAgfVxufVxuXG4vKlxuICBBbmd1bGFyIE1hdGVyaWFsIHBsYWNlcyBtZC1tZW51LWNvbnRlbnQgZ2xvYmFsbHlcbiAgc28gYWxsIGNzcyBzdHlsZXMgbXVzdCBiZSBpbiBnbG9iYWwgY29udGV4dFxuKi9cbi5mZWVkYmFjay1pbmJveC1tZW51IHtcbiAgbWF4LWhlaWdodDogOTV2aDtcblxuICBtZC1tZW51LWl0ZW0ge1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkYmFja2dyb3VuZEdyZXk7XG4gICAgZm9udC1mYW1pbHk6ICRmb250Um91bmRlZE1lZGl1bTtcbiAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcblxuICAgIC5tZC1idXR0b24ge1xuICAgICAgcGFkZGluZzogMHB4IDFlbTtcbiAgICB9XG4gIH1cblxuICBtZC1tZW51LWl0ZW0uZmVlZGJhY2sge1xuXG4gICAgZGl2IGltZyB7XG4gICAgICB3aWR0aDogMi41ZW07XG4gICAgICBtYXJnaW4tcmlnaHQ6IDFlbTtcbiAgICB9XG5cbiAgICBzcGFuIHtcbiAgICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkQm9vaztcbiAgICB9XG5cbiAgICBpIHtcbiAgICAgIHBhZGRpbmctbGVmdDogNGVtO1xuICAgICAgZm9udC1zaXplOiAwLjZlbTtcbiAgICB9XG5cbiAgfVxuXG4gIG1kLW1lbnUtaXRlbS5leHBsYW5hdGlvbiB7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRiYWNrZ3JvdW5kR3JleTtcblxuICAgIC5tZC1idXR0b24ge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgfVxuXG59XG4iLCJtZC1kaWFsb2cuZmVlZGJhY2stZGlhbG9nIHtcbiAgbWluLXdpZHRoOiAxOGVtO1xuICBtaW4taGVpZ2h0OiAxMWVtO1xuXG4gIC5jb250ZW50IHtcbiAgICBwYWRkaW5nOiAyZW07XG5cbiAgICB0ZXh0YXJlYSB7XG4gICAgICBtYXgtaGVpZ2h0OiAxNGVtO1xuICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgfVxuICB9XG5cbiAgLmFjdGlvbnMge1xuICAgIG1hcmdpbjogMWVtO1xuICB9XG59XG4iLCIuZm9sZGVyLW5hbWUtZGlhbG9nIHtcbiAgd2lkdGg6IDQxMHB4O1xuXG4gIC5ib2R5IHtcbiAgICBib3JkZXItdG9wOiBub25lO1xuICB9XG5cbiAgZm9ybSB7XG4gICAgcGFkZGluZzogMCAxLjVlbSAxLjVlbSAxLjVlbTtcbiAgfVxuXG4gIC5lcnJvci1tZXNzYWdlcyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNDJweDtcbiAgICBsZWZ0OiAxMnB4O1xuXG4gICAgZGl2IHtcbiAgICAgIGZvbnQtc2l6ZTogN3B0O1xuICAgIH1cbiAgfVxuXG4gIGlucHV0IHtcbiAgICBjb2xvcjogJGNrR3JlZW47XG4gICAgdGV4dC1zaGFkb3c6IDBweCAwcHggMHB4ICRja0hlYWRlckdyZXk7IC8qIGNoYW5nZSBbaW5wdXQgZm9udF0gYnkgdGhpcyovXG4gICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xuICB9XG5cbiAgbWQtaW5wdXQtY29udGFpbmVyIHtcbiAgICB3aWR0aDogODAlO1xuICAgIG1hcmdpbjogMTZweCAwIDIwcHggMDtcbiAgfVxuXG4gIC5tZC1idXR0b24uY2stcHJpbWFyeSB7XG4gICAgbWFyZ2luOiAxMHB4IDVweCAwIDVweDtcbiAgfVxufSIsImdyYWRlLWlucHV0IC5ncmFkZSB7XG4gIGhlaWdodDogMTAwJTtcbiAgYm9yZGVyLWNvbG9yOiAkZGlzYWJsZWRHcmV5O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGJvcmRlci13aWR0aDogMXB4O1xuICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICBvdXRsaW5lOiBub25lO1xuXG4gIGlucHV0IHtcbiAgICBtaW4td2lkdGg6IDFlbTtcbiAgICB3aWR0aDogMWVtO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgICBmb250LXNpemU6IGluaGVyaXQ7XG4gICAgY29sb3I6IGluaGVyaXQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbi1yaWdodDogMC4xZW07XG4gICAgLW1vei1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG4gIH1cblxuICBAaW5jbHVkZSBjb2xvci1wbGFjZWhvbGRlcihpbmhlcml0KTtcbiAgQGluY2x1ZGUgaGlkZS1mb2N1c2VkLXBsYWNlaG9sZGVyKCk7XG5cbiAgLm5vZm9jdXMge1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB9XG5cbiAgLmhpZGRlbi1ncmFkZS1zcGFuIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB9XG59XG4iLCIuaGVscC1hc3NpZ25tZW50cy1saXN0LWRpYWxvZyB7XG5cbiAgLmltYWdlIHtcbiAgICBwYWRkaW5nOiAxZW0gMCAwIDA7XG4gICAgd2lkdGg6IGF1dG87XG4gICAgaGVpZ2h0OiBhdXRvO1xuICB9XG5cbiAgLmNvbnRlbnQge1xuICAgIG1heC13aWR0aDogMTAwMHB4O1xuICB9XG5cbiAgLnRleHQtY29udGVudCB7XG4gICAgcGFkZGluZzogMCAxLjVlbSAxZW0gMS41ZW07XG4gIH1cblxuICAuYnV0dG9ucyB7XG4gICAgbWFyZ2luOiAxZW07XG4gIH1cbn1cbiIsIi5oZWxwLWNlbnRlciB7XG4gIGhlaWdodDogMTAwJTtcblxuICAuaGFuZCB7XG4gICAgaGVpZ2h0OiAxMjVweDtcbiAgICBwYWRkaW5nOiAxMHB4IDA7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRiYWNrZ3JvdW5kR3JleTtcblxuICAgIC5yYWlzZSB7XG4gICAgICAubWQtYnV0dG9uLmhlbHAsIC5tZC1idXR0b24uY2hlY2sge1xuICAgICAgICBwYWRkaW5nOiAwIDE2cHg7XG4gICAgICAgIHdpZHRoOiAxNzBweDtcblxuICAgICAgICBpIHtcbiAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDNweDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLmhlbHAge1xuICAgICAgICBjb2xvcjogJGNrWWVsbG93O1xuICAgICAgICBib3JkZXItY29sb3I6ICRja1llbGxvdztcbiAgICAgIH1cbiAgICAgIC5jaGVjayB7XG4gICAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAkY2tHcmVlbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAubG93ZXIge1xuXG4gICAgICAubWQtYnV0dG9uIHtcbiAgICAgICAgcGFkZGluZzogOHB4IDE2cHg7XG5cbiAgICAgICAgLmNpcmNsZSB7XG4gICAgICAgICAgaGVpZ2h0OiA0M3B4O1xuICAgICAgICAgIHdpZHRoOiA0M3B4O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDI1cHg7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmRHcmV5O1xuXG4gICAgICAgICAgaSB7XG4gICAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5tZC1idXR0b24uaGVscCB7XG4gICAgICAgIGNvbG9yOiAkY2tZZWxsb3c7XG5cbiAgICAgICAgLmNpcmNsZSB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrWWVsbG93O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5tZC1idXR0b24uY2hlY2sge1xuICAgICAgICBjb2xvcjogJGNrR3JlZW47XG5cbiAgICAgICAgLmNpcmNsZSB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrR3JlZW47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH1cblxuICAgIC5pbmZvIHtcbiAgICAgIC5jaXJjbGUge1xuICAgICAgICBoZWlnaHQ6IDQzcHg7XG4gICAgICAgIHdpZHRoOiA0M3B4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAyNXB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZEdyZXk7XG5cbiAgICAgICAgaSB7XG4gICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAuY2lyY2xlLmhlbHAge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tZZWxsb3c7XG4gICAgICB9XG5cbiAgICAgIC5jaXJjbGUuY2hlY2sge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tHcmVlbjtcbiAgICAgIH1cbiAgICAgIC5tZXNzYWdlIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMTZweDtcbiAgICAgICAgY29sb3I6ICRsaWdodFRleHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLm1lc3NhZ2VzIHtcblxuICAgIGNoYXQtbWVzc2FnZTpsYXN0LWNoaWxkIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgICB9XG5cbiAgICAubm8tbWVzc2FnZXMge1xuICAgICAgY29sb3I6ICRsaWdodFRleHQ7XG4gICAgICBoZWlnaHQ6IDIwMHB4O1xuICAgICAgcGFkZGluZzogMTZweDtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB9XG4gIH1cblxuICAucHJvLW9wdGlvbnMge1xuICAgIHBhZGRpbmc6IDA7XG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICRiYWNrZ3JvdW5kR3JleTtcbiAgICBvdXRsaW5lOiBub25lO1xuXG4gICAgY29sb3I6ICRja1BybztcbiAgICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkTWVkaXVtO1xuICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXG4gICAgLmNrLWNhcnJvdCB7XG4gICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgIH1cblxuICAgIGRpdiB7XG4gICAgICBtYXJnaW4tbGVmdDogMTZweDtcbiAgICAgIG1hcmdpbi10b3A6IDExcHg7XG4gICAgfVxuICB9XG5cbiAgLnBheXdhbGwge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuXG4gIC5wYXl3YWxsLWNsb3NlZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTFweDtcbiAgfVxuXG4gIC5tZXNzYWdlLWlucHV0IHtcbiAgICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgICAgbWFyZ2luOiA4cHg7XG4gICAgICBtYXJnaW4tdG9wOiAycHg7XG4gICAgICBwYWRkaW5nOiAwO1xuXG4gICAgICB0ZXh0YXJlYS5tZC1pbnB1dCB7XG4gICAgICAgIG1heC1oZWlnaHQ6IDIwMHB4O1xuICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgICAgQGV4dGVuZCAuY2hhdC1tZXNzYWdlLXRleHQ7XG4gICAgICAgIHBhZGRpbmc6IDAuOGVtIDEwcHggMC43ZW0gMTBweCAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIG1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkOjpiZWZvcmUge1xuICAgICAgYm9yZGVyLWNvbG9yOiAkY2tHcmVlbjtcbiAgICB9XG5cbiAgICBtZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtaW52YWxpZDo6YmVmb3JlIHtcbiAgICAgIGJvcmRlci1jb2xvcjogJGNrV2FybjtcbiAgICB9XG5cbiAgICAuZXJyb3ItbWVzc2FnZXMge1xuICAgICAgY29sb3I6ICRja1dhcm47XG5cbiAgICAgIGRpdiB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XG4gICAgICAgIG1hcmdpbi10b3A6IC01cHg7XG4gICAgICAgIGZvbnQtc2l6ZTogOHB0O1xuICAgICAgICBoZWlnaHQ6IDI1cHg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmxlYXJuLW1vcmUge1xuICAgICAgbWFyZ2luOiAwcHggMHB4IDBweCA0cHg7XG4gICAgICBwYWRkaW5nOiAwcHg7XG4gICAgICB3aWR0aDogMTIwcHg7XG4gICAgICBmb250LXNpemU6IDAuOWVtO1xuICAgIH1cbiAgfVxufVxuIiwiLmhlbHAtcmVzb3VyY2VzIHtcblxuICAqIHtcbiAgICBvdXRsaW5lOiBub25lO1xuICB9XG5cbiAgLmJvZHktc3VidGV4dCB7XG4gICAgZm9udC1zaXplOiAxMnB0O1xuICB9XG5cbiAgLmNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDNlbSAyZW0gMmVtIDJlbTtcbiAgfVxuXG4gIC5waWNrZXItYm94IHtcbiAgICB3aWR0aDogMTVlbTtcbiAgICBtYXJnaW46IDBlbSAyLjVlbTtcbiAgICBib3JkZXItcmFkaXVzOiAyNXB4O1xuICAgIC13ZWJraXQtYm94LXNoYWRvdzogMHB4IDBweCAxMHB4IDFweCByZ2JhKDAsMCwwLDAuMjUpO1xuICAgIC1tb3otYm94LXNoYWRvdzogMHB4IDBweCAxMHB4IDFweCByZ2JhKDAsMCwwLDAuMjUpO1xuICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTBweCAxcHggcmdiYSgwLDAsMCwwLjI1KTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICAuaW1hZ2UtY29udGFpbmVyIHtcbiAgICAgIG1pbi1oZWlnaHQ6IDEyZW07XG5cbiAgICAgIGltZyB7XG4gICAgICAgIG1pbi13aWR0aDogOGVtO1xuICAgICAgICBtaW4taGVpZ2h0OiA4ZW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1lc3NhZ2Uge1xuICAgICAgaGVpZ2h0OiA0ZW07XG4gICAgICBtYXJnaW46IDFlbSAwLjI1ZW07XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBjb2xvcjogJGNrR3JlZW47XG4gICAgfVxuICB9XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDExMDBweCkge1xuICAgIC5waWNrZXItYm94IHtcbiAgICAgIG1hcmdpbjogMCAxLjVlbTtcbiAgICB9XG4gIH1cblxuICAucGlja2VyLWFjdGlvbnMge1xuICAgIG1hcmdpbi10b3A6IDJlbTtcbiAgfVxuXG4gIC52aWRlby1ib2R5LWhlYWRlciBkaXYge1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICB9XG5cbiAgLnZpZGVvLWJvZHktaXRlbSBkaXYgc3BhbiB7XG4gICAgcGFkZGluZy1yaWdodDogMWVtO1xuXG4gICAgLmJvZHktc3VidGV4dCB7XG4gICAgICBmb250LXNpemU6IDEzcHQ7XG4gICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICB9XG5cbiAgICAudGltZSB7XG4gICAgICBjb2xvcjogJGRpc2FibGVkR3JleTtcbiAgICB9XG4gIH1cblxuICAudmlkZW8tYm9keS1pdGVtOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY2tIZWFkZXJHcmV5O1xuICB9XG5cbiAgLmltYWdlLCAuaW1hZ2UtaGVhZGVyIHtcbiAgICB3aWR0aDogMTAwcHg7XG4gICAgaGVpZ2h0OiAxMDBweDtcbiAgfVxuXG4gIC5pbWFnZS1oZWFkZXIge1xuICAgIGhlaWdodDogMTVweDtcbiAgfVxuXG4gIC5zZWNvbmRhcnktYnV0dG9ucyB7XG4gICAgcGFkZGluZy10b3A6IDJlbTtcbiAgfVxufVxuIiwiaGVscC1pbmJveCB7XG4gIGhlaWdodDogMTAwJTtcblxuICAuaGVscC1pbmJveCB7XG4gICAgcGFkZGluZzogMHB4O1xuXG4gICAgLm1kLWJ1dHRvbi5iYXItaXRlbS5hY3RpdmUge1xuICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgcGFkZGluZzogMC4yZW0gMC4xZW07XG4gICAgfVxuXG4gICAgLmhhbmRzLWNvdW50IHtcbiAgICAgIHBhZGRpbmctbGVmdDogMC4zZW07XG4gICAgfVxuICB9XG59XG5cbi8qXG4gIEFuZ3VsYXIgTWF0ZXJpYWwgcGxhY2VzIG1kLW1lbnUtY29udGVudCBnbG9iYWxseVxuICBzbyBhbGwgY3NzIHN0eWxlcyBtdXN0IGJlIGluIGdsb2JhbCBjb250ZXh0XG4qL1xuLmhlbHAtaW5ib3gtbWVudSxcbi5mZWVkYmFjay1pbmJveC1tZW51IHtcbiAgbWF4LWhlaWdodDogOTV2aDtcblxuICBtZC1tZW51LWl0ZW0ge1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkYmFja2dyb3VuZEdyZXk7XG4gICAgZm9udC1mYW1pbHk6ICRmb250Um91bmRlZE1lZGl1bTtcbiAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcblxuXG4gICAgLm1kLWJ1dHRvbiB7XG4gICAgICBwYWRkaW5nOiAwcHggMWVtO1xuICAgIH1cbiAgfVxuXG4gIG1kLW1lbnUtaXRlbS5uby1yZXF1ZXN0cyxcbiAgbWQtbWVudS1pdGVtLm5vLW5vdGlmaWNhdGlvbnMge1xuICAgIGZvbnQtc2l6ZTogMC44NWVtO1xuICAgIGNvbG9yOiAkY2tGYWRlZFRleHRHcmV5O1xuICB9XG5cbiAgbWQtbWVudS1pdGVtLmZlZWRiYWNrLFxuICBtZC1tZW51LWl0ZW0ucmVxdWVzdCB7XG5cbiAgICBkaXYgaW1nIHtcbiAgICAgIHdpZHRoOiAyLjVlbTtcbiAgICAgIG1hcmdpbi1yaWdodDogMWVtO1xuICAgIH1cblxuICAgIHNwYW4ge1xuICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICAgIH1cblxuICAgIGkge1xuICAgICAgcGFkZGluZy1sZWZ0OiA0ZW07XG4gICAgICBmb250LXNpemU6IDAuNmVtO1xuICAgIH1cblxuICB9XG5cbiAgbWQtbWVudS1pdGVtLmV4cGxhbmF0aW9uIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuXG4gICAgLm1kLWJ1dHRvbiB7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgfVxuICB9XG5cbiAgbWQtbWVudS1pdGVtLmNoZWNrLXN1YnRpdGxlLFxuICBtZC1tZW51LWl0ZW0uaGVscC1zdWJ0aXRsZSxcbiAgbWQtbWVudS1pdGVtLmNoYXQtc3VidGl0bGUge1xuICAgIG1heC1oZWlnaHQ6IDIuNWVtO1xuICAgIG1pbi1oZWlnaHQ6IDIuNWVtO1xuICAgIHBhZGRpbmc6IDAgMTZweDtcblxuICAgID4gKiB7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgIH1cbiAgfVxuXG4gIG1kLW1lbnUtaXRlbS5jaGVjay1zdWJ0aXRsZSB7XG5cbiAgICAuY2hlY2stcmVxdWVzdHMtY291bnQge1xuICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgd2lkdGg6IDEuNWVtO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgfVxuXG4gIG1kLW1lbnUtaXRlbS5oZWxwLXN1YnRpdGxlIHtcblxuICAgIC5oZWxwLXJlcXVlc3RzLWNvdW50IHtcbiAgICAgIGNvbG9yOiAkY2tZZWxsb3c7XG4gICAgICB3aWR0aDogMS41ZW07XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgfVxuICB9XG5cbiAgbWQtbWVudS1pdGVtLmNoYXQtc3VidGl0bGUge1xuXG4gICAgLmNoYXQtcmVxdWVzdHMtY291bnQge1xuICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgICB3aWR0aDogMS41ZW07XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgfVxuICB9XG59XG4iLCJoZWxwLXJlcXVlc3QtaW5kaWNhdG9yIHtcblxuICBjb2xvcjogJGxpZ2h0VGV4dDtcblxuICAuY291bnQge1xuICAgIC8vIEZJWE1FOiBUaGlzIHdhcyBiZWluZyBvdmVycmlkZGVuIGJ5IHRlYWNoZXIuc2NzcyBgLm1kLWxpc3QtaXRlbSAuY29sIGRpdmAsIHByZXZlbnRpbmcgdGV4dC1hbGlnblxuICAgIC8vIGZyb20gYmVoYXZpbmcgY29ycmVjdGx5LiBUaGF0IGNzcyBuZWVkcyB0byBiZSByZWZpbmVkIGF0IHNvbWUgcG9pbnRcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW4tbGVmdDogLjNlbTtcbiAgICBwYWRkaW5nOiAwIC41ZW07XG4gICAgbWluLXdpZHRoOiAyLjVlbTtcblxuICAgIGZvbnQtZmFtaWx5OiBHb3RoYW1Sb3VuZGVkTWVkaXVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjVlbTtcbiAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6Ljc1ZW07XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOi43NWVtO1xuICAgIGJvcmRlci1yYWRpdXM6Ljc1ZW07XG5cbiAgICBiYWNrZ3JvdW5kOiAkYmFja2dyb3VuZEdyZXk7XG4gICAgY29sb3I6ICRsaWdodFRleHQ7XG5cbiAgICAmLmFjdGl2ZSB7XG4gICAgICBiYWNrZ3JvdW5kOiAkY2tHcmVlbjtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB9XG4gIH1cbn1cbiIsIi5oZWxwLXJvc3RlcnMtbGlzdC1kaWFsb2cge1xuXG4gIC5pbWFnZSB7XG4gICAgcGFkZGluZzogMWVtIDAgMCAwO1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogYXV0bztcbiAgfVxuXG4gIC5jb250ZW50IHtcbiAgICBtYXgtd2lkdGg6IDEwMDBweDtcbiAgfVxuXG4gIC50ZXh0LWNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDAgMS41ZW0gMWVtIDEuNWVtO1xuICB9XG5cbiAgLmJ1dHRvbnMge1xuICAgIG1hcmdpbjogMWVtO1xuICB9XG59XG4iLCIuaGVscC1zZXNzaW9uLXdhdGNoLWRpYWxvZyB7XG5cbiAgLmltYWdlIHtcbiAgICBwYWRkaW5nOiAxZW0gMCAwIDA7XG4gICAgd2lkdGg6IGF1dG87XG4gICAgaGVpZ2h0OiBhdXRvO1xuICB9XG5cbiAgLmNvbnRlbnQge1xuICAgIG1heC13aWR0aDogMTAwMHB4O1xuICB9XG5cbiAgLnRleHQtY29udGVudCB7XG4gICAgcGFkZGluZzogMCAxLjVlbSAxZW0gMS41ZW07XG4gIH1cblxuICAuYnV0dG9ucyB7XG4gICAgbWFyZ2luOiAxZW07XG4gIH1cbn1cbiIsIi5pbWFnZS1jcm9wcGVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcblxuICBjdXJzb3I6IGNyb3NzaGFpcjtcbn1cbiIsIi5pbWFnZS1waWNrZXItZGlhbG9nIHtcbiAgbWluLXdpZHRoOiA2MmVtO1xuICBtYXgtd2lkdGg6IDYyZW07XG5cbiAgbWQtY29udGVudCB7XG4gICAgcGFkZGluZzogMWVtIDRlbTtcbiAgICBtYXgtd2lkdGg6IDU1ZW07XG5cbiAgICAubWQtYnV0dG9uLnN0aWNrZXIge1xuICAgICAgbWluLXdpZHRoOiA3ZW07XG4gICAgICBtYXgtd2lkdGg6IDdlbTtcbiAgICAgIG1pbi1oZWlnaHQ6IDdlbTtcbiAgICAgIG1heC1oZWlnaHQ6IDdlbTtcblxuICAgICAgLmNvbnRlbnRzIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIH1cblxuICAgICAgaW1nIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtZC1kaWFsb2ctYWN0aW9ucyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogMCAxZW07XG4gIH1cbn1cbiIsIi5pbXBvcnQtaW1hZ2UtZGlhbG9nIHtcbiAgbWF4LWhlaWdodDogOTUlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgLmNsb3NlLWRpYWxvZyB7XG4gICAgQGV4dGVuZCAubWQtYnV0dG9uLnNxdWFyZTtcbiAgICBtYXJnaW46IDA7XG4gICAgbWluLXdpZHRoOiA2MHB4O1xuICB9XG5cbiAgbWQtZGlhbG9nLWNvbnRlbnQge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cblxuICAuZGlhbG9nLWhlYWRlciB7XG4gICAgbWluLWhlaWdodDogNTBweDtcbiAgfVxuXG4gIC5jb250ZW50IHtcbiAgICBtaW4td2lkdGg6IDQwdnc7XG4gICAgbWluLWhlaWdodDogMTB2aDtcbiAgfVxuXG4gIC5zZWxlY3QtZmlsZSB7XG4gICAgLmNvbnRlbnQge1xuICAgICAgcGFkZGluZzogMS41ZW07XG5cbiAgICAgIHA6Zmlyc3QtY2hpbGQge1xuICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgfVxuXG4gICAgICBpbWcge1xuICAgICAgICBoZWlnaHQ6IDMwMHB4O1xuICAgICAgfVxuXG4gICAgICAucGRmLWhpbnQge1xuICAgICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgICAgZm9udC1zaXplOiA4MCU7XG4gICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmNyb3Age1xuICAgIC5jb250ZW50IHtcbiAgICAgIC5pbWFnZS1jb250YWluZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiAkZGlzYWJsZWRHcmV5O1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgICAgIGhlaWdodDogY2FsYyg5MHZoIC0gMTRlbSk7XG4gICAgICAgIHdpZHRoOiA2MHZ3O1xuXG4gICAgICAgIC5jcm9wcGVyIHtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAuY2hvb3NlLWRlc3RpbmF0aW9ucyB7XG4gICAgLmNvbnRlbnQge1xuXG4gICAgICBtYXgtaGVpZ2h0OiBjYWxjKDk1dmggLSAxMGVtKTtcbiAgICAgIG1pbi13aWR0aDogMjVlbTtcbiAgICAgIG92ZXJmbG93OiBhdXRvO1xuXG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuXG4gICAgICAuc2Nyb2xsLWNvbnRhaW5lciB7XG4gICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgIH1cblxuICAgICAgLmNyb3BwZWQtcHJldmlldyB7XG4gICAgICAgIG1hcmdpbjogOHB4O1xuICAgICAgICBib3JkZXI6IDRweCBzb2xpZCAkYmFja2dyb3VuZEdyZXk7XG4gICAgICAgIG1heC13aWR0aDogNzB2dztcbiAgICAgICAgbWF4LWhlaWdodDogMzB2aDtcbiAgICAgIH1cblxuICAgICAgLmRlc3Qtc2VsZWN0IHtcblxuICAgICAgICBwYWRkaW5nOiAwIDhweCAyZW0gOHB4O1xuXG4gICAgICAgIG1kLWlucHV0LWNvbnRhaW5lciB7XG4gICAgICAgICAgbWluLXdpZHRoOiAyMGVtO1xuICAgICAgICAgIG1heC13aWR0aDogNjV2dztcblxuICAgICAgICAgIGxhYmVsIHtcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdFxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRPRE8gSEFDSzogQ2hlY2sgaWYgdGhpcyBpcyBzdGlsbCBib3JrZWQgYWZ0ZXIgdXBncmFkaW5nIG9mZiBvZiBBbmd1bGFyIE1hdGVyaWFsIFJDNVxuICAgICAgICAgIC8vIFRoaXMgcHJldmVudHNcbiAgICAgICAgICAubWQtc2VsZWN0LXZhbHVlIGRpdiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLnJldmlldyB7XG4gICAgLmNvbnRlbnQge1xuXG4gICAgICBtZC1saXN0IHtcbiAgICAgICAgd2lkdGg6IDYwdnc7XG4gICAgICAgIG1pbi13aWR0aDogNDBlbTtcbiAgICAgICAgaGVpZ2h0OiA0MHZoO1xuXG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xuXG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgJGNrTGlzdEhlYWRlckJvcmRlcjtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRiYWNrZ3JvdW5kR3JleTtcblxuICAgICAgICBtZC1saXN0LWl0ZW0ge1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkYmFja2dyb3VuZEdyZXk7XG5cbiAgICAgICAgICAuc2VsZWN0aW9uIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IEdvdGhhbVJvdW5kZWRCb29rO1xuICAgICAgICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG5cbiAgICAgICAgICAgIC5pbWctY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgbWFyZ2luOiAuMmVtIDFlbSAuMmVtIC4yZW07XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDBweDtcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDBweDtcbiAgICAgICAgICAgICAgcGFkZGluZzogMXB4O1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkYmFja2dyb3VuZEdyZXk7XG5cbiAgICAgICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgbWF4LWhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuc2VsZWN0aW9uLWxpc3Qge1xuICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS4zZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmxvYWQtcGRmIHtcbiAgICAuY29udGVudCB7XG4gICAgICBtYXJnaW46IDJlbTtcbiAgICB9XG4gIH1cblxuICAuY2FuY2VsLWNoZWNrIHtcbiAgICAuY29udGVudCB7XG4gICAgICBwYWRkaW5nOiAyZW07XG4gICAgfVxuICB9XG5cbiAgLmNyb3AtcGFnZS1idG4ge1xuICAgIG1pbi13aWR0aDogNDBweDtcbiAgICBtaW4taGVpZ2h0OiA0MHB4O1xuICAgIGNvbG9yOiAkY2tDb3B5QmxhY2s7XG5cbiAgICAmLm1kLWJ1dHRvbltkaXNhYmxlZF0ge1xuICAgICAgY29sb3I6IHJnYmEoMCwwLDAsMC4zOClcbiAgICB9XG4gIH1cblxufVxuIiwiLmltcG9ydC1nb29nbGUtcm9zdGVycy1kaWFsb2cge1xuXG4gIC5uby1yb3N0ZXJzLW1lc3NhZ2Uge1xuICAgIHBhZGRpbmc6IDJlbTtcbiAgfVxuXG4gIG1kLWxpc3QtaXRlbS5saXN0LWl0ZW0ge1xuICAgIC5tZC1idXR0b24ge1xuICAgICAgY29sb3I6ICRja0NvcHlCbGFjaztcbiAgICB9XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgfVxuXG59IiwiLmludml0ZS10ZWFjaGVyLWRpYWxvZyB7XG5cbiAgbWF4LWhlaWdodDogOTAlO1xuXG4gIC5ib2R5IHtcbiAgICBib3JkZXItdG9wOiBub25lO1xuICAgIHBhZGRpbmc6IDAgMS41ZW0gMS41ZW0gMS41ZW07XG4gICAgd2lkdGg6IDYwMHB4O1xuICB9XG5cbiAgLmludml0ZS1jb2RlIHtcbiAgICBtYXJnaW4tdG9wOiAwLjI1ZW07XG4gICAgY29sb3I6ICRja1BlbkJsdWU7XG4gICAgZm9udC1zaXplOiA0MHB0O1xuICAgIGhlaWdodDogNTBweDtcbiAgICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkTWVkaXVtO1xuICB9XG5cbiAgYSB7XG4gICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gIH1cblxuICAuaGludCB7XG4gICAgY29sb3I6ICRsaWdodFRleHQ7XG4gIH1cblxuICBsaSB7XG4gICAgbWFyZ2luOiAwIDE1cHggNXB4IDE1cHg7XG5cbiAgICBzcGFuIHtcbiAgICAgIGNvbG9yOiAkY2tQZW5CbHVlO1xuICAgIH1cbiAgfVxuXG59IiwiLmxpbmstZGlhbG9nIHtcbiAgd2lkdGg6IDYwMHB4O1xuICBoZWlnaHQ6IDQwMHB4O1xuXG4gIC5jbG9zZS1saW5rLWRpYWxvZyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNnB4O1xuICAgIHJpZ2h0OiA2cHg7XG4gICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gIH1cblxuICBmb3JtIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgIHdpZHRoOiA3MCU7XG4gICAgaGVpZ2h0OiA3MHB4O1xuICB9XG5cbiAgLnRpdGxlIHtcbiAgICBtYXJnaW4tdG9wOiAxLjVlbTtcbiAgfVxuXG4gIC5hY3Rpb25zIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyZW07XG4gIH1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gIC5saW5rLWRpYWxvZyB7XG4gICAgd2lkdGg6IDQ1MHB4O1xuICAgIGhlaWdodDogMzc1cHg7XG4gIH1cbn1cbiIsIi5sb2FkaW5nLWRpYWxvZyB7XG4gIG1pbi13aWR0aDogMDtcblxuICBtZC1kaWFsb2ctY29udGVudCB7XG4gICAgd2lkdGg6IDg1cHg7XG4gICAgaGVpZ2h0OiA4NXB4O1xuICB9XG59XG4iLCIubW92ZS1hc3NpZ25tZW50LWRpYWxvZyB7XG4gIG1pbi13aWR0aDogaW5oZXJpdDtcblxuICAuYm9keSB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aWR0aDogMzhlbTtcbiAgICBwYWRkaW5nOiAxZW07XG5cbiAgICAuYm9keS1oZWFkZXIge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkYmFja2dyb3VuZEdyZXk7XG5cbiAgICAgIC5mb2xkZXIge1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcbiAgICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgZm9udC1mYW1pbHk6IEdvdGhhbVJvdW5kZWRNZWRpdW07XG4gICAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAgICAgbWFyZ2luOiAwLjVlbSAwIDAuNWVtIDEuM2VtO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1kLWxpc3Qge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1pbi1oZWlnaHQ6IDEyZW07XG4gICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuXG4gICAgICBtZC1saXN0LWl0ZW0ge1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuXG4gICAgICAgIHNwYW4sIGkge1xuICAgICAgICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgICAgICAgcGFkZGluZy1yaWdodDogMTZweDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZC1saXN0LWl0ZW0uc2VsZWN0ZWQge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuXG4gICAgICAgIHNwYW4sIGkge1xuICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHAge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgfVxufSIsIi5uZXctc2Vzc2lvbi1kaWFsb2cge1xuXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDM1ZW07XG5cbiAgcCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDAgMmVtO1xuICB9XG5cbiAgLnN1YiB7XG4gICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgZm9udC1zaXplOiA4NSU7XG4gIH1cblxuICAuaXRlbS1saXN0IHtcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgJGRpc2FibGVkR3JleTtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGRpc2FibGVkR3JleTtcbiAgICBtYXgtaGVpZ2h0OiAyOGVtO1xuICB9XG5cbiAgLmNsb3NlLWRpYWxvZywgLmdvLWJhY2sge1xuICAgIEBleHRlbmQgLm1kLWJ1dHRvbi5zcXVhcmU7XG4gICAgbWFyZ2luOiAwO1xuICAgIG1pbi13aWR0aDogNjBweDtcbiAgICB3aWR0aDogNjBweDtcbiAgfVxuXG4gIC50aXRsZSB7XG4gICAgcGFkZGluZzogMWVtIDA7XG5cbiAgICBwIHtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgfVxuICB9XG5cbiAgLmludmlzaWJsZSB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB9XG5cbiAgbWQtZGlhbG9nLWNvbnRlbnQge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cblxuICBtZC1saXN0IHtcbiAgICBvdmVyZmxvdzogYXV0bztcblxuICAgIC5jb2wgc3BhbiB7XG4gICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIC1tcy10ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuICB9XG5cbiAgLmZvcm0ge1xuICAgIHdpZHRoOiAyMGVtO1xuICAgIHRleHQtYWxpZ246IHN0YXJ0O1xuICB9XG5cbiAgLnBpY2sge1xuICAgIHBhZGRpbmc6IDFlbSAxZW0gMWVtIDA7XG4gIH1cblxuICAucm9zdGVyLWNvbG9yIHtcbiAgICBtYXJnaW4tdG9wOiAxZW07XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuXG4gICAgZGl2e1xuICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICB9XG4gIH1cbn1cbiIsIm1kLWRpYWxvZy5wcm8taW5mby1kaWFsb2cge1xuXG4gIG1heC1oZWlnaHQ6IDkwJTtcblxuICAuYm9keSB7XG4gICAgYm9yZGVyLXRvcDogbm9uZTtcbiAgfVxuXG4gIC5mZWF0dXJlcy1saXN0IHtcbiAgICBwYWRkaW5nOiAwIDAuMmVtIDEuNWVtIDAuMmVtO1xuXG4gICAgZGl2IHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIC5mZWF0dXJlIHtcbiAgICAgIG1hcmdpbjogLjdlbTtcbiAgICAgIG1pbi13aWR0aDogODAlO1xuXG4gICAgICBpbWcge1xuICAgICAgICB3aWR0aDogNC41ZW07XG4gICAgICB9XG5cbiAgICAgIC5mZWF0dXJlLWRlc2NyaXB0aW9uIHtcbiAgICAgICAgaDQge1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgICBwIHtcbiAgICAgICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgICAgbWFyZ2luLWxlZnQ6IDFlbTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIC5hY3Rpb24ge1xuICAgICAgd2lkdGg6IDI1MHB4O1xuXG4gICAgICAuYm9keS1zdWJ0ZXh0IHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBmb250LXNpemU6IDlwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuIiwibWQtZGlhbG9nLnByby13ZWxjb21lLWRpYWxvZyB7XG5cbiAgd2lkdGg6IDY1MHB4O1xuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NTBweCkge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cblxuICAuaW50cm8tdGV4dCB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5cbiAgLmJvZHkge1xuICAgIHBhZGRpbmc6IDVweCA1MHB4IDQwcHggNTBweDtcbiAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgfVxuXG4gIC5wcm8ge1xuICAgIGNvbG9yOiAkY2tQcm87XG4gIH1cblxuICAuc3RlcCB7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgfVxuXG4gIGEge1xuICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICB9XG5cbiAgLm1kLWJ1dHRvbi5jay1wcmltYXJ5IHtcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xuICB9XG59XG4iLCIucm9zdGVyLWxvY2stZGlhbG9nIHtcbiAgd2lkdGg6IDgxMHB4O1xuXG4gIC5sb2NrLW1lbnUtYm9keSB7XG4gICAgcGFkZGluZzogMWVtO1xuXG4gICAgLmxvY2stbWVudS1pbm5lciB7XG4gICAgICB3aWR0aDogODAlO1xuICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgfVxuXG4gICAgLmxvY2stdGl0bGUge1xuICAgICAgZm9udC1mYW1pbHk6IEdvdGhhbVJvdW5kZWRNZWRpdW07XG4gICAgICBmb250LXNpemU6IDEzcHg7XG4gICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICB9XG5cbiAgICAubG9jay1saXN0IHtcbiAgICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICB9XG5cbiAgICAubG9jay1saXN0LWl0ZW0ge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAgICB9XG5cbiAgICAvLyBBZGQgcGFkZGluZyBvbiB0aGUgMm5kKyBsaXN0IGl0ZW1zXG4gICAgLmxvY2stbGlzdC1pdGVtICsubG9jay1saXN0LWl0ZW0ge1xuICAgICAgcGFkZGluZy10b3A6IDEuNWVtO1xuICAgIH1cblxuICAgIC5tZC1sYWJlbCB7XG4gICAgICBtYXJnaW4tbGVmdDogNDBweDtcbiAgICB9XG5cbiAgICBtZC1jaGVja2JveCB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgfVxuXG4gICAgLmJvZHktc3VidGV4dCB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICB9XG4gIH1cbn1cblxuIiwiLnJlZnJlc2gtYXV0aC1kaWFsb2cge1xuICB3aWR0aDogNDEwcHg7XG5cbiAgLmJvZHkge1xuICAgIGJvcmRlci10b3A6IG5vbmU7XG4gIH1cblxuICBmb3JtIHtcbiAgICBwYWRkaW5nOiAwIDEuNWVtIDEuNWVtIDEuNWVtO1xuICB9XG5cbiAgLmVycm9yLW1lc3NhZ2VzIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA0MnB4O1xuICAgIGxlZnQ6IDEycHg7XG5cbiAgICBkaXYge1xuICAgICAgZm9udC1zaXplOiA3cHQ7XG4gICAgfVxuICB9XG5cbiAgaW5wdXQge1xuICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICB0ZXh0LXNoYWRvdzogMHB4IDBweCAwcHggJGNrSGVhZGVyR3JleTsgLyogY2hhbmdlIFtpbnB1dCBmb250XSBieSB0aGlzKi9cbiAgICAtd2Via2l0LXRleHQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIH1cblxuICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgIHdpZHRoOiA4MCU7XG4gICAgbWFyZ2luOiAxNnB4IDAgMjBweCAwO1xuICB9XG5cbiAgLm1kLWJ1dHRvbi5jay1wcmltYXJ5IHtcbiAgICBtYXJnaW46IDEwcHggNXB4IDAgNXB4O1xuICB9XG59Iiwic2F2aW5nLWluZGljYXRvciB7XG4gIG1hcmdpbi1sZWZ0OiAxZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgd2lkdGg6IDE1ZW07XG4gIGhlaWdodDogMTAwJTtcblxuICAmID4gKiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiBjYWxjKDUwJSAtIC43NWVtKTtcbiAgfVxuXG4gIGRpdiB7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgfVxufVxuIiwibWQtZGlhbG9nLnNoYXJlLWRpYWxvZyB7XG4gIG1pbi13aWR0aDogMThlbTtcbiAgbWF4LXdpZHRoOiA4MDBweDtcbiAgbWluLWhlaWdodDogMTFlbTtcbiAgbWF4LWhlaWdodDogOTYlO1xuXG4gIC5zaGFyZS1vcHRpb25zIHtcblxuICAgIC5zaGFyZS1vcHRpb24tcm93IHtcbiAgICAgIG1hcmdpbjogMjBweCAyMHB4IDAgMjBweDtcbiAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICBib3JkZXItcmFkaXVzOiAyNXB4O1xuICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMHB4IDEwcHggMXB4IHJnYmEoMCwwLDAsMC4yNSk7XG4gICAgICAtbW96LWJveC1zaGFkb3c6IDBweCAwcHggMTBweCAxcHggcmdiYSgwLDAsMCwwLjI1KTtcbiAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTBweCAxcHggcmdiYSgwLDAsMCwwLjI1KTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIG91dGxpbmU6IG5vbmU7XG5cbiAgICAgIEBtZWRpYSAobWluLXdpZHRoOiA5NjBweCkge1xuICAgICAgICBtYXJnaW46IDI1cHg7XG4gICAgICB9XG5cbiAgICAgIGltZyB7XG4gICAgICAgIHdpZHRoOiA2MHB4O1xuICAgICAgICBoZWlnaHQ6IDYwcHg7XG4gICAgICB9XG5cbiAgICAgIGg0LnRpdGxlIHtcbiAgICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgICBtYXJnaW46IDE1cHggMCAwIDA7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuc2hhcmUtb3B0aW9uLXJvdzpsYXN0LWNoaWxkIHtcbiAgICAgIG1hcmdpbjogMjBweDtcbiAgICB9XG4gIH1cblxuICAuc2hhcmUtZGlhbG9nLXRlYWNoZXIge1xuXG4gICAgLnNoYXJlLWRlc2NyaXB0aW9uIHtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIG1hcmdpbjogMCA0ZW07XG4gICAgICBoMyB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICAgICAgfVxuICAgIH1cbiAgICBtZC10YWItY29udGVudCB7XG4gICAgICB3aWR0aDogNDNlbTtcbiAgICAgIHBhZGRpbmc6IDAgNGVtIDNlbTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGOUY5Rjk7XG5cbiAgICAgIC5zaGFyZS1wcmV2aWV3IHtcbiAgICAgICAgbWFyZ2luLXRvcDogM2VtO1xuICAgICAgICAucHJldmlldy1idXR0b24ge1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgICB3aWR0aDogMTEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGltZzpob3ZlciB7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAuZW1haWwtaW5wdXQge1xuICAgICAgfVxuICAgICAgLmVtYWlsLWlucHV0LCAubGluay1pbnB1dCB7XG4gICAgICAgIGhlaWdodDogM2VtO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAuc3VibWl0LWJ1dHRvbiB7XG4gICAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMnB4O1xuICAgICAgICB9XG4gICAgICAgIC5zcGlubmVyIHtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLnJlYWRvbmx5LWxpbmsge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgfVxuICAgICAgICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLnNvY2lhbC1tZWRpYSB7XG4gICAgICAgIGhlaWdodDogM2VtO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5lbWFpbC1zdWNjZXNzIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiA1ZW0gMDtcbiAgICB3aWR0aDogNzAwcHg7XG4gIH1cbn1cbiIsIi5zaGFyZS13aXRoLXN0dWRlbnQtZGlhbG9nIHtcblxuICBtaW4td2lkdGg6IDY1ZW07XG5cbiAgLmRpYWxvZy10aXRsZSB7XG4gICAgcGFkZGluZy1sZWZ0OiAyZW07XG4gICAgcGFkZGluZy1yaWdodDogMmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggJGNrTGlzdEhlYWRlckJvcmRlcjtcblxuICAgIC5uYW1lIHtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICAgIH1cbiAgfVxuXG4gIC5saW5rIHtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICAgIHBhZGRpbmc6IC41ZW07XG4gICAgbGluZS1oZWlnaHQ6IDE1MCU7XG4gIH1cblxuICAuY2xhc3MtY29kZSB7XG4gICAgZm9udC1mYW1pbHk6ICRmb250Um91bmRlZE1lZGl1bTtcbiAgICBmb250LXNpemU6IDEyOHB0O1xuICAgIHBhZGRpbmc6IC41ZW0gMCAuN2VtIDA7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgfVxufVxuIiwibWQtdG9hc3QuX21kLWJvdHRvbS5jay1zbmFja2JhciB7XG4gIGxlZnQ6IDIwdnc7XG4gIGJvdHRvbTogMDtcbiAgd2lkdGg6IDYwdnc7XG5cbiAgLm1kLXRvYXN0LWNvbnRlbnQge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gIH1cblxuICAubWQtYnV0dG9uLmNrLXNuYWNrYmFyLWJ1dHRvbiB7XG4gICAgY29sb3I6ICRjbGFzc2tpY2tXZWJHcmVlbjtcbiAgfVxuXG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA5NTlweCkge1xuXG4gIG1kLXRvYXN0Ll9tZC1ib3R0b20uY2stc25hY2tiYXIge1xuICAgIGxlZnQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIHdpZHRoOiAxMDB2dztcblxuICB9XG5cbn1cbiIsIm1kLWRpYWxvZy5zaWdudXAtZGlhbG9nIHtcblxuICAgIC5jb250ZW50IHtcbiAgICAgIHdpZHRoOiA0NTBweDtcbiAgICAgIHBhZGRpbmc6IDJlbTtcblxuICAgICAgcCB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgbWFyZ2luOiAxZW0gMDtcbiAgICAgIH1cblxuICAgICAgLndoYXQtaXMtY2xhc3NraWNrIGkge1xuICAgICAgICBtYXJnaW4tdG9wOiAwLjhlbTtcbiAgICAgIH1cblxuICAgICAgLmFjdGlvbnMge1xuICAgICAgICBtYXJnaW46IDFlbSAwO1xuICAgICAgfVxuXG4gICAgICAubG9naW4tYnV0dG9uLCAuc2lnbnVwLWJ1dHRvbiB7XG4gICAgICAgIHdpZHRoOiAxNTBweDtcbiAgICAgIH1cbiAgICB9XG59XG4iLCIuc3Bpbm5lci1kaWFsb2cge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIC5zcGlubmVyLWRpYWxvZy1tZXNzYWdlIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gIH1cbn1cbiIsIm1kLWRpYWxvZy5zdHVkZW50LWNvZGUtZGlhbG9nIHtcbiAgd2lkdGg6IDQxMHB4O1xuICBtYXgtaGVpZ2h0OiA5NSU7XG5cbiAgLmJvZHkge1xuICAgIGJvcmRlci10b3A6IG5vbmU7XG4gIH1cblxuICBmb3JtIHtcbiAgICBwYWRkaW5nOiAwIDEuNWVtIDEuNWVtIDEuNWVtO1xuICB9XG5cbiAgLmVycm9yLW1lc3NhZ2VzIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA0MnB4O1xuICAgIGxlZnQ6IDEycHg7XG5cbiAgICBkaXYge1xuICAgICAgZm9udC1zaXplOiA3cHQ7XG4gICAgfVxuICB9XG5cbiAgaW5wdXQge1xuICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICB0ZXh0LXNoYWRvdzogMHB4IDBweCAwcHggJGNrSGVhZGVyR3JleTsgLyogY2hhbmdlIFtpbnB1dCBmb250XSBieSB0aGlzKi9cbiAgICAtd2Via2l0LXRleHQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIH1cblxuICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgIHdpZHRoOiA4MCU7XG4gICAgbWFyZ2luOiAxNnB4IDAgMjBweCAwO1xuICB9XG5cbiAgLm1kLWJ1dHRvbi5jay1wcmltYXJ5IHtcbiAgICBtYXJnaW46IDEwcHggNXB4IDAgNXB4O1xuICB9XG59XG4iLCJtZC1kaWFsb2cudGVhY2hlci1mZWVkYmFjay1kaWFsb2cge1xuICBtaW4td2lkdGg6IDE4ZW07XG4gIG1pbi1oZWlnaHQ6IDExZW07XG5cbiAgLmNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDJlbTtcbiAgfVxuXG4gIC5hY3Rpb25zIHtcbiAgICBtYXJnaW46IDFlbTtcbiAgfVxufVxuIiwiXG4udG9vbGJhci1tZW51LWZsZXhib3gtd3JhcHBlciB7XG4gIGhlaWdodDogMDtcbiAgd2lkdGg6IDA7XG4gIGRpc3BsYXk6IGlubGluZTtcbn1cblxudG9vbGJhci1tZW51IHtcbiAgZGlzcGxheTogbm9uZTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0b3A6IDIuNWVtO1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiAxMzAwO1xuICBwYWRkaW5nOiAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIC45NSk7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgYm9yZGVyOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuICBtaW4td2lkdGg6IDRlbTtcbiAgY29sb3I6ICRja0hlYWRlckdyZXk7XG5cbiAgLm1kLWJ1dHRvbiB7XG4gICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gIH1cblxuICBkaXYudG9vbGJhci1pdGVtLWNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICAubWVudS1pdGVtIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgfVxuXG4gIC5tZW51LWl0ZW0ubWQtYnV0dG9uIHtcblxuICAgIC5jb250ZW50cyB7XG4gICAgICBAaW5jbHVkZSBmbGV4LXJvdyhjZW50ZXIsIGNlbnRlcik7XG4gICAgfVxuXG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBtaW4td2lkdGg6IDFlbTtcbiAgICBtaW4taGVpZ2h0OiAxZW07XG5cbiAgICAubWQtcmlwcGxlLWNvbnRhaW5lciB7XG4gICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgIH1cbiAgfVxufVxuXG5cbiIsIi51c2VyLW5vdGlmaWNhdGlvbi10ZXh0IHtcbiAgcGFkZGluZzogMmVtO1xufVxuXG4udXNlci1ub3RpZmljYXRpb24tYWN0aW9ucyB7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW4tYm90dG9tOiAxZW07XG4gIG1hcmdpbi1yaWdodDogMWVtO1xufVxuIiwiLy8gdGVhY2hlciBvbiB3ZWJcblxuLyogU3R5bGVzIGZvciBoZWFkZXIgaW4gdGVhY2hlciBvbiB3ZWIgYW5kIGxvZ2luICovXG4uaGVhZGVyIHtcbiAgQGluY2x1ZGUgZmxleC1yb3coY2VudGVyLCBzcGFjZS1iZXR3ZWVuLCBub3dyYXApO1xuICBoZWlnaHQ6ICR0ZWFjaGVySGVhZGVySGVpZ2h0O1xuICBwYWRkaW5nOiAwIDFlbTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWVlZWY7XG5cbiAgLmJhci1pdGVtIHtcbiAgICBAaW5jbHVkZSBmbGV4LXJvdyhjZW50ZXIsIGNlbnRlcik7XG4gIH1cblxuICAuYm9keS1zdWJ0ZXh0IHtcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gIH1cblxuICAuY2xhc3NraWNrLWhlYWRlciB7XG4gICAgQGluY2x1ZGUgZmxleCgxLCAxLCBhdXRvKTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gIH1cblxuICAuY2suZmEuY2stc2VhcmNoIHtcbiAgICBjb2xvcjogJGNrR3JlZW47XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGxlZnQ6IDEuODVlbTtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5cbiAgbWQtaW5wdXQtY29udGFpbmVyIHtcbiAgICBtYXJnaW46IDAgMDtcbiAgfVxuXG4gIG1kLWlucHV0LWNvbnRhaW5lciAubWQtZXJyb3JzLXNwYWNlciB7XG4gICAgbWluLWhlaWdodDogMDtcbiAgfVxuXG4gIGlucHV0IHtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgcGFkZGluZy1sZWZ0OiAzNHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgfVxuXG4gIC5tZC1idXR0b24ubWQtZmFiLFxuICAubWQtYnV0dG9uLm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsXG4gIC5tZC1idXR0b24ubWQtZmFiOmVuYWJsZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRja0dyZWVuO1xuICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xuICAgIGhlaWdodDogNDBweDtcbiAgICB3aWR0aDogNDBweDtcbiAgICBtYXJnaW4tbGVmdDogMS41ZW07XG5cbiAgICAuaW5uZXIge1xuICAgICAgQGluY2x1ZGUgZmxleC1yb3coY2VudGVyLCBjZW50ZXIsIHdyYXApO1xuICAgIH1cbiAgfVxufVxuXG4uc2hhcmUtZGlhbG9nLFxuLmxpc3QtaGVhZGVyLFxuLnRlYWNoZXItYXNzaWdubWVudHMge1xuICAvLy8vIGFkanVzdHMgdGhlIHdheSByaXBwbGVzIGxvb2sgaW4gYnV0dG9ucyB3aGVyZSBjb3JuZXJzIGFyZSBub3Qgcm91bmRlZFxuICAubWQtYnV0dG9uIC5tZC1yaXBwbGUtY29udGFpbmVyIHtcbiAgICBib3JkZXItcmFkaXVzOiAwO1xuICB9XG59XG5cbm1kLWxpc3Qge1xuICBwYWRkaW5nOiAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tMaXN0QmFja2dyb3VuZDtcbn1cblxuLy8gRGVmaW5lcyB0aGUgc3R5bGVzIHRoYXQgc2hvdWxkIGJlIHRoZSBzYW1lIGluIGhlYWRlciBhbmQgZWFjaCBsaXN0IGl0ZW1cbi5saXN0LWhlYWRlcixcbm1kLWxpc3QtaXRlbS5saXN0LWl0ZW0ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICBwYWRkaW5nOiAwIDE2cHg7XG4gIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuXG4gIC5oaWRlIHtcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG4gIH1cblxuICAuY2stY2Fycm90IHtcbiAgICBAaW5jbHVkZSBmbGV4LXJvdyhjZW50ZXIsIGZsZXgtc3RhcnQsIHdyYXApO1xuICAgIGZvbnQtc2l6ZTogMTFweDtcbiAgICBtYXJnaW4tbGVmdDogMC4zZW07XG4gIH1cblxuICBkaXYuX21kLWxpc3QtaXRlbS1pbm5lciB7XG4gICAgZm9udC1mYW1pbHk6ICRmb250Um91bmRlZEJvb2s7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMDgwZW07XG4gIH1cblxuICAvLyBEZWZpbmVzIHRoZSBzdHlsZXMgdGhhdCBhcmUgY29tbW9uIGZvciBhbGwgY29sdW1uc1xuICAuY29sIHtcbiAgICBAaW5jbHVkZSBmbGV4LXJvdyhjZW50ZXIsIGZsZXgtc3RhcnQsIG5vd3JhcCk7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBoZWlnaHQ6ICR0ZWFjaGVyTGlzdEhlYWRlckhlaWdodDtcbiAgICBtYXJnaW46IDAgOHB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcblxuICAgIGRpdiB7XG4gICAgICBAaW5jbHVkZSBmbGV4LXJvdyhjZW50ZXIsIGZsZXgtc3RhcnQsIG5vd3JhcClcbiAgICB9XG4gIH1cbn1cblxubWQtbGlzdC1pdGVtLmxpc3QtaXRlbS5fbWQtYnV0dG9uLXdyYXAge1xuICBwYWRkaW5nOiAwO1xufVxuXG5tZC1saXN0LWl0ZW0ubGlzdC1pdGVtIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRja0xpc3RCYWNrZ3JvdW5kO1xuICBoZWlnaHQ6ICR0ZWFjaGVyTGlzdEl0ZW1IZWlnaHQ7XG4gIGJveC1zaGFkb3c6IDAgNXB4IDVweCAjY2NjO1xufVxuXG4ubGlzdC1oZWFkZXIge1xuICBoZWlnaHQ6ICR0ZWFjaGVyTGlzdEhlYWRlckhlaWdodDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNrTGlzdEhlYWRlcjtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRja0xpc3RIZWFkZXJCb3JkZXI7XG4gIGZvbnQtZmFtaWx5OiBHb3RoYW1Sb3VuZGVkTWVkaXVtO1xuXG4gICoge1xuICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xuICB9XG59XG5cbi5saXN0LWhlbHBlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgcGFkZGluZzogMmVtO1xuICBmb250LXNpemU6IDE0MCU7XG5cbiAgc3Bhbi5jay1ncmVlbiB7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG59XG4iLCIuYWNjb3VudC1sb2dpbiB7XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICB3aWR0aDogMTAwdnc7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vYXNzZXRzL2ltYWdlcy90aWxlLnBuZycpO1xuICBwYWRkaW5nOiAwIDhweCAyMHB4IDhweDtcblxuICAuaGVhZGVyLWJ1dHRvbnMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctdG9wOiAuNWVtO1xuICB9XG5cbiAgLm1ham9yLWhlYWRlciB7XG4gICAgaW1nIHtcbiAgICAgIHdpZHRoOiA2ZW07XG4gICAgfVxuICAgIG1hcmdpbi1ib3R0b206IC4yNWVtO1xuICB9XG5cbiAgLmJvZHkge1xuICAgIHdpZHRoOiA0MjVweDtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcblxuICAgIC5ib2R5LWhlYWRlciB7XG4gICAgICBoZWlnaHQ6IDUuNmVtO1xuXG4gICAgICAuY2xhc3NraWNrLWhlYWRlciB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTNwdDtcbiAgICAgIH1cblxuICAgICAgLmVuZCB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgbWF4LXdpZHRoOiA5MHB4O1xuICAgICAgfVxuXG4gICAgICAuZW5kIC5tZC1idXR0b24ge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuYm9keS1jb250ZW50IHtcbiAgICAgIHBhZGRpbmc6IDAgMi41ZW0gMjBweCAyLjVlbTtcblxuICAgICAgLmVycm9yLW1lc3NhZ2VzIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDQycHg7XG4gICAgICAgIGxlZnQ6IDEycHg7XG5cbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBmb250LXNpemU6IDdwdDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbnB1dCB7XG4gICAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgdGV4dC1zaGFkb3c6IDBweCAwcHggMHB4ICRja0hlYWRlckdyZXk7IC8qIGNoYW5nZSBbaW5wdXQgZm9udF0gYnkgdGhpcyovXG4gICAgICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIH1cblxuICAgICAgbWQtaW5wdXQtY29udGFpbmVyLmVtYWlsLW9yLXVzZXJuYW1lLFxuICAgICAgbWQtaW5wdXQtY29udGFpbmVyLnBhc3N3b3JkIHtcbiAgICAgICAgbWFyZ2luOiAxNnB4IDAgMjBweCAwO1xuICAgICAgfVxuXG4gICAgICBtZC1jaGVja2JveCB7XG4gICAgICAgIG1hcmdpbjogMCAwIDIwcHggMDtcbiAgICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgICAgIGZvbnQtZmFtaWx5OiBHb3RoYW1Sb3VuZGVkTWVkaXVtO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTUpO1xuICAgICAgfVxuXG4gICAgICAubWQtYnV0dG9uIHtcbiAgICAgICAgbWFyZ2luOiAwIDVweDtcblxuICAgICAgICAmLmNrLXByaW1hcnkge1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHggO1xuICAgICAgICB9XG5cbiAgICAgICAgJi5nb29nbGUtc2lnbi1pbiB7XG4gICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAyNHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhIHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgfVxuXG4gICAgICAuc2VwYXJhdG9yIHtcbiAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kR3JleTtcbiAgICAgICAgbWFyZ2luOiAyMHB4IDAgMjBweCAwO1xuICAgICAgfVxuXG4gICAgICAub3Ige1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIG1hcmdpbjogNXB4IDA7XG4gICAgICB9XG5cbiAgICAgIHAge1xuICAgICAgICBtYXJnaW46IDAgMCAxNnB4IDA7XG4gICAgICAgIGNvbG9yOiAkY2tXYXJuO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICB9XG5cbiAgICAgIC5tZC1idXR0b24uc2lnbnVwLWJ1dHRvbiB7XG4gICAgICAgIG1hcmdpbjogNnB4IDVweDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubG9hZGluZyB7XG4gICAgbWFyZ2luLXRvcDogOGVtO1xuICAgIGhlaWdodDogMTAwcHg7XG4gICAgd2lkdGg6IDEwMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgfVxufVxuXG4ubWQtZGlhbG9nLWNvbnRhaW5lci5uby1hY2NvdW50IHtcblxuICAuZGlhbG9nLWNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDFlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cbn1cbiIsIi5hbm9uLXN0dWRlbnQtYXNzaWdubWVudC1vdmVydmlldyB7XG4gIEBleHRlbmQgLnN0dWRlbnQtYWNjb3VudC1hc3NpZ25tZW50LW92ZXJ2aWV3O1xuXG4gIC5hc3NpZ25tZW50LXF1ZXN0aW9uLWhlYWRlciB7XG5cbiAgICAuY2xhc3MtY29kZS1saW5rIHtcbiAgICAgIG1hcmdpbjogMCAxZW07XG4gICAgICBwYWRkaW5nLXRvcDogMC4zZW07XG4gICAgfVxuXG4gICAgLnVzZXJuYW1lIHtcbiAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgIH1cblxuICB9XG59XG4iLCIuYWRtaW4ge1xuXG4gIGhlaWdodDogMTAwdmg7XG5cbiAgLmNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDFlbTtcblxuICAgIC51c2VyLWlkIHtcbiAgICAgIHdpZHRoOiAyMGVtO1xuICAgIH1cblxuICAgIC5zZWN0aW9uIHtcbiAgICAgIHBhZGRpbmc6IDFlbSAwO1xuXG4gICAgICAuY29udHJhY3QtZGVsZXRlIHtcbiAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi5hbm9uLXN0dWRlbnQtYXNzaWdubWVudC13b3JrIHtcbiAgaGVpZ2h0OiAxMDB2aDtcblxuICBAZXh0ZW5kIC5zdHVkZW50LWFjY291bnQtYXNzaWdubWVudC13b3JrO1xuXG4gIC5hc3NpZ25tZW50LXF1ZXN0aW9uLWhlYWRlciB7XG5cbiAgICAuY2xhc3MtY29kZS1saW5rIHtcbiAgICAgIG1hcmdpbjogMCAxZW07XG4gICAgICBwYWRkaW5nLXRvcDogMC4zZW07XG4gICAgfVxuXG4gICAgLnVzZXJuYW1lIHtcbiAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgIH1cbiAgfVxufVxuIiwiLmFzc2lnbm1lbnQtZWRpdC1xdWVzdGlvbiB7XG5cbiAgaGVpZ2h0OiAxMDB2aDtcblxuICAuYXNzaWdubWVudC1xdWVzdGlvbi1oZWFkZXIge1xuXG4gICAgLmNsYXNza2ljay1oZWFkZXIge1xuICAgICAgY29sb3I6ICM2RDZFNzA7XG4gICAgfVxuICB9XG5cbiAgLmVycm9yIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAxLjVlbTtcbiAgfVxufVxuIiwiLmFzc2lnbm1lbnQtZWRpdCB7XG5cbiAgLmhlYWRlciB7XG4gICAgLmxlZnQtc2lkZSB7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuXG4gICAgLnNwYWNlciB7XG4gICAgICB3aWR0aDogY2FsYygxNWVtICsgNjBweCk7XG4gICAgfVxuICB9XG5cbiAgLmxvYWRpbmcsIC5lcnJvciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGhlaWdodDogMTAwdmg7XG5cbiAgICAubG9hZGluZy10ZXh0LCAuZXJyb3ItdGV4dCB7XG4gICAgICBwYWRkaW5nOiAyZW07XG4gICAgfVxuICB9XG5cbiAgLmJvZHkge1xuICAgIGJhY2tncm91bmQ6ICRiYWNrZ3JvdW5kR3JleTtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICBoZWlnaHQ6IGNhbGMoMTAwdmggLSAjeyR0ZWFjaGVySGVhZGVySGVpZ2h0fSk7XG4gICAgd2lkdGg6IDEwMHZ3O1xuXG4gICAgJiA+ICoge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtaW4td2lkdGg6IDUwZW07XG4gICAgfVxuICB9XG5cbiAgLm1ldGFkYXRhIHtcblxuICAgIHBhZGRpbmc6IC41ZW0gMDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcblxuICAgICYgPiBkaXYge1xuICAgICAgbWFyZ2luOiAwIDEuNWVtO1xuICAgIH1cblxuICAgIC5hY2Nlc3Mtb3B0aW9uIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxZW07XG4gICAgICB3aWR0aDogMjBlbTtcbiAgICB9XG5cbiAgICAuc2hhcmUge1xuICAgICAgbWFyZ2luOiAxLjVlbSAwIDAgLjVlbTtcbiAgICAgIGhlaWdodDogMi43NWVtO1xuICAgICAgbWluLXdpZHRoOiA0ZW07XG4gICAgICBmb250LXNpemU6IDEycHQ7XG4gICAgfVxuXG4gICAgbWQtaW5wdXQtY29udGFpbmVyIC5tZC1yZXNpemUtaGFuZGxlIHtcbiAgICAgIGJvdHRvbTogNHB4O1xuICAgIH1cbiAgfVxuXG4gIC5xdWVzdGlvbnMge1xuXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItd2lkdGg6IDAgMCAxcHggMDtcbiAgICBib3JkZXItY29sb3I6ICRkaXNhYmxlZEdyZXk7XG5cbiAgICBiYWNrZ3JvdW5kOiAkYmFja2dyb3VuZEdyZXk7XG5cbiAgICAuc2VjdGlvbi1oZWFkZXIge1xuICAgICAgQGluY2x1ZGUgZmxleC1yb3coZmxleC1zdGFydCwgc3BhY2UtYmV0d2Vlbik7XG4gICAgICBwYWRkaW5nOiAxZW0gMS41ZW07XG4gICAgfVxuXG4gICAgLnF1ZXN0aW9ucy1jb250YWluZXIge1xuICAgICAgcGFkZGluZzogMCAxZW0gMmVtIDFlbTtcblxuICAgICAgJiA+ICoge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHdpZHRoOiAxNmVtO1xuICAgICAgICBoZWlnaHQ6IDEyZW07XG4gICAgICAgIG1hcmdpbjogMWVtIDFlbTtcblxuICAgICAgfVxuXG4gICAgICAucXVlc3Rpb24ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgICBib3gtc2hhZG93OiAycHggNXB4IDVweCAjY2NjO1xuXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgICAgICAmID4gKiB7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgLnF1ZXN0aW9uLW1hc2sge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZU1hc2s7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiA0NXB4O1xuICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICBsZWZ0OiAwO1xuXG4gICAgICAgICAgJiA+ICoge1xuICAgICAgICAgICAgaGVpZ2h0OiA0NXB4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5wYWdlLW51bWJlciwgLm1lbnUtYnV0dG9uIHtcbiAgICAgICAgICAgIHdpZHRoOiA0NXB4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5xdWVzdGlvbi1zY29yZSB7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICB3aWR0aDogNWVtO1xuICAgICAgICAgICAgaGVpZ2h0OiAyLjc1ZW07XG5cbiAgICAgICAgICAgIGlucHV0IHtcbiAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC5tZW51LWJ1dHRvbiB7XG5cbiAgICAgICAgICAgIG1kLW1lbnUge1xuICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAubWQtYnV0dG9uIHtcbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgICAgICAgd2lkdGg6IDQ1cHg7XG4gICAgICAgICAgICAgIGhlaWdodDogNDVweDtcbiAgICAgICAgICAgICAgbWluLXdpZHRoOiA0NXB4O1xuICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTI1JTtcblxuICAgICAgICAgICAgICAubWQtcmlwcGxlLWNvbnRhaW5lciB7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGdyYWRlLWlucHV0IHtcbiAgICAgICAgICAgIHdpZHRoOiA2ZW07XG4gICAgICAgICAgICBoZWlnaHQ6IDJlbTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFzc2lnbm1lbnQtc2hlZXQge1xuICAgICAgICAgIHdpZHRoOiAkdGVhY2hlckFzc2lnbm1lbnRFZGl0U2hlZXRXaWR0aDtcbiAgICAgICAgICBoZWlnaHQ6ICR0ZWFjaGVyQXNzaWdubWVudEVkaXRTaGVldEhlaWdodDtcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuXG4gICAgICAgICAgLyogT3VyIGNhbnZhcyBpcyAyOjEsIHNvIGNhbGN1bGF0ZSBoZWlnaHQgYmFzZWQgb24gd2lkdGggKi9cbiAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgaGVpZ2h0OiBjYWxjKDIgKiAjeyR0ZWFjaGVyQXNzaWdubWVudEVkaXRTaGVldFdpZHRofSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5hZGQtcXVlc3Rpb24ge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBmb250LXNpemU6IGluaGVyaXQ7XG5cbiAgICAgICAgYm9yZGVyLXN0eWxlOiBkYXNoZWQ7XG4gICAgICAgIGJvcmRlci13aWR0aDogMnB4O1xuICAgICAgICBib3JkZXItY29sb3I6ICRja0dyZWVuO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAwO1xuXG4gICAgICAgIC5tZC1yaXBwbGUtY29udGFpbmVyIHtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLndoaXRlLXNwYWNlciB7XG4gICAgaGVpZ2h0OiAuNDI3NWVtO1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICB9XG5cbiAgLnJvc3RlcnMge1xuICAgIHBhZGRpbmctYm90dG9tOiAxNWVtO1xuXG4gICAgLmhpZ2hsaWdodCB7XG4gICAgICBiYWNrZ3JvdW5kOiAkY2tHcmVlbjtcbiAgICAgIGNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50O1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgJGNrR3JlZW47XG4gICAgfVxuXG4gICAgLmJhci1pdGVtLndpZGUsIC5jb2wud2lkZSB7XG4gICAgICB3aWR0aDogMTQwcHg7XG5cbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgfVxuXG4gICAgLm1kLWJ1dHRvbi10ZXh0IHtcbiAgICAgIGZvbnQtZmFtaWx5OiBHb3RoYW1Sb3VuZGVkTWVkaXVtO1xuXG4gICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuMDEwZW07XG4gICAgfVxuXG4gICAgLmNvbCB7XG5cbiAgICAgICYud2lkZSB7XG4gICAgICAgIEBpbmNsdWRlIGZsZXgtcm93KGNlbnRlciwgY2VudGVyKTtcbiAgICAgIH1cblxuICAgICAgJi5oZWxwcyB7XG4gICAgICAgIEBpbmNsdWRlIGZsZXgtcm93KGNlbnRlciwgY2VudGVyKTtcbiAgICAgICAgd2lkdGg6IDEwMHB4O1xuICAgICAgfVxuXG4gICAgICAmLnJvc3Rlci1uYW1lLCAucm9zdGVyLW5hbWUge1xuICAgICAgICB3aWR0aDogMTVlbTtcbiAgICAgICAgbWluLXdpZHRoOiAxNWVtO1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgfVxuXG4gICAgICAucm9zdGVyLWNpcmNsZSB7XG4gICAgICAgIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgICAgIH1cblxuICAgICAgJi5yb3N0ZXItcmVtb3ZlIHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgICAgd2lkdGg6IDYwcHg7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1kLWxpc3QtaXRlbS5saXN0LWJ1dHRvbiAqIHtcbiAgY29sb3I6ICRja0dyZWVuICFpbXBvcnRhbnQ7XG4gIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRNZWRpdW0gIWltcG9ydGFudDtcbiAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2UgIWltcG9ydGFudDtcbn1cblxuLm1vdmUtcXVlc3Rpb24tZGlhbG9nIHtcbiAgLmRpYWxvZy10aXRsZSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGJvcmRlci1ib3R0b206IHNvbGlkIDFweCAkY2tMaXN0SGVhZGVyQm9yZGVyO1xuICAgIHBhZGRpbmctbGVmdDogMmVtO1xuICAgIHBhZGRpbmctcmlnaHQ6IDJlbTtcbiAgfVxuXG4gIG1kLWRpYWxvZy1jb250ZW50IHtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1heC1oZWlnaHQ6IDMwZW07XG4gICAgbWluLWhlaWdodDogNGVtO1xuICAgIGJvcmRlci1ib3R0b206IHNvbGlkIDFweCAkY2tMaXN0SGVhZGVyQm9yZGVyO1xuXG4gICAgbWQtbGlzdC1pdGVtIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgaGVpZ2h0OiA0ZW07XG5cbiAgICAgICoge1xuICAgICAgICBmb250LWZhbWlseTogJGZvbnRSb3VuZGVkQm9vaztcbiAgICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi5jaG9vc2Utcm9zdGVyLWRpYWxvZyB7XG4gIC5kaWFsb2ctdGl0bGUge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggJGNrTGlzdEhlYWRlckJvcmRlcjtcbiAgfVxuXG4gIC5zcGFjZXIge1xuICAgIHdpZHRoOiA2MHB4O1xuICB9XG5cbiAgbWQtZGlhbG9nLWNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDA7XG4gICAgd2lkdGg6IDIwZW07XG4gICAgbWF4LWhlaWdodDogMzBlbTtcbiAgICBtaW4taGVpZ2h0OiA0ZW07XG4gICAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICRja0xpc3RIZWFkZXJCb3JkZXI7XG5cbiAgICBtZC1saXN0LWl0ZW0ge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICBoZWlnaHQ6IDRlbTtcblxuICAgICAgJi5yb3N0ZXIgKiB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICAgICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAubmV3LXJvc3Rlci1mb3JtIHtcbiAgICAgIHBhZGRpbmctdG9wOiAwO1xuICAgIH1cblxuICAgIC5yb3N0ZXItY29sb3Ige1xuICAgICAgbWFyZ2luLXRvcDogMWVtO1xuICAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XG5cbiAgICAgIGRpdntcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLmFzc2lnbm1lbnQtdGVhY2hlci1mZWVkYmFjay1xdWVzdGlvbiB7XG4gIGhlaWdodDogMTAwdmg7XG4gIHdpZHRoOiAxMDB2dztcblxuICAuYXNzaWdubWVudC1xdWVzdGlvbi1oZWFkZXIge1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICBjb2xvcjogd2hpdGU7XG5cbiAgICAubWQtYnV0dG9uLmJhci1pdGVtIHtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB9XG5cbiAgICBoZWxwLWluYm94IHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxZW07XG4gICAgfVxuXG4gICAgLnByaW1hcnktbmF2LnRpdGxlIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJwdDtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB9XG4gIH1cblxuICAuZXJyb3Ige1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBmb250LXNpemU6IDEuNWVtO1xuICB9XG5cbn1cbiIsIi5jb250cmFjdC11c2VyLWVkaXQge1xuXG4gIC5sZWZ0LXNpZGUge1xuICAgIGhlaWdodDogaW5oZXJpdDtcbiAgfVxuXG4gIC5lcnJvciwgLmxvYWRpbmcge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuXG4gIC5lZGl0LXByb2ZpbGUtY29sdW1uIHtcbiAgICBwYWRkaW5nOiAxZW07XG5cbiAgICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgbWQtY2hlY2tib3gge1xuICAgICAgbWFyZ2luLXRvcDogMC41ZW07XG4gICAgICBtYXJnaW4tbGVmdDogMC41ZW07XG4gICAgfVxuXG4gICAgLm1kLWJ1dHRvbiB7XG4gICAgICBtYXJnaW4tdG9wOiAxLjZlbTtcbiAgICAgIG1heC13aWR0aDogNTAlO1xuICAgIH1cbiAgfVxuXG5cbn0iLCIuYXNzaWdubWVudHMtbGlzdCB7XG4gIG1pbi1oZWlnaHQ6IGNhbGMoMTAwdmgpO1xuICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoKTtcblxuICAuYnJlYWRjcnVtYnMge1xuXG4gICAgbWluLWhlaWdodDogJHRlYWNoZXJCcmVhZGNydW1iO1xuICAgIG1heC1oZWlnaHQ6ICR0ZWFjaGVyQnJlYWRjcnVtYjtcblxuICAgIC5tZC1idXR0b24ge1xuICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XG4gICAgICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgICAgIGZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgICB9XG4gICAgLmJyZWFkY3J1bWIge1xuICAgICAgbWFyZ2luLWxlZnQ6IDE2cHg7XG4gICAgfVxuICB9XG5cbiAgLmxpc3QtaGVhZGVyIHtcbiAgICAubWQtYnV0dG9uIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICAmLm1vZGlmaWVkIHtcbiAgICAgICAgd2lkdGg6IDE0MHB4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG1kLWxpc3Qge1xuICAgIG1pbi1oZWlnaHQ6ICR0ZWFjaGVyTGlzdEhlaWdodDtcbiAgICBtYXgtaGVpZ2h0OiAkdGVhY2hlckxpc3RIZWlnaHQ7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gIH1cblxuICBtZC1saXN0LndpdGgtYnJlYWRjcnVtYnMge1xuICAgIG1pbi1oZWlnaHQ6ICR0ZWFjaGVyTGlzdEhlaWdodFdpdGhCcmVhZGNydW1iO1xuICAgIG1heC1oZWlnaHQ6ICR0ZWFjaGVyTGlzdEhlaWdodFdpdGhCcmVhZGNydW1iO1xuICB9XG5cblxuICAubmV3bHktY29waWVkLWxpc3QtaXRlbSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGhpZ2hsaWdodFByaW1hcnk7XG4gIH1cblxuICAuZXJyb3IsIC5sb2FkaW5nIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cblxuICBtZC1saXN0LWl0ZW0gLmNvbC5uYW1lIGkge1xuICAgIHBhZGRpbmctcmlnaHQ6IDE2cHg7XG4gIH1cblxuICAubGlzdC1oZWFkZXIsXG4gIG1kLWxpc3QtaXRlbSB7XG5cbiAgICAuY29sIHtcblxuICAgICAgJi5uYW1lIHtcbiAgICAgICAgLnRydW5jYXRlIHtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAmLm1vZGlmaWVkIHtcbiAgICAgICAgd2lkdGg6IDE0MHB4O1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG4gICAgICB9XG5cbiAgICAgICYuY2hlY2tzLCAuY2hlY2tzLFxuICAgICAgJi5oZWxwcywgLmhlbHBzIHtcblxuICAgICAgICBAaW5jbHVkZSBmbGV4LXJvdyhjZW50ZXIsIGNlbnRlciwgbm93cmFwKTtcblxuICAgICAgICBtaW4td2lkdGg6IDgwcHg7XG4gICAgICAgIHdpZHRoOiA4MHB4O1xuXG4gICAgICAgIHNwYW4uY2hlY2sge1xuICAgICAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNwYW4uaGVscCB7XG4gICAgICAgICAgY29sb3I6ICRja1llbGxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHNwYW4ucmVxdWVzdC1jYXJyb3Qge1xuICAgICAgICAgIEBpbmNsdWRlIGZsZXgtcm93KGNlbnRlciwgY2VudGVyLCBub3dyYXApO1xuICAgICAgICAgIG1hcmdpbjogMCAwLjJlbTtcbiAgICAgICAgICBtaW4td2lkdGg6IDFlbTtcbiAgICAgICAgICBtYXgtd2lkdGg6IDFlbTtcbiAgICAgICAgICBtaW4taGVpZ2h0OiAxZW07XG4gICAgICAgICAgbWF4LWhlaWdodDogMWVtO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNpcmNsZS1ncmVlbixcbiAgICAgICAgLmNpcmNsZS15ZWxsb3cge1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgICB3aWR0aDogMzVweDtcbiAgICAgICAgICBoZWlnaHQ6IDM1cHg7XG5cbiAgICAgICAgICBpLmNrLWhhbmQge1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC5jaXJjbGUtZ3JlZW4ge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRja1llbGxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIC5jaXJjbGUteWVsbG93IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIC50b29scywgJi50b29scyB7XG4gICAgICAgIHdpZHRoOiAxMjBweDtcbiAgICAgIH1cblxuICAgICAgJi50b29sczpub3QoW2Rpc2FibGVkXSk6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLmNvbnRyYWN0LXVzZXJzLWxpc3Qge1xuXG4gIC5oZWFkZXIge1xuICAgIG1kLXNlbGVjdCB7XG4gICAgICB3aWR0aDogMTJlbTtcbiAgICB9XG4gIH1cblxuICAubGlzdC1oZWFkZXIsIG1kLWxpc3QtaXRlbSB7XG4gICAgLm1kLWJ1dHRvbiB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgICAgcGFkZGluZy1sZWZ0OiAwLjVlbTtcbiAgICB9XG4gIH1cblxuICAuZXJyb3IsIC5sb2FkaW5nIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cblxuICBtZC1saXN0IHtcbiAgICBtaW4taGVpZ2h0OiAkdGVhY2hlckxpc3RIZWlnaHQ7XG4gICAgbWF4LWhlaWdodDogJHRlYWNoZXJMaXN0SGVpZ2h0O1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICB9XG59IiwiLmZvcmdvdC1wYXNzd29yZCB7XG4gIGhlaWdodDogMTAwdmg7XG4gIHdpZHRoOiAxMDB2dztcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9hc3NldHMvaW1hZ2VzL3RpbGUucG5nJyk7XG4gIHBhZGRpbmc6IDAgOHB4IDIwcHggOHB4O1xuICBvdmVyZmxvdzogYXV0bztcblxuICAubWFqb3ItaGVhZGVyIHtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgbWF4LWhlaWdodDogMjV2aDtcbiAgICBsZXR0ZXItc3BhY2luZzogJGxldHRlclNwYWNpbmdMaWdodDtcbiAgfVxuXG4gIC5ib2R5IHtcbiAgICB3aWR0aDogMzkwcHg7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG5cbiAgICAuYm9keS1oZWFkZXIge1xuXG4gICAgICBoZWlnaHQ6IDRlbTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICBkaXYge1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgIC5jbGFzc2tpY2staGVhZGVyIHtcbiAgICAgICAgZm9udC1zaXplOiAxM3B0O1xuICAgICAgfVxuXG4gICAgICAuZW5kIHtcbiAgICAgICAgd2lkdGg6IDYwcHg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmJvZHktY29udGVudCB7XG4gICAgICBwYWRkaW5nOiAwIDIuNWVtIDIwcHggMi41ZW07XG5cbiAgICAgIGlucHV0IHtcbiAgICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgICB0ZXh0LXNoYWRvdzogMHB4IDBweCAwcHggJGNrSGVhZGVyR3JleTsgLyogY2hhbmdlIFtpbnB1dCBmb250XSBieSB0aGlzKi9cbiAgICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgfVxuXG4gICAgICAuZXJyb3ItbWVzc2FnZXMge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogNDJweDtcbiAgICAgICAgbGVmdDogMTJweDtcblxuICAgICAgICBkaXYge1xuICAgICAgICAgIGZvbnQtc2l6ZTogN3B0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHAge1xuICAgICAgICBtYXJnaW46IDEwcHggMCAxNXB4IDA7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgICB9XG5cbiAgICAgIG1kLWlucHV0LWNvbnRhaW5lci5yZXNldC1wYXNzd29yZC1lbWFpbCB7XG4gICAgICAgIG1hcmdpbjogMTZweCAwIDIwcHggMDtcbiAgICAgIH1cblxuICAgICAgLnN1Y2Nlc3MtbWVzc2FnZSB7XG4gICAgICAgIGhlaWdodDogMTBlbTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgfVxuXG4gICAgICAubWQtYnV0dG9uLnJlc2V0LXBhc3N3b3JkLWJ1dHRvbiB7XG4gICAgICAgIG1hcmdpbjogMTBweCA1cHggMCA1cHg7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmxvYWRpbmcge1xuICAgIG1hcmdpbi10b3A6IDhlbTtcbiAgICBoZWlnaHQ6IDEwMHB4O1xuICAgIHdpZHRoOiAxMDBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIH1cblxufVxuIiwiLmVycm9yLXBhZ2Uge1xuXG4gIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kR3JlZW47XG4gIGhlaWdodDogMTAwdmg7XG5cbiAgLmhlYWRlciB7XG4gICAgaGVpZ2h0OiA0ZW07XG4gICAgcGFkZGluZzogMCAxZW07XG4gICAgQGluY2x1ZGUgZmxleC1yb3coY2VudGVyLCBzcGFjZS1iZXR3ZWVuLCBub3dyYXApO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICB9XG5cbiAgLmxvZ28ge1xuICAgIGhlaWdodDogMmVtO1xuICB9XG5cbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gIGltZy5iZWUge1xuICAgIG1heC1oZWlnaHQ6IDI1MHB4O1xuICAgIG1hcmdpbjogMWVtO1xuICB9XG5cbiAgLnRyeS1hZ2FpbiB7XG4gICAgQGluY2x1ZGUgZmxleC1yb3coY2VudGVyLCBjZW50ZXIpO1xuICB9XG59XG4iLCIubG9naW4ge1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgd2lkdGg6IDEwMHZ3O1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uL2Fzc2V0cy9pbWFnZXMvdGlsZS5wbmcnKTtcbiAgcGFkZGluZzogMCA4cHggMjBweCA4cHg7XG5cbiAgLmhlYWRlci1idXR0b25zIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLXRvcDogLjVlbTtcbiAgfVxuXG4gIC5tYWpvci1oZWFkZXIge1xuICAgIGltZyB7XG4gICAgICB3aWR0aDogNmVtO1xuICAgIH1cbiAgICBtYXJnaW4tYm90dG9tOiAuMjVlbTtcbiAgfVxuXG4gIC5ib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgIHdpZHRoOiA0MjVweDtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG5cbiAgICAuYm9keS1oZWFkZXIge1xuICAgICAgaGVpZ2h0OiA1LjZlbTtcblxuICAgICAgLmNsYXNza2ljay1oZWFkZXIge1xuICAgICAgICBmb250LXNpemU6IDEzcHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmJvZHktY29udGVudCB7XG4gICAgICBwYWRkaW5nOiAwIDEuNWVtIDEuNWVtIDEuNWVtO1xuXG4gICAgICBpbnB1dCB7XG4gICAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgdGV4dC1zaGFkb3c6IDBweCAwcHggMHB4ICRja0hlYWRlckdyZXk7IC8qIGNoYW5nZSBbaW5wdXQgZm9udF0gYnkgdGhpcyovXG4gICAgICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIH1cblxuICAgICAgLmVycm9yLW1lc3NhZ2VzIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDQycHg7XG4gICAgICAgIGxlZnQ6IDEycHg7XG5cbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBmb250LXNpemU6IDdwdDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZC1pbnB1dC1jb250YWluZXIuY2xhc3MtY29kZSxcbiAgICAgIG1kLWlucHV0LWNvbnRhaW5lci5uYW1lIHtcbiAgICAgICAgbWFyZ2luOiAxNnB4IDhweCAyMHB4IDhweDtcbiAgICAgIH1cblxuICAgICAgbWQtaW5wdXQtY29udGFpbmVyLmNsYXNzLWNvZGUgaW5wdXQge1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgfVxuXG4gICAgICAubWQtYnV0dG9uLmNrLXByaW1hcnkge1xuICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2VwYXJhdG9yIHtcbiAgICAgICAgbWFyZ2luOiAyMHB4IDhweDtcbiAgICAgICAgaGVpZ2h0OiAycHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kR3JleTtcbiAgICAgIH1cblxuICAgICAgLm5vLWNsYXNzY29kZSB7XG4gICAgICAgIC5sb2dpbi1idXR0b24sIC5zaWdudXAtYnV0dG9uIHtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAucHJvLWNsYXNzY29kZSB7XG5cbiAgICAgICAgLm1kLWJ1dHRvbiB7XG5cbiAgICAgICAgICAmLmdvb2dsZS1zaWduLWluIHtcbiAgICAgICAgICAgIG1hcmdpbjogMjBweCA4cHggMTVweCA4cHg7XG5cbiAgICAgICAgICAgIGltZyB7XG4gICAgICAgICAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDI0cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJi5zaWdudXAtYnV0dG9uIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIycHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLnBpcGUge1xuICAgICAgICAgIG1hcmdpbjogMCA3cHg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubG9hZGluZyB7XG4gICAgbWFyZ2luLXRvcDogOGVtO1xuICAgIGhlaWdodDogMTAwcHg7XG4gICAgd2lkdGg6IDEwMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgfVxuXG59XG5cbiN3aGF0LWlzLWEtY2xhc3MtY29kZXtcbiAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBtZC1kaWFsb2cge1xuICAgIHBhZGRpbmc6IDFlbSAxLjVlbTtcbiAgfVxufVxuIiwiLnBhc3N3b3JkLXJlc2V0IHtcblxuICBoZWlnaHQ6IDEwMHZoO1xuICBiYWNrZ3JvdW5kOiAkYmFja2dyb3VuZEdyZXk7XG5cbiAgLmJvZHkge1xuICAgIHBhZGRpbmc6IDJlbTtcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIH1cblxuICBpbnB1dCB7XG4gICAgd2lkdGg6IDIwZW07XG4gIH1cblxuICAubWQtYnV0dG9uIHtcbiAgICBtYXJnaW4tdG9wOiAyZW07XG4gIH1cblxuICBpIHtcbiAgICBtYXJnaW46IC41ZW0gMCAuMWVtIDA7XG4gIH1cblxufVxuIiwiLm5hdiB7XG5cbiAgbWQtc2lkZW5hdiwgLm1haW4ge1xuICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICAgIG1heC1oZWlnaHQ6IDEwMHZoO1xuICB9XG5cbiAgbWQtc2lkZW5hdiB7XG5cbiAgICAmOm5vdCgubWQtbG9ja2VkLW9wZW4pIHtcbiAgICAgIG1pbi1oZWlnaHQ6IDEwMCU7XG4gICAgICBtYXgtaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIGJveC1zaGFkb3c6IDBweCA1cHggNXB4ICNjY2M7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBtaW4td2lkdGg6ICR0ZWFjaGVyU2lkZW5hdldpZHRoO1xuXG4gICAgLmhlYWRlciB7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2ZmZmZmZjtcbiAgICAgIGhlaWdodDogJHRlYWNoZXJIZWFkZXJIZWlnaHQ7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgbWluLXdpZHRoOiAkdGVhY2hlclNpZGVuYXZXaWR0aDtcbiAgICAgIC5sb2dvIHtcbiAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAucHJvZmlsZSB7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgaGVpZ2h0OiAkdGVhY2hlclNpZGVuYXZUYWJIZWlnaHQ7XG4gICAgICBwYWRkaW5nOiAwLjJlbSAxZW07XG4gICAgICBjb2xvcjogJGxpZ2h0VGV4dDtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICAgIH1cblxuICAgIC50YWJzIHtcbiAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICBib3JkZXItdG9wOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRiYWNrZ3JvdW5kR3JleTtcbiAgICB9XG5cbiAgICAuY29udHJhY3QtYWRtaW4ge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgLnRhYi1oZWFkZXIge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICBwYWRkaW5nOiAxZW0gLjdlbSAwIC43ZW07XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIGNvbG9yOiAkbGlnaHRUZXh0O1xuICAgIH1cblxuICAgIC5zcGFjZXIge1xuICAgICAgbWluLWhlaWdodDogMWVtO1xuICAgIH1cblxuICAgIC5tZC1idXR0b24udGFiIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIG1pbi1oZWlnaHQ6ICR0ZWFjaGVyU2lkZW5hdlRhYkhlaWdodDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICAgIGNvbG9yOiAkbGlua0dyZXk7XG4gICAgICBmb250LXNpemU6IDEycHQ7XG4gICAgICBwYWRkaW5nOiAwIC43ZW07XG5cbiAgICAgIGkge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IC41ZW07XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgd2lkdGg6IDEuNWVtO1xuICAgICAgfVxuXG4gICAgICBkaXYsIHNwYW4ge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB9XG5cbiAgICAgIC5pbmRpY2F0b3ItY2lyY2xlIHtcbiAgICAgICAgdG9wOiAwcHg7XG4gICAgICAgIGhlaWdodDogMTBweDtcbiAgICAgICAgd2lkdGg6IDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5tZC1yaXBwbGUtY29udGFpbmVyIHtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAudGFiLmFjdGl2ZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbGlua0dyZXk7XG4gICAgICBjb2xvcjogI2ZmZmZmZjtcbiAgICB9XG5cbiAgICAudGFiLnNpZ25vdXQge1xuICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgIH1cblxuICAgIC5wcm8tdXNlci1iYW5uZXIsXG4gICAgLm1kLWJ1dHRvbi5wcm8tdXNlci1iYW5uZXIsXG4gICAgLm1kLWJ1dHRvbi5wbHVzLXVzZXItYmFubmVyIHtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICBtYXJnaW46IDE1cHggMTZweDtcbiAgICAgIHBhZGRpbmc6IDNweCA4cHg7XG4gICAgICBmb250LWZhbWlseTogR290aGFtUm91bmRlZE1lZGl1bTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIGxpbmUtaGVpZ2h0OiB1bnNldDtcbiAgICAgIG1pbi1oZWlnaHQ6IHVuc2V0O1xuICAgICAgZm9udC1zaXplOiAxMXB0O1xuXG4gICAgICAubWQtcmlwcGxlLWNvbnRhaW5lciB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLnByby11c2VyLWJhbm5lcjpub3QoLm1kLWJ1dHRvbikge1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgfVxuXG4gICAgLnByby11c2VyLWJhbm5lcixcbiAgICAubWQtYnV0dG9uLnByby11c2VyLWJhbm5lciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tQcm87XG4gICAgfVxuXG4gICAgLm1kLWJ1dHRvbi5wcm8tdXNlci1iYW5uZXI6aG92ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrUHJvRGFyaztcbiAgICB9XG5cbiAgICAubWQtYnV0dG9uLnBsdXMtdXNlci1iYW5uZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrUGx1cztcbiAgICB9XG5cbiAgICAubWQtYnV0dG9uLnBsdXMtdXNlci1iYW5uZXI6aG92ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrUGx1c0Rhcms7XG4gICAgfVxuICB9XG5cbiAgLm1haW4ge1xuICAgIEBpbmNsdWRlIGZsZXgoMSwgMSwgYXV0byk7XG4gICAgd2lkdGg6IGNhbGMoMTAwdncgLSAjeyR0ZWFjaGVyU2lkZW5hdldpZHRofSk7XG4gIH1cbn1cbiIsIi5wYXltZW50IHtcbiAgaGVpZ2h0OiAxMDB2aDtcblxuICAuaGVhZGVyIHtcbiAgICBib3JkZXItYm90dG9tOiBub25lO1xuICB9XG5cbiAgLmhlYWRlcnMge1xuICAgIGhlaWdodDogMTAwcHg7XG4gIH1cblxuICBmb3JtIHtcbiAgICB3aWR0aDogNDEwcHg7XG5cbiAgICBpbnB1dCB7XG4gICAgICBjb2xvcjogJGNrR3JlZW47XG4gICAgICB0ZXh0LXNoYWRvdzogMHB4IDBweCAwcHggJGNrSGVhZGVyR3JleTsgLyogY2hhbmdlIFtpbnB1dCBmb250XSBieSB0aGlzKi9cbiAgICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICAuZXJyb3ItbWVzc2FnZXMge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgbGVmdDogMTJweDtcbiAgICB9XG5cbiAgICAucGxhbiBsYWJlbCB7XG4gICAgICAgIGZvbnQtc2l6ZTogOC4yNXB0O1xuICAgICAgICBmb250LWZhbWlseTogR290aGFtUm91bmRlZE1lZGl1bTtcbiAgICB9XG4gIH1cblxuICAuY2FyZC1jb250YWluZXIge1xuICAgIGhlaWdodDogODBweDtcblxuICAgIG1kLWlucHV0LWNvbnRhaW5lci5jYXJkIHtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgaW5wdXQge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB9XG4gICAgICAuZXJyb3ItbWVzc2FnZXMge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogNDJweDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuY2FyZC1lbGVtZW50IHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHRvcDogNXB4O1xuICAgICAgbGVmdDogNHB4O1xuICAgICAgbWFyZ2luOiAwIDhweDtcbiAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycztcbiAgICB9XG5cbiAgICAuY2stY2FyZC1lbXB0eTpub3QoLmNrLWNhcmQtZm9jdXNlZCkge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gIH1cblxuICAucHJpY2Uge1xuICAgIG1hcmdpbjogMTBweCAwIDE1cHggMDtcbiAgfVxuXG4gIC5hbHRlcm5hdGl2ZSwgLmVycm9yLCAubG9hZGluZyB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDE1MHB4O1xuICB9XG5cbn1cbiIsIi5wYXltZW50LXN1Y2Nlc3Mge1xuICBoZWlnaHQ6IDEwMHZoO1xuXG4gIC5oZWFkZXIge1xuICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gIH1cblxuICAuaGVhZGVycyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgfVxuXG4gIC5ib2R5IHtcbiAgICB3aWR0aDogNTAwcHg7XG4gICAgcGFkZGluZzogMTBweDtcblxuICAgIC5zZWN0aW9uLWhlYWRlciB7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgIH1cblxuICAgIC5saW5lIHtcbiAgICAgIGhlaWdodDogMXB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICB9XG5cbiAgICAubGluZSArIHAge1xuICAgICAgbWFyZ2luLXRvcDogMjBweDtcbiAgICB9XG5cbiAgICBwIHtcbiAgICAgIG1hcmdpbjogNXB4IDA7XG4gICAgfVxuXG4gICAgLnJlc291cmNlcyB7XG4gICAgICBtYXJnaW46IDEwcHggMCAwIDA7XG5cbiAgICAgIC5yZXNvdXJjZSB7XG4gICAgICAgIHdpZHRoOiAxMmVtO1xuICAgICAgICBtYXJnaW46IDAgMTBweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMjVweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGNrSGVhZGVyR3JleTtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuXG4gICAgICAgIC5pbWFnZS1jb250YWluZXIge1xuICAgICAgICAgIG1hcmdpbi10b3A6IDFlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5tZXNzYWdlIHtcbiAgICAgICAgICBtYXJnaW46IDFlbSAwLjI1ZW07XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC5tZC1idXR0b24ge1xuICAgICAgbWFyZ2luOiAzMHB4IDAgMCAwO1xuICAgICAgd2lkdGg6IDc1JTtcbiAgICB9XG5cblxuICB9XG59XG4iLCIucHVibGljLWFzc2lnbm1lbnQtcXVlc3Rpb24ge1xuXG4gIGhlaWdodDogMTAwdmg7XG5cbiAgLmFzc2lnbm1lbnQtcXVlc3Rpb24taGVhZGVyIHtcblxuICAgIGkuY2suZmEuY2steW91dHViZSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDAuNWVtO1xuICAgIH1cblxuICAgIGkuY2suZmEuY2staGVscCB7XG4gICAgICBmb250LXNpemU6IDEuNWVtO1xuICAgIH1cblxuICAgIC5jbGFzc2tpY2staGVhZGVyIHtcbiAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIH1cblxuICAgIC51c2UtYXNzaWdubWVudCB7XG4gICAgICBtYXJnaW4tbGVmdDogM3B4O1xuICAgIH1cbiAgfVxuXG4gIC5sb2FkaW5nLCAuZXJyb3Ige1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAgIC5sb2FkaW5nLXRleHQsIC5lcnJvci10ZXh0IHtcbiAgICAgIHBhZGRpbmc6IDJlbTtcbiAgICB9XG4gIH1cbn1cbiIsIi5hc3NpZ25tZW50IHtcbiAgLmxvYWRpbmcsIC5lcnJvciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGhlaWdodDogMTAwdmg7XG5cbiAgICAubG9hZGluZy10ZXh0LCAuZXJyb3ItdGV4dCB7XG4gICAgICBwYWRkaW5nOiAyZW07XG4gICAgfVxuICB9XG5cbiAgLmhlYWRlciB7XG5cbiAgICAuYmFyLWl0ZW0ge1xuICAgICAgbWluLXdpZHRoOiA2MHB4O1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBpIHtcbiAgICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgfVxuICAgIH1cbiAgICBpIHtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDAuNWVtO1xuICAgIH1cbiAgICAubG9nbyB7XG4gICAgICBtYXJnaW4tbGVmdDogMWVtO1xuICAgICAgaGVpZ2h0OiAxLjVlbTtcbiAgICB9XG4gICAgLmxvZ286aG92ZXIge1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIH1cbiAgICAubG9nbzpmb2N1cyB7XG4gICAgICBvdXRsaW5lOiBub25lO1xuICAgIH1cbiAgfVxuICAuYXNzaWdubWVudC1jb250YWluZXIge1xuICAgIGhlaWdodDogY2FsYygxMDB2aCAtICN7JHRlYWNoZXJIZWFkZXJIZWlnaHR9KTtcbiAgICBvdmVyZmxvdzogc2Nyb2xsO1xuXG4gICAgLmFzc2lnbm1lbnQtbWV0YWRhdGEge1xuICAgICAgcGFkZGluZzogMWVtIDVlbSAxZW07XG5cbiAgICAgIC5hc3NpZ25tZW50LWRlc2NyaXB0aW9uIHtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDFlbTtcbiAgICAgICAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICAgICAgfVxuXG4gICAgICBociB7XG4gICAgICAgIG1hcmdpbjogMmVtIDA7XG4gICAgICAgIHdpZHRoOiBjYWxjKDEwMHZ3IC0gMTBlbSk7XG4gICAgICAgIGJvcmRlci10b3A6IDA7XG4gICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkR3JleTtcbiAgICAgIH1cbiAgICB9XG4gICAgLnF1ZXN0aW9ucyB7XG5cbiAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICBib3JkZXItd2lkdGg6IDAgMCAxcHggMDtcbiAgICAgIGJvcmRlci1jb2xvcjogJGRpc2FibGVkR3JleTtcblxuICAgICAgYmFja2dyb3VuZDogJGJhY2tncm91bmRHcmV5O1xuXG4gICAgICAuc2VjdGlvbi1oZWFkZXIge1xuICAgICAgICBAaW5jbHVkZSBmbGV4LXJvdyhmbGV4LXN0YXJ0LCBzcGFjZS1iZXR3ZWVuKTtcbiAgICAgICAgcGFkZGluZzogMmVtIDQuNWVtIDBlbTtcbiAgICAgIH1cblxuICAgICAgLnF1ZXN0aW9ucy1jb250YWluZXIge1xuICAgICAgICBwYWRkaW5nOiAwIDRlbSAyZW0gNGVtO1xuICAgICAgICBAaW5jbHVkZSBmbGV4LXJvdyhjZW50ZXIsIGZsZXgtc3RhcnQsIHdyYXApO1xuXG4gICAgICAgICYgPiAqIHtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgd2lkdGg6IDIwZW07XG4gICAgICAgICAgaGVpZ2h0OiAxNWVtO1xuICAgICAgICAgIG1hcmdpbjogMWVtIDFlbTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLnF1ZXN0aW9uIHtcblxuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgICAgICBib3gtc2hhZG93OiAycHggNXB4IDVweCAjY2NjO1xuXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuXG4gICAgICAgICAgJiA+ICoge1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5xdWVzdGlvbi1tYXNrIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIGZsZXgtcm93KGNlbnRlciwgc3BhY2UtYmV0d2Vlbik7XG5cbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZU1hc2s7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGhlaWdodDogNDVweDtcbiAgICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICAgIGxlZnQ6IDA7XG5cbiAgICAgICAgICAgICYgPiAqIHtcbiAgICAgICAgICAgICAgQGluY2x1ZGUgZmxleC1yb3coY2VudGVyLCBjZW50ZXIpO1xuICAgICAgICAgICAgICB3aWR0aDogNDVweDtcbiAgICAgICAgICAgICAgaGVpZ2h0OiA0NXB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAubWVudS1idXR0b24ge1xuXG4gICAgICAgICAgICAgIC5tZC1idXR0b24ge1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDQ1cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0NXB4O1xuICAgICAgICAgICAgICAgIG1pbi13aWR0aDogNDVweDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEyNSU7XG5cbiAgICAgICAgICAgICAgICAubWQtcmlwcGxlLWNvbnRhaW5lciB7XG4gICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGFzc2lnbm1lbnQtc2hlZXQge1xuICAgICAgICAgICAgd2lkdGg6ICRwdWJsaWNBc3NpZ25tZW50U2hlZXRXaWR0aDtcbiAgICAgICAgICAgIGhlaWdodDogJHB1YmxpY0Fzc2lnbm1lbnRTaGVldEhlaWdodDtcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcblxuICAgICAgICAgICAgLyogT3VyIGNhbnZhcyBpcyAyOjEsIHNvIGNhbGN1bGF0ZSBoZWlnaHQgYmFzZWQgb24gd2lkdGggKi9cbiAgICAgICAgICAgIHN2ZyB7XG4gICAgICAgICAgICAgIGhlaWdodDogY2FsYygyICogI3skcHVibGljQXNzaWdubWVudFNoZWV0V2lkdGh9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cblxuICAgICAgICB9XG5cbiAgICAgICAgLmFkZC1xdWVzdGlvbiB7XG4gICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICBmb250LXNpemU6IGluaGVyaXQ7XG5cbiAgICAgICAgICBib3JkZXItc3R5bGU6IGRhc2hlZDtcbiAgICAgICAgICBib3JkZXItd2lkdGg6IDJweDtcbiAgICAgICAgICBib3JkZXItY29sb3I6ICRja0dyZWVuO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7XG5cbiAgICAgICAgICAubWQtcmlwcGxlLWNvbnRhaW5lciB7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbn1cbiIsIi5wdWJsaWMtYXNzaWdubWVudHMtbGlzdCB7XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICBtYXgtaGVpZ2h0OiAxMDB2aDtcblxuICAuaGVhZGVyIHtcblxuICAgIC5sb2dvIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxNnB4O1xuICAgICAgaGVpZ2h0OiAyMnB4O1xuICAgIH1cbiAgICAubG9nbzpob3ZlciB7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgfVxuICAgIC5sb2dvOmZvY3VzIHtcbiAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgLmJvZHkge1xuXG4gICAgLnVzZXItaW5mbyB7XG4gICAgICBoZWlnaHQ6IDEwMHB4O1xuICAgICAgbWFyZ2luOiAwIDMycHg7XG5cbiAgICAgIEBtZWRpYSAobWluLXdpZHRoOjkyNXB4KSB7XG4gICAgICAgIG1hcmdpbjogMCAxMjBweDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAubGlzdC1jb250YWluZXIge1xuICAgICAgQG1lZGlhIChtaW4td2lkdGg6OTI1cHgpIHtcbiAgICAgICAgbWFyZ2luOiAwIDEyMHB4O1xuICAgICAgICBib3gtc2hhZG93OiAwcHggNHB4IDJweCAwcHggcmdiYSgwLDAsMCwwLjQpO1xuICAgICAgfVxuXG4gICAgICAubGlzdC1oZWFkZXIge1xuICAgICAgICAubWQtYnV0dG9uIHtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcblxuICAgICAgICAgICYubW9kaWZpZWQge1xuICAgICAgICAgICAgd2lkdGg6IDE0MHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZC1saXN0IHtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG5cbiAgICAgICAgLmNrLWFzc2lnbm1lbnQge1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMThweDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuICB9XG5cbn1cbiIsIi5yb290LWRpdiB7XG4gIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kR3JleTtcblxuICBkaXYucm9vdC1jb250ZW50LXBhcmVudCB7XG4gICAgQGV4dGVuZCAuZnVsbC1zY3JlZW47XG4gICAgQGluY2x1ZGUgdmVydGljYWwtYWxpZ24tcGFyZW50KCk7XG5cbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuXG4gICAgZGl2IHtcbiAgICAgIEBpbmNsdWRlIHZlcnRpY2FsLWFsaWduKCk7XG4gICAgfVxuICB9XG5cbiAgZGl2LmFwcC1jb250ZW50IHtcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgfVxuXG59XG4iLCIucm9zdGVyLWVkaXQge1xuXG4gICRyb3N0ZXJFZGl0Q29sb3JDaXJjbGVEaWFtZXRlcjogMThweDtcblxuICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgbWF4LWhlaWdodDogMTAwdmg7XG5cbiAgLmJhY2stYnV0dG9uIHtcbiAgICBoZWlnaHQ6IGluaGVyaXQ7XG4gIH1cblxuICAub3B0aW9ucy1tZW51LWJ1dHRvbiB7XG4gICAgaGVpZ2h0OiBpbmhlcml0O1xuICB9XG5cbiAgaW5wdXQge1xuICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICB9XG5cbiAgLm1ldGFkYXRhIHtcbiAgICBwYWRkaW5nOiAxZW0gMWVtIDAgMWVtO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cbiAgICAubWQtYnV0dG9uLnRpdGxlLCAudGl0bGUge1xuICAgICAgZm9udC1mYW1pbHk6IEdvdGhhbVJvdW5kZWRNZWRpdW07XG4gICAgICBmb250LXNpemU6IDExcHg7XG4gICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgICBmb250LXZhcmlhbnQ6IG5vcm1hbDtcbiAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICB9XG5cbiAgICAubmFtZS1hbmQtY29sb3Ige1xuICAgICAgcGFkZGluZzogMWVtO1xuXG4gICAgICAubmFtZSB7XG4gICAgICAgIHdpZHRoOiA1MGVtO1xuICAgICAgICBtYXgtd2lkdGg6IDcwJTtcblxuICAgICAgICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1kLWlucHV0LWNvbnRhaW5lciAubWQtZXJyb3JzLXNwYWNlciB7XG4gICAgICAgICAgbWluLWhlaWdodDogMDtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIC5jb2xvciB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgbWFyZ2luLXRvcDogLTFlbTtcblxuICAgICAgICAubWQtYnV0dG9uIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAtLjRlbTtcbiAgICAgICAgICBtaW4td2lkdGg6ICRyb3N0ZXJFZGl0Q29sb3JDaXJjbGVEaWFtZXRlcjtcbiAgICAgICAgICB3aWR0aDogY2FsYygjeyRyb3N0ZXJFZGl0Q29sb3JDaXJjbGVEaWFtZXRlcn0gKyAyZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNpcmNsZSB7XG4gICAgICAgICAgbWluLXdpZHRoOiAkcm9zdGVyRWRpdENvbG9yQ2lyY2xlRGlhbWV0ZXI7XG4gICAgICAgICAgbWluLWhlaWdodDogJHJvc3RlckVkaXRDb2xvckNpcmNsZURpYW1ldGVyO1xuICAgICAgICAgIG1heC13aWR0aDogJHJvc3RlckVkaXRDb2xvckNpcmNsZURpYW1ldGVyO1xuICAgICAgICAgIG1heC1oZWlnaHQ6ICRyb3N0ZXJFZGl0Q29sb3JDaXJjbGVEaWFtZXRlcjtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmNvbmZpZ3Mge1xuICAgICAgcGFkZGluZzogMCAxZW07XG5cbiAgICAgIC5jb2xvcixcbiAgICAgIC5wZWVyLFxuICAgICAgLm5ldy1tZW1iZXJzLFxuICAgICAgLnNpbmdsZS1kZXZpY2Uge1xuICAgICAgICB3aWR0aDogMTVlbTtcblxuICAgICAgICAubWQtYnV0dG9uLFxuICAgICAgICBtZC1jaGVja2JveCB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWQtY2hlY2tib3gge1xuICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICB9XG4gIH1cblxuICBtZC1saXN0IHtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgfVxuXG4gIG1kLWxpc3QtaXRlbSB7XG4gICAgbGV0dGVyLXNwYWNpbmc6ICRsZXR0ZXJTcGFjaW5nTGlnaHQ7XG4gIH1cblxuICAubGlzdC1oZWFkZXIsIG1kLWxpc3QtaXRlbSB7XG5cbiAgICAmLmFkZC1zdHVkZW50cyB7XG4gICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJlbTtcblxuICAgICAgLmhpbnQge1xuICAgICAgICBwYWRkaW5nLXRvcDogLjc1ZW07XG4gICAgICB9XG5cbiAgICAgIC5tZC1idXR0b24ge1xuICAgICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgICAgZm9udC1mYW1pbHk6IEdvdGhhbVJvdW5kZWRNZWRpdW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgJi5lZGl0LCAuZWRpdCB7XG4gICAgICB3aWR0aDogNjBweDtcbiAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgIH1cblxuICAgIC5jb2wge1xuICAgICAgbWFyZ2luOiAwO1xuXG4gICAgICAmLm5hbWUsXG4gICAgICAmLmVtYWlsLFxuICAgICAgJi5zdGF0dXMge1xuICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG5cbiAgICAgICAgbWluLXdpZHRoOiAyMDBweDtcblxuICAgICAgICBtZC1pbnB1dC1jb250YWluZXIge1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAmLmd1ZXN0LXVzZXIge1xuICAgICAgICBjb2xvcjogI2JhYmFiYTtcbiAgICAgIH1cblxuXG5cbiAgICAgICYudG9vbHMsIC50b29scyB7XG4gICAgICAgIHdpZHRoOiA2MHB4O1xuICAgICAgfVxuXG4gICAgICAmLmNoZWNrcywgLmNoZWNrcyxcbiAgICAgICYuaGVscHMsIC5oZWxwcyB7XG5cbiAgICAgICAgQGluY2x1ZGUgZmxleC1yb3coY2VudGVyLCBjZW50ZXIsIG5vd3JhcCk7XG5cbiAgICAgICAgbWluLXdpZHRoOiA4MHB4O1xuICAgICAgICB3aWR0aDogODBweDtcblxuICAgICAgICBzcGFuLmNoZWNrIHtcbiAgICAgICAgICBjb2xvcjogJGNrR3JlZW47XG4gICAgICAgIH1cblxuICAgICAgICBzcGFuLmhlbHAge1xuICAgICAgICAgIGNvbG9yOiAkY2tZZWxsb3c7XG4gICAgICAgIH1cblxuICAgICAgICBzcGFuLnJlcXVlc3QtY2Fycm90IHtcbiAgICAgICAgICBAaW5jbHVkZSBmbGV4LXJvdyhjZW50ZXIsIGNlbnRlciwgbm93cmFwKTtcbiAgICAgICAgICBtYXJnaW46IDAgMC4yZW07XG4gICAgICAgICAgbWluLXdpZHRoOiAxZW07XG4gICAgICAgICAgbWF4LXdpZHRoOiAxZW07XG4gICAgICAgICAgbWluLWhlaWdodDogMWVtO1xuICAgICAgICAgIG1heC1oZWlnaHQ6IDFlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jaXJjbGUtZ3JlZW4sXG4gICAgICAgIC5jaXJjbGUteWVsbG93IHtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgd2lkdGg6IDM1cHg7XG4gICAgICAgICAgaGVpZ2h0OiAzNXB4O1xuXG4gICAgICAgICAgaS5jay1oYW5kIHtcbiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAuY2lyY2xlLWdyZWVuIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tZZWxsb3c7XG4gICAgICAgIH1cblxuICAgICAgICAuY2lyY2xlLXllbGxvdyB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrR3JlZW47XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICAuY2lyY2xlIHtcbiAgICAgICAgbWluLXdpZHRoOiAxZW07XG4gICAgICAgIG1pbi1oZWlnaHQ6IDFlbTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbWQtbGlzdC1pdGVtLmxpc3QtaXRlbS5oaWdobGlnaHQge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHRQcmltYXJ5O1xuICB9XG5cbiAgbWQtbGlzdC1pdGVtLmxpc3QtYnV0dG9uICoge1xuICAgIGNvbG9yOiAkY2tHcmVlbiAhaW1wb3J0YW50O1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRNZWRpdW0gIWltcG9ydGFudDtcbiAgICBmb250LXNpemU6IDE0cHggIWltcG9ydGFudDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMCAxZW07XG4gIH1cblxuICAubG9hZGluZyB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5cbiAgLmVycm9yLW1lc3NhZ2Uge1xuICAgIC5ib2R5LXN1YnRleHQge1xuICAgICAgcGFkZGluZzogMWVtO1xuICAgIH1cbiAgfVxuXG59XG5cbiNyb3N0ZXItcHJvLW9wdGlvbnMtY2Fycm90IHtcbiAgZm9udC1zaXplOiAwLjhlbTtcbiAgbWFyZ2luLWJvdHRvbTogM3B4O1xufVxuIiwiLnRlYWNoZXItcm9zdGVycyB7XG4gIG1pbi1oZWlnaHQ6IGNhbGMoMTAwdmgpO1xuICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoKTtcblxuICAubGlzdC1oZWFkZXIge1xuICAgIC5tZC1idXR0b24ge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuICB9XG5cbiAgbWQtbGlzdCB7XG4gICAgbWluLWhlaWdodDogJHRlYWNoZXJMaXN0SGVpZ2h0O1xuICAgIG1heC1oZWlnaHQ6ICR0ZWFjaGVyTGlzdEhlaWdodDtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgfVxuXG4gIC5saXN0LWhlYWRlcixcbiAgbWQtbGlzdC1pdGVtIHtcbiAgICAuY29sIHtcblxuICAgICAgJi5uYW1lIHtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4O1xuICAgICAgfVxuXG4gICAgICAmLnRvb2xzLCAudG9vbHMge1xuICAgICAgICB3aWR0aDogMTIwcHg7XG4gICAgICB9XG5cbiAgICAgICYuY2hlY2tzLCAuY2hlY2tzLFxuICAgICAgJi5oZWxwcywgLmhlbHBzIHtcblxuICAgICAgICBAaW5jbHVkZSBmbGV4LXJvdyhjZW50ZXIsIGNlbnRlciwgbm93cmFwKTtcblxuICAgICAgICBtaW4td2lkdGg6IDgwcHg7XG4gICAgICAgIHdpZHRoOiA4MHB4O1xuXG4gICAgICAgIHNwYW4uY2hlY2sge1xuICAgICAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNwYW4uaGVscCB7XG4gICAgICAgICAgY29sb3I6ICRja1llbGxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHNwYW4ucmVxdWVzdC1jYXJyb3Qge1xuICAgICAgICAgIEBpbmNsdWRlIGZsZXgtcm93KGNlbnRlciwgY2VudGVyLCBub3dyYXApO1xuICAgICAgICAgIG1hcmdpbjogMCAwLjJlbTtcbiAgICAgICAgICBtaW4td2lkdGg6IDFlbTtcbiAgICAgICAgICBtYXgtd2lkdGg6IDFlbTtcbiAgICAgICAgICBtaW4taGVpZ2h0OiAxZW07XG4gICAgICAgICAgbWF4LWhlaWdodDogMWVtO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNpcmNsZS1ncmVlbixcbiAgICAgICAgLmNpcmNsZS15ZWxsb3cge1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgICB3aWR0aDogMzVweDtcbiAgICAgICAgICBoZWlnaHQ6IDM1cHg7XG5cbiAgICAgICAgICBpLmNrLWhhbmQge1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC5jaXJjbGUtZ3JlZW4ge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRja1llbGxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIC5jaXJjbGUteWVsbG93IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIC50b29scywgJi50b29scyB7XG4gICAgICAgIHdpZHRoOiA2MHB4O1xuICAgICAgfVxuXG4gICAgICAuY2lyY2xlIHtcbiAgICAgICAgbWluLXdpZHRoOiAxZW07XG4gICAgICAgIG1pbi1oZWlnaHQ6IDFlbTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmxvYWRpbmcge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxufVxuXG4uZ29vZ2xlLWNsYXNzcm9vbS1pY29uIHtcbiAgaGVpZ2h0OiAxLjVlbTtcbiAgd2lkdGg6IDEuNWVtO1xuICBtYXJnaW4tcmlnaHQ6IDAuOWVtO1xufVxuXG4iLCIuc2Vzc2lvbi13YXRjaCB7XG5cbiAgJGNlbGxIZWlnaHQ6IDMwcHg7XG4gICRjZWxsV2lkdGg6IDkwcHg7XG4gICRjZWxsUGFkZGluZzogMTBweDtcbiAgJHJvd0hlaWdodDogY2FsYygjeyRjZWxsSGVpZ2h0fSArICN7JGNlbGxQYWRkaW5nfSArICN7JGNlbGxQYWRkaW5nfSk7XG5cbiAgJGhlYWRlckNlbGxIZWlnaHQ6IDI1cHg7XG4gICRoZWFkZXJSb3dIZWlnaHQ6IGNhbGMoKCgjeyRoZWFkZXJDZWxsSGVpZ2h0fSArICN7JGNlbGxQYWRkaW5nfSArICN7JGNlbGxQYWRkaW5nfSkgKiAxLjkpKTtcblxuICAkdGFibGVQYWRkaW5nOiAxMHB4O1xuICAkYm9keVBhZGRpbmc6IDE2cHg7XG5cbiAgaGVpZ2h0OiAxMDB2aDtcblxuICAubG9hZGluZywgLmVycm9yIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cblxuICAuZXJyb3ItY29udGFpbmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZEdyZXk7XG4gIH1cblxuICAuZXJyb3Ige1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgcGFkZGluZzogMWVtIDJlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZm9udC1zaXplOiAxMjUlO1xuICB9XG5cbiAgLm9wdGlvbiB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG5cbiAgICBtZC1zZWxlY3QtdmFsdWUubWQtc2VsZWN0LXZhbHVlIHtcbiAgICAgIHBhZGRpbmctYm90dG9tOiA1cHggIWltcG9ydGFudDtcbiAgICAgIGhlaWdodDogMi4zZW07XG4gICAgfVxuICB9XG5cbiAgLm1kLWJ1dHRvbi5jbGFzcy1jb2RlIHtcbiAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcblxuICAgIHNwYW4ge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxZW07XG4gICAgfVxuICB9XG5cbiAgbWQtc3dpdGNoIHtcbiAgICBmb250LXNpemU6IDAuOGVtO1xuICB9XG5cbiAgLnN0dWRlbnRzLW9ubGluZSB7XG4gICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICBjb2xvcjogJGxpZ2h0VGV4dDtcbiAgfVxuXG4gIC5xdWVzdGlvbi1jZWxsIC5tZC1idXR0b24sXG4gIC5ob3Jpem9udGFsLXNjcm9sbC1idXR0b24gLmJhY2ssXG4gIC5ob3Jpem9udGFsLXNjcm9sbC1idXR0b24gLm5leHQsXG4gIC5xdWVzdGlvbi1jZWxsLWhlYWRlciAubWQtYnV0dG9uIHtcbiAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgbWluLWhlaWdodDogMTAwJTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGxpbmUtaGVpZ2h0OiAkY2VsbEhlaWdodDtcbiAgfVxuXG4gIC5vcHRpb25zLWJhciB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGhlaWdodDogY2FsYygjeyR0ZWFjaGVySGVhZGVySGVpZ2h0fSAvIDIpO1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlZWVmO1xuICAgIHBhZGRpbmctbGVmdDogMmVtO1xuXG4gICAgLm1kLWJ1dHRvbi5iYXItaXRlbSB7XG4gICAgICBtYXJnaW46IDAgM3B4O1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIG1pbi1oZWlnaHQ6IHVuc2V0O1xuICAgICAgbWluLXdpZHRoOiA4MHB4O1xuXG4gICAgICBzcGFuIHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmhlYWRlciB7XG5cbiAgICBoZWxwLWluYm94IHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxZW07XG4gICAgfVxuXG4gIH1cblxuICAuYm9keSB7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgd2lkdGg6IDEwMHZ3O1xuXG4gICAgLmJvZHktaGVhZCAuc3R1ZGVudC1pbmZvLCAuYm9keS1jb250ZW50IC5zdHVkZW50LWluZm8ge1xuICAgICAgbWluLXdpZHRoOiAzMDBweDtcbiAgICAgIHdpZHRoOiAzMDBweDtcbiAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCAtMXB4IHJnYmEoMCwwLDAsLjIpLDAgNHB4IDVweCAwIHJnYmEoMCwwLDAsLjE0KSwwIDFweCAxMHB4IDAgcmdiYSgwLDAsMCwuMTIpO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB9XG5cbiAgICAuYm9keS1oZWFkIHtcblxuICAgICAgLmhvcml6b250YWwtc2Nyb2xsLWNvbnRhaW5lciwgLmhvcml6b250YWwtc2Nyb2xsLWJ1dHRvbiB7XG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlZWVmO1xuICAgICAgfVxuXG4gICAgICAuaG9yaXpvbnRhbC1zY3JvbGwtY29udGFpbmVyIHtcbiAgICAgICAgbWF4LWhlaWdodDogJGhlYWRlclJvd0hlaWdodDtcbiAgICAgICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuXG4gICAgICAgIC5ob3Jpem9udGFsLXNjcm9sbCB7XG4gICAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLnN0dWRlbnQtaW5mbyB7XG4gICAgICAgIGhlaWdodDogJGhlYWRlclJvd0hlaWdodDtcbiAgICAgICAgcGFkZGluZzogMCAxLjJlbTtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRja0xpc3RIZWFkZXJCb3JkZXI7XG5cbiAgICAgICAgaDMge1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMWVtO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5ob3Jpem9udGFsLXNjcm9sbC1idXR0b24ge1xuICAgICAgICB3aWR0aDogJGhlYWRlckNlbGxIZWlnaHQ7XG4gICAgICAgIGhlaWdodDogJGhlYWRlclJvd0hlaWdodDtcblxuICAgICAgICAubWQtYnV0dG9uLmJhY2ssIC5tZC1idXR0b24ubmV4dCB7XG4gICAgICAgICAgQGV4dGVuZCAubWQtYnV0dG9uLnNxdWFyZTtcblxuICAgICAgICAgIG1pbi1oZWlnaHQ6IGNhbGMoI3skaGVhZGVyQ2VsbEhlaWdodH0gKyAjeyRoZWFkZXJDZWxsSGVpZ2h0fSArIDJweCk7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5ob3Jpem9udGFsLXNjcm9sbC1idXR0b246bGFzdC1jaGlsZCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogJGJvZHlQYWRkaW5nO1xuICAgICAgfVxuXG4gICAgICBtZC1zd2l0Y2gge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmJvZHktY29udGVudCB7XG4gICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmRHcmV5O1xuXG4gICAgICAuc3R1ZGVudC1pbmZvLCAuaG9yaXpvbnRhbC1zY3JvbGwge1xuICAgICAgICBAaW5jbHVkZSBjb250ZW50LWhlaWdodCgpO1xuICAgICAgICBtaW4taGVpZ2h0OiBjYWxjKDEwMCUgLSAyLjVlbSk7XG4gICAgICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG4gICAgICAgIC5jb2x1bW46Zmlyc3QtY2hpbGQgPiBkaXYge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogJGhlYWRlckNlbGxIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICAucm93IHtcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY2tMaXN0SGVhZGVyQm9yZGVyO1xuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIGhlaWdodDogJHJvd0hlaWdodDtcblxuICAgICAgICAgICYuaW5mbyB7XG4gICAgICAgICAgICBwYWRkaW5nOiAuMTVlbSAxLjJlbTtcbiAgICAgICAgICAgIGNvbG9yOiAkY2tGYWRlZFRleHRHcmV5O1xuXG4gICAgICAgICAgICAmLm9ubGluZXtcbiAgICAgICAgICAgICAgY29sb3I6ICRja0NvcHlCbGFjaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLmRhdGUge1xuICAgICAgICAgICAgICBmb250LXNpemU6IDlwdDtcbiAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDlwdDtcblxuICAgICAgICAgICAgICAmLmhpZGUge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5zdHVkZW50LWluZm8tbGVmdCxcbiAgICAgICAgICAgIC5zdHVkZW50LWluZm8tcmlnaHQge1xuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5zdHVkZW50LWhlbHBlcnMtbWVudSB7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5tZC1idXR0b24ge1xuICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDIxcHg7XG4gICAgICAgICAgICAgIG1pbi13aWR0aDogMi41ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAubWQtYnV0dG9uLnN0dWRlbnQtaGVscGVycyB7XG4gICAgICAgICAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLm1kLWJ1dHRvbi5zdHVkZW50LWhlbHBlcnMuYWN0aXZlIHtcbiAgICAgICAgICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5zdHVkZW50LWluZm8ge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgICAgei1pbmRleDogMTA7XG4gICAgICB9XG5cbiAgICAgIC5ob3Jpem9udGFsLXNjcm9sbC1zcGFjZXIge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6ICRib2R5UGFkZGluZztcbiAgICAgIH1cblxuICAgICAgLnF1ZXN0aW9uLWNlbGwge1xuICAgICAgICAuY3VycmVudCB7XG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgYm90dG9tOiAkY2VsbEhlaWdodDtcbiAgICAgICAgICB3aWR0aDogJGNlbGxXaWR0aDtcbiAgICAgICAgICBoZWlnaHQ6ICRjZWxsSGVpZ2h0O1xuICAgICAgICAgIGJvcmRlcjogM3B4IHNvbGlkICRja0hlYWRlckdyZXk7XG4gICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgLm1kLWJ1dHRvbiB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgIH1cbiAgICAgICAgLmFuY2hvciB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzVhYWRiYjtcbiAgICAgICAgICBoZWlnaHQ6IDBweDtcbiAgICAgICAgICB3aWR0aDogNTAlO1xuXG4gICAgICAgICAgLm1kLWJ1dHRvbiB7XG4gICAgICAgICAgICB6LWluZGV4OiAyO1xuICAgICAgICAgICAgJGhhbmRXaWR0aDogJGNlbGxXaWR0aCAqIDAuNTtcbiAgICAgICAgICAgICRoYW5kSGVpZ2h0OiAkaGFuZFdpZHRoICogMC44O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgYm90dG9tOiAkY2VsbEhlaWdodCAtIDJweDtcbiAgICAgICAgICAgIGxlZnQ6ICRjZWxsV2lkdGggKiAwLjUgLSAycHg7XG4gICAgICAgICAgICB3aWR0aDogJGhhbmRXaWR0aDtcbiAgICAgICAgICAgIG1pbi13aWR0aDogJGhhbmRXaWR0aDtcbiAgICAgICAgICAgIGhlaWdodDogJGhhbmRIZWlnaHQ7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiAkaGFuZEhlaWdodDtcblxuICAgICAgICAgICAgYm94LXNoYWRvdzogMXB4IC0xcHggM3B4IDFweCByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAkaGFuZFdpZHRoICRoYW5kV2lkdGggMCAwO1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuXG4gICAgICAgICAgICBpIHtcbiAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDFweDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJi5hY3RpdmUtaGVscGVyIHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgICAgICAgIGkge1xuICAgICAgICAgICAgICAgIEBleHRlbmQgLmNrLXN0dWRlbnRoZWxwZXJzO1xuICAgICAgICAgICAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJi5oZWxwIHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrWWVsbG93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJi5jaGVjayB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRja0dyZWVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJi5jaGF0IHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgICAgICAgIGkge1xuICAgICAgICAgICAgICAgIEBleHRlbmQgLmNrLWNoYXQ7XG4gICAgICAgICAgICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC5xdWVzdGlvbi1hbnN3ZXIge1xuICAgICAgICAgIG1heC13aWR0aDogNTAlO1xuXG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBAZXh0ZW5kIC50cnVuY2F0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLmNsYXNzLWNvZGUtdGlwIHtcbiAgICAgICAgY29sb3I6ICRjbGFzc2tpY2tXZWJHcmV5O1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiA2NXB4O1xuICAgICAgICBmb250LXNpemU6IDEzMCU7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cbiAgICAgICAgYSB7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDAuNWVtO1xuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC5ob3Jpem9udGFsLXNjcm9sbCB7XG5cbiAgICAgIG92ZXJmbG93LXk6IGhpZGRlbjtcbiAgICAgIG92ZXJmbG93LXg6IGF1dG87XG4gICAgICBAaW5jbHVkZSBjb250ZW50LWhlaWdodCgpO1xuXG4gICAgICAuaG9yaXpvbnRhbC1zY3JvbGwtY29udGVudCB7XG4gICAgICAgIEBpbmNsdWRlIGNvbnRlbnQtd2lkdGgoKTtcbiAgICAgICAgZmxleC1iYXNpczogbWF4LWNvbnRlbnQ7XG4gICAgICB9XG5cbiAgICAgICYubWQtb3JpZW50LWhvcml6b250YWwgLm1kLXZpcnR1YWwtcmVwZWF0LXNjcm9sbGVyIHtcbiAgICAgICAgJjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuXG4gICAgICAucXVlc3Rpb24tY2VsbCwgLnF1ZXN0aW9uLWNlbGwtaGVhZGVyIHtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBoZWlnaHQ6ICRjZWxsSGVpZ2h0O1xuICAgICAgICB3aWR0aDogJGNlbGxXaWR0aDtcbiAgICAgICAgbWFyZ2luOiAkY2VsbFBhZGRpbmc7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuXG4gICAgICAgIC5tZC1idXR0b24ge1xuICAgICAgICAgIEBleHRlbmQgLm1kLWJ1dHRvbi5zcXVhcmU7XG5cbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIG1pbi13aWR0aDogMTAwJTtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5xdWVzdGlvbi13b3JrLWNvbnRlbnQge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogMzBweDtcbiAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgcGFkZGluZzogMCAwLjllbTtcblxuICAgICAgICAgID4gZGl2IHtcbiAgICAgICAgICAgIHdpZHRoOiAxMCU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLnF1ZXN0aW9uLXdvcmstY29udGVudC5zY29yZS1tZWV0cyB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrR3JhZGluZ01lZXRzO1xuICAgICAgICB9XG5cbiAgICAgICAgLnF1ZXN0aW9uLXdvcmstY29udGVudC5zY29yZS1hcHByb2FjaGVzIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tHcmFkaW5nQXBwcm9hY2hlcztcbiAgICAgICAgfVxuXG4gICAgICAgIC5xdWVzdGlvbi13b3JrLWNvbnRlbnQuc2NvcmUtYmVsb3cge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRja0dyYWRpbmdCZWxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIC5xdWVzdGlvbi13b3JrLWNvbnRlbnQuc2NvcmUtbm9uZSB7XG4gICAgICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICAucXVlc3Rpb24tY2VsbC1oZWFkZXIge1xuICAgICAgICBoZWlnaHQ6ICRoZWFkZXJSb3dIZWlnaHQ7XG4gICAgICAgIHdpZHRoOiBjYWxjKCN7JGNlbGxXaWR0aH0gKyAjeyRjZWxsUGFkZGluZ30gKiAyKTtcbiAgICAgICAgbWFyZ2luOiAwO1xuXG4gICAgICAgIC5udW1iZXIge1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICRja0xpc3RCYWNrZ3JvdW5kO1xuICAgICAgICAgIHdpZHRoOiAkY2VsbFdpZHRoO1xuICAgICAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgICAgICB9XG5cbiAgICAgICAgLnZhbHVlIHtcbiAgICAgICAgICBmb250LXNpemU6IDhwdDtcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5tZC1idXR0b24ge1xuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAkaGVhZGVyQ2VsbEhlaWdodDtcblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuLy8gQW5ndWxhciBNYXRlcmlhbCBwbGFjZXMgdGhlIG1kLXNlbGVjdCBtZW51IGluIHRoZSBnbG9iYWwgc2NvcGUsIGJ1dCBsZXRzIHlvdSBkZWZpbmUgYSBjb250YWluZXIgY2xhc3Ncbi8vIEFsbCBtZC1zZWxlY3Qgc3R5bGluZyBmb3IgdGhlIG9wdGlvbnMgc2hvdWxkIGJlIG5lc3RlZCB3aXRoaW4gXCIuc2Vzc2lvbi13YXRjaC1zZWxlY3QtbWVudVwiXG4uc2Vzc2lvbi13YXRjaC1zZWxlY3QtbWVudSBtZC1zZWxlY3QtbWVudSBtZC1jb250ZW50IHtcbiAgbWluLWhlaWdodDogMi4zZW07XG5cbiAgbWQtb3B0aW9uIHtcbiAgICBoZWlnaHQ6IDIuM2VtO1xuICB9XG5cbiAgLmhlbHAtcmVxdWVzdC1pbmRpY2F0b3Ige1xuICAgIHBhZGRpbmctbGVmdDogMWVtO1xuICB9XG59XG5cbi5oZWxwZWUtaW5ib3gtbWVudSB7XG4gIG1heC1oZWlnaHQ6IDMwZW07XG5cbiAgbWQtbWVudS1pdGVtIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRNZWRpdW07XG4gICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gIH1cblxuICBtZC1tZW51LWl0ZW0uY3VycmVudC1oZWxwZXJzLWl0ZW0sXG4gIG1kLW1lbnUtaXRlbS5oZWxwZXItaGlzdG9yeS1pdGVtIHtcbiAgICBzcGFuLm1lc3NhZ2Uge1xuICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICAgIH1cbiAgICBzcGFuLnRpbWUge1xuICAgICAgZm9udC1zaXplOiA5cHQ7XG4gICAgICBsaW5lLWhlaWdodDogOXB0O1xuICAgICAgY29sb3I6ICRja0ZhZGVkVGV4dEdyZXk7XG4gICAgICBmb250LWZhbWlseTogR290aGFtUm91bmRlZEJvb2s7XG4gICAgfVxuICAgIGkge1xuICAgICAgcGFkZGluZy1sZWZ0OiA0ZW07XG4gICAgICBmb250LXNpemU6IDAuNmVtO1xuICAgIH1cbiAgfVxuXG4gIG1kLW1lbnUtaXRlbS5jdXJyZW50LWhlbHBlcnMtaXRlbSAubWQtYnV0dG9uIHtcbiAgICBjb2xvcjogJGNrR3JlZW47XG4gIH1cblxuICBtZC1tZW51LWl0ZW0uaGVscGVyLWhpc3RvcnksXG4gIG1kLW1lbnUtaXRlbS5jdXJyZW50LWhlbHBlcnMge1xuICAgIG1heC1oZWlnaHQ6IDIuNWVtO1xuICAgIG1pbi1oZWlnaHQ6IDIuNWVtO1xuICAgIHBhZGRpbmc6IDAgMTZweDtcblxuICAgID4gKiB7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgIH1cbiAgfVxuXG4gIG1kLW1lbnUtaXRlbS5oZWxwZXItaGlzdG9yeSB7XG5cbiAgICAuY2hlY2stcmVxdWVzdHMtY291bnQge1xuICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgd2lkdGg6IDEuNWVtO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgfVxuXG4gIG1kLW1lbnUtaXRlbS5jdXJyZW50LWhlbHBlcnMge1xuICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAuaGVscC1yZXF1ZXN0cy1jb3VudCB7XG4gICAgICB3aWR0aDogMS41ZW07XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgfVxuICB9XG59XG4iLCIuc2Vzc2lvbi13b3JrIHtcblxuICAkY2VsbEhlaWdodDogMTAwcHg7XG4gICRjZWxsV2lkdGg6IDEzM3B4O1xuICAkY2VsbFBhZGRpbmc6IDEwcHg7XG4gICRpbmZvSGVpZ2h0OiBjYWxjKDMwcHggKyAjeyRjZWxsUGFkZGluZ30gKyAjeyRjZWxsUGFkZGluZ30pO1xuICAkcm93SGVpZ2h0OiBjYWxjKCN7JGNlbGxIZWlnaHR9ICsgI3skY2VsbFBhZGRpbmd9ICsgI3skY2VsbFBhZGRpbmd9KTtcblxuICAkaGVhZGVyQ2VsbEhlaWdodDogMjVweDtcbiAgJGhlYWRlclJvd0hlaWdodDogY2FsYygoKCN7JGhlYWRlckNlbGxIZWlnaHR9ICsgI3skY2VsbFBhZGRpbmd9ICsgI3skY2VsbFBhZGRpbmd9KSAqIDEuOSkpO1xuXG4gICR0YWJsZVBhZGRpbmc6IDEwcHg7XG4gICRib2R5UGFkZGluZzogMTZweDtcblxuICAvL2NhbGMoI3skcm93SGVpZ2h0fSAtICN7JGluZm9IZWlnaHR9KSAtLSBEb2Vzbid0IHdvcmsgaW4gU2FmYXJpXG4gICRzdHVkZW50SW5mb01hcmdpbkJvdHRvbTogY2FsYygjeyRjZWxsSGVpZ2h0fSAtIDMwcHgpO1xuXG4gICRzdHVkZW50SW5mb1dpZHRoOiAzMDBweDtcblxuICBoZWlnaHQ6IDEwMHZoO1xuXG4gIC5sb2FkaW5nLCAuZXJyb3Ige1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuXG4gIC5lcnJvci1jb250YWluZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kR3JleTtcbiAgfVxuXG4gIC5lcnJvciB7XG4gICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBwYWRkaW5nOiAxZW0gMmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBmb250LXNpemU6IDEyNSU7XG4gIH1cblxuICAub3B0aW9uIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcblxuICAgIG1kLXNlbGVjdC12YWx1ZS5tZC1zZWxlY3QtdmFsdWUge1xuICAgICAgcGFkZGluZy1ib3R0b206IDVweCAhaW1wb3J0YW50O1xuICAgICAgaGVpZ2h0OiAyLjNlbTtcbiAgICB9XG4gIH1cblxuICAubWQtYnV0dG9uLmNsYXNzLWNvZGUge1xuICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuXG4gICAgc3BhbiB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDFlbTtcbiAgICB9XG4gIH1cblxuICBtZC1zd2l0Y2gge1xuICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gIH1cblxuICAuc3R1ZGVudHMtb25saW5lIHtcbiAgICBmb250LXNpemU6IDAuOGVtO1xuICAgIGNvbG9yOiAkbGlnaHRUZXh0O1xuICB9XG5cbiAgLnF1ZXN0aW9uLWNlbGwgLm1kLWJ1dHRvbixcbiAgLmhvcml6b250YWwtc2Nyb2xsLWJ1dHRvbiAuYmFjayxcbiAgLmhvcml6b250YWwtc2Nyb2xsLWJ1dHRvbiAubmV4dCxcbiAgLnF1ZXN0aW9uLWNlbGwtaGVhZGVyIC5tZC1idXR0b24ge1xuICAgIG1pbi13aWR0aDogMTAwJTtcbiAgICBtaW4taGVpZ2h0OiAxMDAlO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbGluZS1oZWlnaHQ6ICRjZWxsSGVpZ2h0O1xuICB9XG5cbiAgLm9wdGlvbnMtYmFyIHtcbiAgICBtYXJnaW46IDA7XG4gICAgaGVpZ2h0OiBjYWxjKCN7JHRlYWNoZXJIZWFkZXJIZWlnaHR9IC8gMik7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWVlZWY7XG4gICAgcGFkZGluZy1sZWZ0OiAyZW07XG5cbiAgICAubWQtYnV0dG9uLmJhci1pdGVtIHtcbiAgICAgIG1hcmdpbjogMCAzcHg7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgICAgbWluLWhlaWdodDogdW5zZXQ7XG4gICAgICBtaW4td2lkdGg6IDgwcHg7XG5cbiAgICAgIHNwYW4ge1xuICAgICAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIC5oZWFkZXIge1xuXG4gICAgLm1kLWJ1dHRvbi5iYWNrIHtcblxuICAgICAgLmxhYmVsLm1kLXRvb2x0aXAge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuXG4gICAgICAmLnNob3ctbGFiZWwge1xuICAgICAgICBtaW4td2lkdGg6IDZlbTtcblxuICAgICAgICAuY29udGVudHMge1xuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAubGFiZWwubWQtdG9vbHRpcCB7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGhlbHAtaW5ib3gge1xuICAgICAgbWFyZ2luLWxlZnQ6IDFlbTtcbiAgICB9XG4gIH1cblxuICAuYm9keSB7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgd2lkdGg6IDEwMHZ3O1xuXG4gICAgLmJvZHktaGVhZCAuc3R1ZGVudC1pbmZvLCAuYm9keS1jb250ZW50IC5zdHVkZW50LWluZm8sIC5zdHVkZW50LWluZm8tc3BhY2VyIHtcbiAgICAgIG1pbi13aWR0aDogJHN0dWRlbnRJbmZvV2lkdGg7XG4gICAgICB3aWR0aDogJHN0dWRlbnRJbmZvV2lkdGg7XG4gICAgfVxuXG4gICAgLmJvZHktaGVhZCAuc3R1ZGVudC1pbmZvLCAuYm9keS1jb250ZW50IC5zdHVkZW50LWluZm8gLmluZm8ge1xuICAgICAgYm94LXNoYWRvdzogMHB4IDJweCA0cHggLTFweCByZ2JhKDAsMCwwLC4yKSwwIDRweCA1cHggMCByZ2JhKDAsMCwwLC4xNCksMCAxcHggMTBweCAwIHJnYmEoMCwwLDAsLjEyKTtcbiAgICAgIHotaW5kZXg6IDEwO1xuICAgIH1cblxuICAgIC5ib2R5LWhlYWQge1xuXG4gICAgICAuaG9yaXpvbnRhbC1zY3JvbGwtY29udGFpbmVyLCAuaG9yaXpvbnRhbC1zY3JvbGwtYnV0dG9uIHtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWVlZWY7XG4gICAgICB9XG5cbiAgICAgIC5ob3Jpem9udGFsLXNjcm9sbC1jb250YWluZXIge1xuICAgICAgICBtYXgtaGVpZ2h0OiAkaGVhZGVyUm93SGVpZ2h0O1xuICAgICAgICBvdmVyZmxvdy15OiBoaWRkZW47XG5cbiAgICAgICAgLmhvcml6b250YWwtc2Nyb2xsIHtcbiAgICAgICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuc3R1ZGVudC1pbmZvIHtcbiAgICAgICAgaGVpZ2h0OiAkaGVhZGVyUm93SGVpZ2h0O1xuICAgICAgICBwYWRkaW5nOiAwIDEuMmVtO1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGNrTGlzdEhlYWRlckJvcmRlcjtcblxuICAgICAgICBoMyB7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxZW07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLmhvcml6b250YWwtc2Nyb2xsLWJ1dHRvbiB7XG4gICAgICAgIHdpZHRoOiAkaGVhZGVyQ2VsbEhlaWdodDtcbiAgICAgICAgaGVpZ2h0OiAkaGVhZGVyUm93SGVpZ2h0O1xuXG4gICAgICAgIC5tZC1idXR0b24uYmFjaywgLm1kLWJ1dHRvbi5uZXh0IHtcbiAgICAgICAgICBAZXh0ZW5kIC5tZC1idXR0b24uc3F1YXJlO1xuXG4gICAgICAgICAgbWluLWhlaWdodDogY2FsYygjeyRoZWFkZXJDZWxsSGVpZ2h0fSArICN7JGhlYWRlckNlbGxIZWlnaHR9ICsgMnB4KTtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLmhvcml6b250YWwtc2Nyb2xsLWJ1dHRvbjpsYXN0LWNoaWxkIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAkYm9keVBhZGRpbmc7XG4gICAgICB9XG5cbiAgICAgIG1kLXN3aXRjaCB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuYm9keS1jb250ZW50IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kR3JleTtcblxuICAgICAgLmhpZGRlbiB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB9XG5cbiAgICAgIC5zdHVkZW50LWluZm8tY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgaGVpZ2h0OiAwO1xuICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICAgIH1cblxuICAgICAgLmZsZXgtYnJlYWsge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgIC52aXJ0dWFsLWNvbnRhaW5lciB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgIC5zdHVkZW50LWluZm8sIC5ob3Jpem9udGFsLXNjcm9sbCB7XG4gICAgICAgIEBpbmNsdWRlIGNvbnRlbnQtaGVpZ2h0KCk7XG4gICAgICAgIG1pbi1oZWlnaHQ6IGNhbGMoMTAwJSAtIDIuNWVtKTtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICAgICAgICAucm93IHtcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY2tMaXN0SGVhZGVyQm9yZGVyO1xuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIGhlaWdodDogJHJvd0hlaWdodDtcblxuICAgICAgICAgIHBhZGRpbmctbGVmdDogY2FsYygjeyRoZWFkZXJDZWxsSGVpZ2h0fSArICN7JHN0dWRlbnRJbmZvV2lkdGh9IC0gI3skY2VsbFBhZGRpbmd9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5pbmZvIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICBoZWlnaHQ6ICRpbmZvSGVpZ2h0O1xuICAgICAgICAgIHBhZGRpbmc6IC4xNWVtIDEuMmVtO1xuICAgICAgICAgIGNvbG9yOiAkY2tGYWRlZFRleHRHcmV5O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRzdHVkZW50SW5mb01hcmdpbkJvdHRvbTtcblxuICAgICAgICAgICYub25saW5le1xuICAgICAgICAgICAgY29sb3I6ICRja0NvcHlCbGFjaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuZGF0ZSB7XG4gICAgICAgICAgICBmb250LXNpemU6IDlwdDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiA5cHQ7XG5cbiAgICAgICAgICAgICYuaGlkZSB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC5zdHVkZW50LWluZm8tbGVmdCxcbiAgICAgICAgICAuc3R1ZGVudC1pbmZvLXJpZ2h0IHtcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuc3R1ZGVudC1oZWxwZXJzLW1lbnUge1xuICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAubWQtYnV0dG9uIHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiAyMXB4O1xuICAgICAgICAgICAgbWluLXdpZHRoOiAyLjVlbTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLm1kLWJ1dHRvbi5zdHVkZW50LWhlbHBlcnMge1xuICAgICAgICAgICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5tZC1idXR0b24uc3R1ZGVudC1oZWxwZXJzLmFjdGl2ZSB7XG4gICAgICAgICAgICBjb2xvcjogJGNrR3JlZW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5zdHVkZW50LWluZm8ge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgei1pbmRleDogMTA7XG5cbiAgICAgICAgPiAqIHtcbiAgICAgICAgICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuaG9yaXpvbnRhbC1zY3JvbGwtc3BhY2VyIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAkYm9keVBhZGRpbmc7XG4gICAgICB9XG5cbiAgICAgIC5xdWVzdGlvbi1jZWxsIHtcblxuICAgICAgICBhc3NpZ25tZW50LXNoZWV0IHtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgd2lkdGg6ICRjZWxsV2lkdGg7XG4gICAgICAgICAgaGVpZ2h0OiAkY2VsbEhlaWdodDtcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuXG4gICAgICAgICAgLyogT3VyIGNhbnZhcyBpcyAyOjEsIHNvIGNhbGN1bGF0ZSBoZWlnaHQgYmFzZWQgb24gd2lkdGggKi9cbiAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgaGVpZ2h0OiBjYWxjKDIgKiAjeyRjZWxsV2lkdGh9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAuY3VycmVudCB7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgYm90dG9tOiAkY2VsbEhlaWdodDtcbiAgICAgICAgICB3aWR0aDogJGNlbGxXaWR0aDtcbiAgICAgICAgICBoZWlnaHQ6ICRjZWxsSGVpZ2h0O1xuICAgICAgICAgIGJvcmRlcjogM3B4IHNvbGlkICRja0hlYWRlckdyZXk7XG4gICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICA+IC5tZC1idXR0b24ge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgLnF1ZXN0aW9uLXNjb3JlIHtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgd2lkdGg6IDQycHg7XG4gICAgICAgICAgaGVpZ2h0OiAyN3B4O1xuICAgICAgICAgIG1hcmdpbjogM3B4O1xuICAgICAgICB9XG5cbiAgICAgICAgLnF1ZXN0aW9uLWFuc3dlciB7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICBtaW4td2lkdGg6IDQycHg7XG4gICAgICAgICAgbWF4LXdpZHRoOiBjYWxjKCN7JGNlbGxXaWR0aH0gLSA2cHgpO1xuICAgICAgICAgIGhlaWdodDogMjdweDtcbiAgICAgICAgICBtYXJnaW46IDNweDtcbiAgICAgICAgICBwYWRkaW5nOiAwIDNweDtcblxuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgQGV4dGVuZCAudHJ1bmNhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLnF1ZXN0aW9uLWFuc3dlci5jb3JyZWN0IHtcbiAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrR3JhZGluZ01lZXRzO1xuICAgICAgICB9XG5cbiAgICAgICAgLnF1ZXN0aW9uLWFuc3dlci5pbmNvcnJlY3Qge1xuICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tHcmFkaW5nQmVsb3c7XG4gICAgICAgIH1cblxuICAgICAgICAucXVlc3Rpb24tYW5zd2VyLm5vLWNvcnJlY3Qge1xuICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgICAgICB9XG5cbiAgICAgICAgLnF1ZXN0aW9uLWFuc3dlci5oaWRlIHtcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgLmFuY2hvciB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzVhYWRiYjtcbiAgICAgICAgICBoZWlnaHQ6IDA7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgICAgICAubWQtYnV0dG9uIHtcbiAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgIHotaW5kZXg6IDI7XG4gICAgICAgICAgICAkaGFuZFdpZHRoOiA0NXB4O1xuICAgICAgICAgICAgJGhhbmRIZWlnaHQ6ICRoYW5kV2lkdGggKiAwLjg7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICBib3R0b206IC04cHg7XG4gICAgICAgICAgICByaWdodDogMnB4O1xuICAgICAgICAgICAgd2lkdGg6ICRoYW5kV2lkdGg7XG4gICAgICAgICAgICBtaW4td2lkdGg6ICRoYW5kV2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQ6ICRoYW5kSGVpZ2h0O1xuICAgICAgICAgICAgbWluLWhlaWdodDogJGhhbmRIZWlnaHQ7XG5cbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDFweCAtMXB4IDNweCAxcHggcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJGhhbmRXaWR0aCAkaGFuZFdpZHRoIDAgMDtcbiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgICAgICAgICAgaSB7XG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYuYWN0aXZlLWhlbHBlciB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgICBpIHtcbiAgICAgICAgICAgICAgICBAZXh0ZW5kIC5jay1zdHVkZW50aGVscGVycztcbiAgICAgICAgICAgICAgICBjb2xvcjogJGNrR3JlZW47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYuaGVscCB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRja1llbGxvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYuY2hlY2sge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYuY2hhdCB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgICBpIHtcbiAgICAgICAgICAgICAgICBAZXh0ZW5kIC5jay1jaGF0O1xuICAgICAgICAgICAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuY2xhc3MtY29kZS10aXAge1xuICAgICAgICBjb2xvcjogJGNsYXNza2lja1dlYkdyZXk7XG4gICAgICAgIHBhZGRpbmctdG9wOiAyZW07XG4gICAgICAgIHBhZGRpbmctbGVmdDogMmVtO1xuICAgICAgICBoZWlnaHQ6IDY1cHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTMwJTtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICAgICAgICBhIHtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMC41ZW07XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmhvcml6b250YWwtc2Nyb2xsIHtcblxuICAgICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgICAgb3ZlcmZsb3cteDogYXV0bztcbiAgICAgIEBpbmNsdWRlIGNvbnRlbnQtaGVpZ2h0KCk7XG5cbiAgICAgIC5ob3Jpem9udGFsLXNjcm9sbC1jb250ZW50IHtcbiAgICAgICAgQGluY2x1ZGUgY29udGVudC13aWR0aCgpO1xuICAgICAgICBmbGV4LWJhc2lzOiBtYXgtY29udGVudDtcbiAgICAgIH1cblxuICAgICAgJjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuXG4gICAgICAucXVlc3Rpb24tY2VsbCwgLnF1ZXN0aW9uLWNlbGwtaGVhZGVyIHtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBoZWlnaHQ6ICRjZWxsSGVpZ2h0O1xuICAgICAgICB3aWR0aDogJGNlbGxXaWR0aDtcbiAgICAgICAgbWFyZ2luOiAkY2VsbFBhZGRpbmc7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuXG4gICAgICAgID4gLm1kLWJ1dHRvbiB7XG4gICAgICAgICAgQGV4dGVuZCAubWQtYnV0dG9uLnNxdWFyZTtcblxuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBoZWlnaHQ6ICRjZWxsSGVpZ2h0O1xuICAgICAgICAgIG1pbi13aWR0aDogJGNlbGxXaWR0aDtcbiAgICAgICAgICB3aWR0aDogJGNlbGxXaWR0aDtcbiAgICAgICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5xdWVzdGlvbi13b3JrLWNvbnRlbnQge1xuICAgICAgICAgIHdpZHRoOiAkY2VsbFdpZHRoO1xuICAgICAgICAgIGhlaWdodDogJGNlbGxIZWlnaHQ7XG4gICAgICAgICAgY29sb3I6IHdoaXRlO1xuXG4gICAgICAgICAgLmhlbHAtaWNvbnMge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNrSGVhZGVyR3JleTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLnF1ZXN0aW9uLWNlbGwtaGVhZGVyIHtcbiAgICAgICAgaGVpZ2h0OiAkaGVhZGVyUm93SGVpZ2h0O1xuICAgICAgICB3aWR0aDogY2FsYygjeyRjZWxsV2lkdGh9ICsgI3skY2VsbFBhZGRpbmd9ICogMik7XG4gICAgICAgIG1hcmdpbjogMDtcblxuICAgICAgICAubnVtYmVyIHtcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICRja0xpc3RCYWNrZ3JvdW5kO1xuICAgICAgICAgIHdpZHRoOiAkY2VsbFdpZHRoO1xuICAgICAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgICAgICB9XG5cbiAgICAgICAgLnZhbHVlIHtcbiAgICAgICAgICBmb250LXNpemU6IDhwdDtcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5tZC1idXR0b24ge1xuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAkaGVhZGVyQ2VsbEhlaWdodDtcblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuLy8gQW5ndWxhciBNYXRlcmlhbCBwbGFjZXMgdGhlIG1kLXNlbGVjdCBtZW51IGluIHRoZSBnbG9iYWwgc2NvcGUsIGJ1dCBsZXRzIHlvdSBkZWZpbmUgYSBjb250YWluZXIgY2xhc3Ncbi8vIEFsbCBtZC1zZWxlY3Qgc3R5bGluZyBmb3IgdGhlIG9wdGlvbnMgc2hvdWxkIGJlIG5lc3RlZCB3aXRoaW4gXCIuc2Vzc2lvbi13YXRjaC1zZWxlY3QtbWVudVwiXG4uc2Vzc2lvbi13YXRjaC1zZWxlY3QtbWVudSBtZC1zZWxlY3QtbWVudSBtZC1jb250ZW50IHtcbiAgbWluLWhlaWdodDogMi4zZW07XG5cbiAgbWQtb3B0aW9uIHtcbiAgICBoZWlnaHQ6IDIuM2VtO1xuICB9XG5cbiAgLmhlbHAtcmVxdWVzdC1pbmRpY2F0b3Ige1xuICAgIHBhZGRpbmctbGVmdDogMWVtO1xuICB9XG59XG5cbi5oZWxwZWUtaW5ib3gtbWVudSB7XG4gIG1heC1oZWlnaHQ6IDMwZW07XG5cbiAgbWQtbWVudS1pdGVtIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGJhY2tncm91bmRHcmV5O1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRNZWRpdW07XG4gICAgY29sb3I6ICRja0hlYWRlckdyZXk7XG4gIH1cblxuICBtZC1tZW51LWl0ZW0uY3VycmVudC1oZWxwZXJzLWl0ZW0sXG4gIG1kLW1lbnUtaXRlbS5oZWxwZXItaGlzdG9yeS1pdGVtIHtcbiAgICBzcGFuLm1lc3NhZ2Uge1xuICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udFJvdW5kZWRCb29rO1xuICAgIH1cbiAgICBzcGFuLnRpbWUge1xuICAgICAgZm9udC1zaXplOiA5cHQ7XG4gICAgICBsaW5lLWhlaWdodDogOXB0O1xuICAgICAgY29sb3I6ICRja0ZhZGVkVGV4dEdyZXk7XG4gICAgICBmb250LWZhbWlseTogR290aGFtUm91bmRlZEJvb2s7XG4gICAgfVxuICAgIGkge1xuICAgICAgcGFkZGluZy1sZWZ0OiA0ZW07XG4gICAgICBmb250LXNpemU6IDAuNmVtO1xuICAgIH1cbiAgfVxuXG4gIG1kLW1lbnUtaXRlbS5jdXJyZW50LWhlbHBlcnMtaXRlbSAubWQtYnV0dG9uIHtcbiAgICBjb2xvcjogJGNrR3JlZW47XG4gIH1cblxuICBtZC1tZW51LWl0ZW0uaGVscGVyLWhpc3RvcnksXG4gIG1kLW1lbnUtaXRlbS5jdXJyZW50LWhlbHBlcnMge1xuICAgIG1heC1oZWlnaHQ6IDIuNWVtO1xuICAgIG1pbi1oZWlnaHQ6IDIuNWVtO1xuICAgIHBhZGRpbmc6IDAgMTZweDtcblxuICAgID4gKiB7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgIH1cbiAgfVxuXG4gIG1kLW1lbnUtaXRlbS5oZWxwZXItaGlzdG9yeSB7XG5cbiAgICAuY2hlY2stcmVxdWVzdHMtY291bnQge1xuICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgd2lkdGg6IDEuNWVtO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgfVxuXG4gIG1kLW1lbnUtaXRlbS5jdXJyZW50LWhlbHBlcnMge1xuICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAuaGVscC1yZXF1ZXN0cy1jb3VudCB7XG4gICAgICB3aWR0aDogMS41ZW07XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgfVxuICB9XG59XG5cbi5maWx0ZXItbWVudSB7XG5cbiAgbWQtc3dpdGNoIHtcbiAgICBtYXJnaW46IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICBmb250LXNpemU6IDAuOGVtO1xuICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICB9XG59XG5cbi5ibGFuay1zbGF0ZSB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgei1pbmRleDogNTA7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG59XG4iLCIuc2lnbnVwLWNob2ljZSB7XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICB3aWR0aDogMTAwdnc7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vYXNzZXRzL2ltYWdlcy90aWxlLnBuZycpO1xuICBwYWRkaW5nOiAwIDhweCA4cHggOHB4O1xuICBvdmVyZmxvdzogYXV0bztcblxuICAuaGVhZGVyLWJ1dHRvbnMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctdG9wOiAuNWVtO1xuICB9XG5cbiAgLm1ham9yLWhlYWRlciB7XG4gICAgaW1nIHtcbiAgICAgIHdpZHRoOiA2ZW07XG4gICAgfVxuICAgIG1hcmdpbi1ib3R0b206IC4yNWVtO1xuICB9XG5cbiAgLmJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgd2lkdGg6IDYwMHB4O1xuICAgIG1heC13aWR0aDogMTAwJTtcblxuICAgIC5ib2R5LWhlYWRlciB7XG4gICAgICBoZWlnaHQ6IDUuNmVtO1xuXG4gICAgICAuY2xhc3NraWNrLWhlYWRlciB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTNwdDtcbiAgICAgIH1cblxuICAgICAgLmVuZCB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgbWF4LXdpZHRoOiA5MHB4O1xuICAgICAgfVxuXG4gICAgICAuZW5kIC5tZC1idXR0b24ge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuYm9keS1jb250ZW50IHtcbiAgICAgIHBhZGRpbmc6IDAgMi41ZW0gMi41ZW0gMi41ZW07XG5cbiAgICAgIC5tZC1idXR0b24udGVhY2hlcixcbiAgICAgIC5tZC1idXR0b24uc3R1ZGVudCB7XG4gICAgICAgIG1heC1oZWlnaHQ6IDE2ZW07XG4gICAgICAgIG1hcmdpbjogMCAyLjVlbTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgICAgIGltZyB7XG4gICAgICAgICAgbWFyZ2luOiAxZW0gYXV0bztcbiAgICAgICAgfVxuXG4gICAgICAgIHAge1xuICAgICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubG9hZGluZyB7XG4gICAgbWFyZ2luLXRvcDogOGVtO1xuICAgIGhlaWdodDogMTAwcHg7XG4gICAgd2lkdGg6IDEwMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgfVxuXG59XG5cbiIsIi5zaWdudXAge1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgd2lkdGg6IDEwMHZ3O1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uL2Fzc2V0cy9pbWFnZXMvdGlsZS5wbmcnKTtcbiAgcGFkZGluZzogMCA4cHggMjBweCA4cHg7XG4gIG92ZXJmbG93OiBhdXRvO1xuXG4gIC5oZWFkZXItYnV0dG9ucyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy10b3A6IC41ZW07XG4gIH1cblxuICAubWFqb3ItaGVhZGVyIHtcbiAgICBpbWcge1xuICAgICAgd2lkdGg6IDZlbTtcbiAgICB9XG4gICAgbWFyZ2luLWJvdHRvbTogLjI1ZW07XG4gIH1cblxuICAuYm9keSB7XG4gICAgd2lkdGg6IDQyNXB4O1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuXG4gICAgLmJvZHktaGVhZGVyIHtcbiAgICAgIGhlaWdodDogNS42ZW07XG5cbiAgICAgIC5jbGFzc2tpY2staGVhZGVyIHtcbiAgICAgICAgZm9udC1zaXplOiAxM3B0O1xuICAgICAgfVxuXG4gICAgICAuZW5kIHtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBtYXgtd2lkdGg6IDkwcHg7XG4gICAgICB9XG5cbiAgICAgIC5lbmQgLm1kLWJ1dHRvbiB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5ib2R5LWNvbnRlbnQge1xuICAgICAgcGFkZGluZzogMCAyLjVlbSAyMHB4IDIuNWVtO1xuXG4gICAgICBpbnB1dCB7XG4gICAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgdGV4dC1zaGFkb3c6IDBweCAwcHggMHB4ICRja0hlYWRlckdyZXk7IC8qIGNoYW5nZSBbaW5wdXQgZm9udF0gYnkgdGhpcyovXG4gICAgICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIH1cblxuICAgICAgLmVycm9yLW1lc3NhZ2VzIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDQycHg7XG4gICAgICAgIGxlZnQ6IDEycHg7XG5cbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBmb250LXNpemU6IDdwdDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZC1pbnB1dC1jb250YWluZXIuZW1haWwsXG4gICAgICBtZC1pbnB1dC1jb250YWluZXIuZW1haWwtb3ItdXNlcm5hbWUsXG4gICAgICBtZC1pbnB1dC1jb250YWluZXIucGFzc3dvcmQge1xuICAgICAgICBtYXJnaW46IDE2cHggMCAyMHB4IDA7XG4gICAgICB9XG5cbiAgICAgIC5jaGVja2JveGVzIHtcbiAgICAgICAgbWFyZ2luOiAwIDAgMjBweCAwO1xuICAgICAgfVxuXG4gICAgICBtZC1jaGVja2JveCB7XG4gICAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgICAgICBmb250LWZhbWlseTogR290aGFtUm91bmRlZE1lZGl1bTtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjk1KTtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgfVxuXG4gICAgICAubWQtYnV0dG9uIHtcbiAgICAgICAgbWFyZ2luOiAwIDNweDtcblxuICAgICAgICAmLmdvb2dsZS1zaWduLWluIHtcbiAgICAgICAgICBpbWcge1xuICAgICAgICAgICAgd2lkdGg6IDE4cHg7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDFlbTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLm9yIHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBtYXJnaW46IDVweCAwO1xuICAgICAgfVxuXG4gICAgICBwIHtcbiAgICAgICAgbWFyZ2luOiAwIDAgOHB4IDA7XG4gICAgICAgIGNvbG9yOiAkY2tXYXJuO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICB9XG5cbiAgICAgIC5zZXBhcmF0b3Ige1xuICAgICAgICBtYXJnaW46IDIwcHggMCAxNXB4IDA7XG4gICAgICAgIGhlaWdodDogMXB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZEdyZXk7XG4gICAgICB9XG5cbiAgICAgIC5hZ3JlZW1lbnQge1xuXG4gICAgICAgIC5zZWN0aW9uLWhlYWRlciB7XG4gICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDAuNWVtO1xuICAgICAgICB9XG5cbiAgICAgICAgLm1kLWJ1dHRvbiB7XG4gICAgICAgICAgbWFyZ2luOiAwLjJlbTtcbiAgICAgICAgICBwYWRkaW5nOiAwIDFlbTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5sb2FkaW5nIHtcbiAgICBtYXJnaW4tdG9wOiA4ZW07XG4gICAgaGVpZ2h0OiAxMDBweDtcbiAgICB3aWR0aDogMTAwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICB9XG5cbn1cbiIsIi5zaWdudXAtbmFtZSB7XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICB3aWR0aDogMTAwdnc7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vYXNzZXRzL2ltYWdlcy90aWxlLnBuZycpO1xuICBwYWRkaW5nOiAwIDhweCA1cHggOHB4O1xuXG4gIC5oZWFkZXItYnV0dG9ucyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy10b3A6IC41ZW07XG4gIH1cblxuICAubWFqb3ItaGVhZGVyIHtcbiAgICBpbWcge1xuICAgICAgd2lkdGg6IDZlbTtcbiAgICB9XG4gICAgbWFyZ2luLWJvdHRvbTogLjI1ZW07XG4gIH1cblxuICAuYm9keSB7XG4gICAgd2lkdGg6IDM5MHB4O1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuXG4gICAgLmJvZHktaGVhZGVyIHtcbiAgICAgIGhlaWdodDogNWVtO1xuXG4gICAgICAuY2xhc3NraWNrLWhlYWRlciB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTNwdDtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC5ib2R5LWNvbnRlbnQge1xuICAgICAgcGFkZGluZzogMCAyLjVlbSAyNnB4IDIuNWVtO1xuXG4gICAgICBpbnB1dCB7XG4gICAgICAgIGNvbG9yOiAkY2tHcmVlbjtcbiAgICAgICAgdGV4dC1zaGFkb3c6IDBweCAwcHggMHB4ICRja0hlYWRlckdyZXk7XG4gICAgICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIH1cblxuICAgICAgLmVycm9yLW1lc3NhZ2VzIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDQycHg7XG4gICAgICAgIGxlZnQ6IDEycHg7XG5cbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBmb250LXNpemU6IDdwdDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIG1kLWlucHV0LWNvbnRhaW5lci5maXJzdC1uYW1lLFxuICAgICAgbWQtaW5wdXQtY29udGFpbmVyLmxhc3QtbmFtZSB7XG4gICAgICAgIG1hcmdpbjogMjVweCAwIDAgMDtcbiAgICAgIH1cblxuICAgICAgLm1kLWJ1dHRvbi5jay1wcmltYXJ5IHtcbiAgICAgICAgbWFyZ2luOiAyMHB4IDVweCAwIDVweDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubG9hZGluZyB7XG4gICAgbWFyZ2luLXRvcDogOGVtO1xuICAgIGhlaWdodDogMTAwcHg7XG4gICAgd2lkdGg6IDEwMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgfVxuXG59XG4iLCIuc2lnbnVwLXByby1pbnZpdGUge1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgd2lkdGg6IDEwMHZ3O1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uL2Fzc2V0cy9pbWFnZXMvdGlsZS5wbmcnKTtcbiAgcGFkZGluZzogMCA4cHggMjBweCA4cHg7XG4gIG92ZXJmbG93OiBhdXRvO1xuXG4gIC5oZWFkZXItYnV0dG9ucyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy10b3A6IC41ZW07XG4gIH1cblxuICAubWFqb3ItaGVhZGVyIHtcbiAgICBpbWcge1xuICAgICAgd2lkdGg6IDZlbTtcbiAgICB9XG4gICAgbWFyZ2luLWJvdHRvbTogLjI1ZW07XG4gIH1cblxuXG4gIC5ib2R5IHtcbiAgICB3aWR0aDogNDEwcHg7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG5cbiAgICAuYm9keS1oZWFkZXIge1xuXG4gICAgICBoZWlnaHQ6IDRlbTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICBkaXYge1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgIC5jbGFzc2tpY2staGVhZGVyIHtcbiAgICAgICAgZm9udC1zaXplOiAxM3B0O1xuICAgICAgfVxuXG4gICAgICAuZW5kIHtcbiAgICAgICAgd2lkdGg6IDYwcHg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmJvZHktY29udGVudCB7XG4gICAgICBwYWRkaW5nOiAwIDEuNWVtIDEuNWVtIDEuNWVtO1xuXG4gICAgICAuZXJyb3ItbWVzc2FnZXMge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogNDJweDtcbiAgICAgICAgbGVmdDogMTJweDtcblxuICAgICAgICBkaXYge1xuICAgICAgICAgIGZvbnQtc2l6ZTogN3B0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlucHV0IHtcbiAgICAgICAgY29sb3I6ICRja0dyZWVuO1xuICAgICAgICB0ZXh0LXNoYWRvdzogMHB4IDBweCAwcHggJGNrSGVhZGVyR3JleTsgLyogY2hhbmdlIFtpbnB1dCBmb250XSBieSB0aGlzKi9cbiAgICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgfVxuXG4gICAgICBwIHtcbiAgICAgICAgbWFyZ2luOiAxMHB4IDAgMTVweCAwO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgICAgfVxuXG4gICAgICBtZC1pbnB1dC1jb250YWluZXIucHJvLWludml0ZS1jb2RlIHtcbiAgICAgICAgbWFyZ2luOiAxNnB4IDEycHggMjBweCAxMnB4O1xuICAgICAgfVxuXG4gICAgICAubWQtYnV0dG9uLmNrLXByaW1hcnkge1xuICAgICAgICBtYXJnaW46IDEwcHggMTVweCAwIDE1cHg7XG4gICAgICB9XG5cbiAgICAgIC5zZXBhcmF0b3Ige1xuICAgICAgICBtYXJnaW46IDIwcHggMCAyMHB4IDA7XG4gICAgICAgIGhlaWdodDogMXB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZEdyZXk7XG4gICAgICB9XG5cbiAgICAgIC5ub3QtcHJvIHtcbiAgICAgICAgbWFyZ2luOiAwIDhweCAwIDhweDtcblxuICAgICAgICBhIHtcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAuZXJyb3Ige1xuICAgICAgd2lkdGg6IDM5MHB4O1xuICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIH1cblxuICB9XG5cbiAgLmxvYWRpbmcge1xuICAgIG1hcmdpbi10b3A6IDhlbTtcbiAgICBoZWlnaHQ6IDEwMHB4O1xuICAgIHdpZHRoOiAxMDBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIH1cblxufVxuXG4iLCIuc2lnbnVwLXNjaG9vbCB7XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICB3aWR0aDogMTAwdnc7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vYXNzZXRzL2ltYWdlcy90aWxlLnBuZycpO1xuICBwYWRkaW5nOiAwIDhweCA1cHggOHB4O1xuXG4gIC5oZWFkZXItYnV0dG9ucyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy10b3A6IC41ZW07XG4gIH1cblxuICAubWFqb3ItaGVhZGVyIHtcbiAgICBpbWcge1xuICAgICAgd2lkdGg6IDZlbTtcbiAgICB9XG4gICAgbWFyZ2luLWJvdHRvbTogLjI1ZW07XG4gIH1cblxuICAuYm9keSB7XG4gICAgd2lkdGg6IDQ0NXB4O1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuXG4gICAgLmJvZHktaGVhZGVyIHtcbiAgICAgIGhlaWdodDogNWVtO1xuXG4gICAgICAuY2xhc3NraWNrLWhlYWRlciB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTNwdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuYm9keS1jb250ZW50IHtcbiAgICAgIHBhZGRpbmc6IDAgMi41ZW0gMjZweCAyLjVlbTtcblxuICAgICAgaW5wdXQge1xuICAgICAgICBjb2xvcjogJGNrR3JlZW47XG4gICAgICAgIHRleHQtc2hhZG93OiAwcHggMHB4IDBweCAkY2tIZWFkZXJHcmV5O1xuICAgICAgICAtd2Via2l0LXRleHQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIC5lcnJvci1tZXNzYWdlcyB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiA0MnB4O1xuICAgICAgICBsZWZ0OiAxMnB4O1xuXG4gICAgICAgIGRpdiB7XG4gICAgICAgICAgZm9udC1zaXplOiA3cHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLm1kLWJ1dHRvbi5jay1wcmltYXJ5IHtcbiAgICAgICAgbWFyZ2luOiAyMHB4IDVweCAwIDVweDtcbiAgICAgIH1cblxuICAgICAgLnNlY29uZGFyeS1kZXRhaWxzIHtcbiAgICAgICAgLnNjaG9vbC1jaXR5IHtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICAgICAgfVxuICAgICAgICBtZC1hdXRvY29tcGxldGUge1xuICAgICAgICAgIG1heC13aWR0aDogMTQ1cHg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubG9hZGluZyB7XG4gICAgbWFyZ2luLXRvcDogOGVtO1xuICAgIGhlaWdodDogMTAwcHg7XG4gICAgd2lkdGg6IDEwMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgfVxuXG59XG4iLCIuc3R1ZGVudC1hY2NvdW50LWFzc2lnbm1lbnQtb3ZlcnZpZXcge1xuICBoZWlnaHQ6IDEwMHZoO1xuXG4gIC5hc3NpZ25tZW50LXF1ZXN0aW9uLWhlYWRlciB7XG5cbiAgICBoZWxwLWluYm94IHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAxZW07XG4gICAgfVxuXG4gIH1cblxuICAuY29udGVudCB7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmRHcmV5O1xuXG4gICAgYXNzaWdubWVudC1zaGVldCB7XG4gICAgICAvKiBBc3BlY3QgcmF0aW8gaXMgNDozLiAqL1xuICAgICAgYm94LXNoYWRvdzogMnB4IDJweCAycHggI2NjYztcbiAgICAgIGhlaWdodDogMzN2dztcbiAgICAgIHdpZHRoOiA0NHZ3O1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIG1hcmdpbjogLjVlbTtcblxuICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICAgIC8qIE91ciBjYW52YXMgaXMgMjoxLCBzbyBoZWlnaHQgb2YgdGhlIGNhbnZhcyBzaG91bGQgYmUgdHdpY2UgdGhhdCBvZiBpdHMgc2hvcnQgZGltZW5zaW9uICovXG4gICAgICBzdmcge1xuICAgICAgICBoZWlnaHQ6IDg4dnc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3R5bGVzIGZvciBtb2JpbGUgZGV2aWNlcyB3aXRoIHdpZHRocyA8IDg2MHB4O1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDg2MHB4KSB7XG5cbiAgICAgIGFzc2lnbm1lbnQtc2hlZXQuc21hbGwtY2FudmFzIHtcbiAgICAgICAgaGVpZ2h0OiA2MHZ3O1xuICAgICAgICBtYXJnaW46IDF2dyAxdncgMHZ3IDF2dztcbiAgICAgICAgd2lkdGg6IDgwdnc7IC8vIEFzcGVjdCByYXRpbyBpcyA0OjMuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmVycm9yIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAxLjVlbTtcbiAgfVxufVxuIiwiLnN0dWRlbnQtYWNjb3VudC1hc3NpZ25tZW50LWZlZWRiYWNrIHtcblxuICBoZWlnaHQ6IDEwMHZoO1xuXG4gIC5hc3NpZ25tZW50LXF1ZXN0aW9uLWhlYWRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNrU3R1ZGVudEhlbHBlcjtcbiAgICBjb2xvcjogd2hpdGU7XG5cbiAgICAubWQtYnV0dG9uLmJhci1pdGVtLmJhY2sge1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgIH1cblxuICAgIGhlbHAtaW5ib3gge1xuICAgICAgbWFyZ2luLWxlZnQ6IDFlbTtcbiAgICB9XG5cbiAgICAuY2xhc3NraWNrLWhlYWRlciB7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgfVxuICB9XG5cbiAgLmVycm9yIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAxLjVlbTtcbiAgfVxufVxuIiwiLnVzZXItbm90aWZpY2F0aW9ucy1saXN0IHtcbiAgbWluLWhlaWdodDogY2FsYygxMDB2aCk7XG4gIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmgpO1xuXG4gIC5saXN0LWhlYWRlciB7XG4gICAgLmNvbCB7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG5cbiAgICAgICYubm90aWZpY2F0aW9uLXRleHQge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgIH1cblxuICAgICAgJi5yZWNlaXZlZCB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDI2cHg7XG4gICAgICB9XG5cbiAgICB9XG4gIH1cblxuICBtZC1saXN0IHtcbiAgICBtaW4taGVpZ2h0OiAkdGVhY2hlckxpc3RIZWlnaHQ7XG4gICAgbWF4LWhlaWdodDogJHRlYWNoZXJMaXN0SGVpZ2h0O1xuICAgIG92ZXJmbG93OiBhdXRvO1xuXG4gICAgbWQtbGlzdC1pdGVtIHtcblxuICAgICAgLmluZGljYXRvci1jaXJjbGUge1xuICAgICAgICB0b3A6IDBweDtcbiAgICAgICAgaGVpZ2h0OiAxMHB4O1xuICAgICAgICB3aWR0aDogMTBweDtcblxuICAgICAgICAmLnNlZW4ge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuY29sIHtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuXG4gICAgICAgICYubm90aWZpY2F0aW9uLXRleHQge1xuXG4gICAgICAgICAgLnRydW5jYXRlIHtcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJi5yZWNlaXZlZCB7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiAwcHg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgfVxuICB9XG59XG4iLCIuc3R1ZGVudC1hY2NvdW50LWFzc2lnbm1lbnQtd29yayB7XG4gIGhlaWdodDogMTAwdmg7XG5cbiAgLmFzc2lnbm1lbnQtcXVlc3Rpb24taGVhZGVyIHtcblxuICAgIGhlbHAtaW5ib3gge1xuICAgICAgbWFyZ2luLWxlZnQ6IDFlbTtcbiAgICB9XG5cbiAgfVxuXG4gIC5lcnJvciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogMS41ZW07XG4gIH1cbn1cbiIsIi5zdHVkZW50LWFzc2lnbm1lbnRzLWxpc3Qge1xuXG4gIGhlaWdodDogMTAwdmg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAubGlzdC1oZWFkZXIge1xuXG4gICAgLm1kLWJ1dHRvbiB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBwYWRkaW5nOiAwIDhweDtcbiAgICB9XG4gIH1cblxuICAuY29udGVudCB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZEdyZXk7XG4gIH1cblxuICAuYm9keSBpOm5vdCguY2stbG9hZGluZyksIC5jb250ZW50IGkge1xuICAgIHdpZHRoOiAyZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG4gICAgJi5ncmF5IHtcbiAgICAgIGNvbG9yOiAkbGlnaHRUZXh0O1xuICAgIH1cblxuICAgICYuY2stY2Fycm90IHtcbiAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uKGFsbCwgMjAwbXMpO1xuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTE4MGRlZyk7XG5cbiAgICAgICYuc2hvdyB7XG4gICAgICAgIG9wYWNpdHk6IDEwMDtcbiAgICAgIH1cbiAgICAgICYuZmxpcCB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5hY2NvcmRpb24ge1xuXG4gICAgaSB7XG4gICAgICB3aWR0aDogMmVtO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG5cbiAgICAgICYuZ3JheSB7XG4gICAgICAgIGNvbG9yOiAkbGlnaHRUZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC5pbmRpY2F0b3ItY2lyY2xlIHtcbiAgICAgIHRvcDogMDtcbiAgICAgIHdpZHRoOiAxMHB4O1xuICAgICAgaGVpZ2h0OiAxMHB4O1xuICAgIH1cblxuICAgIG1kLWxpc3QtaXRlbSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY2tMaXN0QmFja2dyb3VuZDtcbiAgICAgIGhlaWdodDogJHRlYWNoZXJMaXN0SXRlbUhlaWdodDtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICBjb2xvcjogJGNrSGVhZGVyR3JleTtcblxuICAgICAgLm1kLWJ1dHRvbiB7XG4gICAgICAgIGNvbG9yOiAkY2tIZWFkZXJHcmV5O1xuICAgICAgICBmb250LWZhbWlseTogR290aGFtUm91bmRlZEJvb2s7XG4gICAgICB9XG5cbiAgICAgIC5ncmF5IHtcbiAgICAgICAgY29sb3I6ICRsaWdodFRleHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLnRvcCB7XG5cbiAgICAgIGkuY2stYmFjayB7XG4gICAgICAgIEBpbmNsdWRlIHRyYW5zZm9ybShyb3RhdGUoOTBkZWcpKTtcbiAgICAgICAgQGluY2x1ZGUgdHJhbnNpdGlvbih0cmFuc2Zvcm0sIDMwMG1zKTtcbiAgICAgICAgJi5jbG9zZWQge1xuICAgICAgICAgIEBpbmNsdWRlIHRyYW5zZm9ybShyb3RhdGUoMjcwZGVnKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAuYm9keSB7XG4gICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uKG1heC1oZWlnaHQsIDMwMG1zKTtcbiAgICAgIG1heC1oZWlnaHQ6IDIwMHB4O1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgICAgJi5jbG9zZWQge1xuICAgICAgICBtYXgtaGVpZ2h0OiAwO1xuICAgICAgfVxuXG4gICAgfVxuICB9XG5cbiAgLmxhc3QtbW9kaWZpZWQge1xuICAgIGRpc3BsYXk6IG5vbmU7IC8vIEhpZGUgdW50aWwgd2UgaGF2ZSBhIGJldHRlciBkYXRhcG9pbnQgZm9yIHRoaXMgY29sdW1uXG4gICAgcGFkZGluZzogMCA4cHg7XG4gICAgd2lkdGg6IDE1MHB4O1xuICB9XG5cbiAgLmVtcHR5LW1lc3NhZ2Uge1xuICAgIG1hcmdpbjogMmVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxufVxuIiwiLnVzZXItcHJvZmlsZSB7XG5cbiAgaGVpZ2h0OiAxMDB2aDtcblxuICAuaGVhZGVyIC5sZWZ0IHtcbiAgICBoZWlnaHQ6IGluaGVyaXQ7XG4gIH1cblxuICAubG9hZGluZyB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGhlaWdodDogMTAwJTtcblxuICAgIC5sb2FkaW5nLXRleHQge1xuICAgICAgcGFkZGluZzogMmVtO1xuICAgIH1cbiAgfVxuXG4gIC5zZXBhcmF0b3Ige1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAkZGlzYWJsZWRHcmV5O1xuICAgIG1hcmdpbjogMmVtIDFlbSAxZW0gMWVtO1xuICB9XG5cbiAgLmJvZHkge1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gIH1cblxuICAuZWRpdC1wcm9maWxlIHtcbiAgICBwYWRkaW5nOiAxZW07XG5cbiAgICAuZWRpdC1wcm9maWxlLWNvbHVtbiB7XG5cbiAgICAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cbiAgICAgID4gKiB7XG4gICAgICAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgfVxuXG4gICAgICBwYWRkaW5nOiAwIDFlbTtcbiAgICAgIG1pbi13aWR0aDogMjBlbTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgbWF4LXdpZHRoOiA0MGVtO1xuICAgICAgbWQtaW5wdXQtY29udGFpbmVyIHtcbiAgICAgICAgbGFiZWwge1xuICAgICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLnBsYW4ge1xuICAgICAgcGFkZGluZzogMCAxZW07XG4gICAgICBtYXJnaW46IDFlbSAwO1xuICAgIH1cblxuICAgIC5leHBpcmF0aW9uLWV4cGxhaW5lciB7XG4gICAgICBwYWRkaW5nOiAwIDJlbTtcbiAgICAgIG1hcmdpbjogMWVtIDA7XG4gICAgICBtYXgtd2lkdGg6IDM1ZW07XG4gICAgfVxuXG4gICAgLmNoYW5nZS1wYXNzd29yZC1mb3JtIHtcblxuICAgICAgcGFkZGluZy10b3A6IDFlbTtcblxuICAgICAgaDQge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICB9XG4gICAgICAuc2hvdy1uZXctcGFzc3dvcmQge1xuICAgICAgICBtYXJnaW4tdG9wOiAxZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */
